/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{var t={676:function(t,e){!function(t){"use strict";function e(t){return Array.prototype.slice.call(t)}function n(t){return new Promise((function(e,n){t.onsuccess=function(){e(t.result)},t.onerror=function(){n(t.error)}}))}function i(t,e,i){var r,o=new Promise((function(o,a){n(r=t[e].apply(t,i)).then(o,a)}));return o.request=r,o}function r(t,e,n){var r=i(t,e,n);return r.then((function(t){if(t)return new h(t,r.request)}))}function o(t,e,n){n.forEach((function(n){Object.defineProperty(t.prototype,n,{get:function(){return this[e][n]},set:function(t){this[e][n]=t}})}))}function a(t,e,n,r){r.forEach((function(r){r in n.prototype&&(t.prototype[r]=function(){return i(this[e],r,arguments)})}))}function s(t,e,n,i){i.forEach((function(i){i in n.prototype&&(t.prototype[i]=function(){return this[e][i].apply(this[e],arguments)})}))}function u(t,e,n,i){i.forEach((function(i){i in n.prototype&&(t.prototype[i]=function(){return r(this[e],i,arguments)})}))}function c(t){this._index=t}function h(t,e){this._cursor=t,this._request=e}function l(t){this._store=t}function f(t){this._tx=t,this.complete=new Promise((function(e,n){t.oncomplete=function(){e()},t.onerror=function(){n(t.error)},t.onabort=function(){n(t.error)}}))}function p(t,e,n){this._db=t,this.oldVersion=e,this.transaction=new f(n)}function d(t){this._db=t}o(c,"_index",["name","keyPath","multiEntry","unique"]),a(c,"_index",IDBIndex,["get","getKey","getAll","getAllKeys","count"]),u(c,"_index",IDBIndex,["openCursor","openKeyCursor"]),o(h,"_cursor",["direction","key","primaryKey","value"]),a(h,"_cursor",IDBCursor,["update","delete"]),["advance","continue","continuePrimaryKey"].forEach((function(t){t in IDBCursor.prototype&&(h.prototype[t]=function(){var e=this,i=arguments;return Promise.resolve().then((function(){return e._cursor[t].apply(e._cursor,i),n(e._request).then((function(t){if(t)return new h(t,e._request)}))}))})})),l.prototype.createIndex=function(){return new c(this._store.createIndex.apply(this._store,arguments))},l.prototype.index=function(){return new c(this._store.index.apply(this._store,arguments))},o(l,"_store",["name","keyPath","indexNames","autoIncrement"]),a(l,"_store",IDBObjectStore,["put","add","delete","clear","get","getAll","getKey","getAllKeys","count"]),u(l,"_store",IDBObjectStore,["openCursor","openKeyCursor"]),s(l,"_store",IDBObjectStore,["deleteIndex"]),f.prototype.objectStore=function(){return new l(this._tx.objectStore.apply(this._tx,arguments))},o(f,"_tx",["objectStoreNames","mode"]),s(f,"_tx",IDBTransaction,["abort"]),p.prototype.createObjectStore=function(){return new l(this._db.createObjectStore.apply(this._db,arguments))},o(p,"_db",["name","version","objectStoreNames"]),s(p,"_db",IDBDatabase,["deleteObjectStore","close"]),d.prototype.transaction=function(){return new f(this._db.transaction.apply(this._db,arguments))},o(d,"_db",["name","version","objectStoreNames"]),s(d,"_db",IDBDatabase,["close"]),["openCursor","openKeyCursor"].forEach((function(t){[l,c].forEach((function(n){t in n.prototype&&(n.prototype[t.replace("open","iterate")]=function(){var n=e(arguments),i=n[n.length-1],r=this._store||this._index,o=r[t].apply(r,n.slice(0,-1));o.onsuccess=function(){i(o.result)}})}))})),[c,l].forEach((function(t){t.prototype.getAll||(t.prototype.getAll=function(t,e){var n=this,i=[];return new Promise((function(r){n.iterateCursor(t,(function(t){t?(i.push(t.value),void 0===e||i.length!=e?t.continue():r(i)):r(i)}))}))})})),t.openDb=function(t,e,n){var r=i(indexedDB,"open",[t,e]),o=r.request;return o&&(o.onupgradeneeded=function(t){n&&n(new p(o.result,t.oldVersion,o.transaction))}),r.then((function(t){return new d(t)}))},t.deleteDb=function(t){return i(indexedDB,"deleteDatabase",[t])},Object.defineProperty(t,"__esModule",{value:!0})}(e)}},e={};function n(i){if(e[i])return e[i].exports;var r=e[i]={exports:{}};return t[i].call(r.exports,r,r.exports,n),r.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{"use strict";var t=function(e,n){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(e,n)},e=function(){return(e=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)};function i(t,e,n,i){return new(n||(n=Promise))((function(r,o){function a(t){try{u(i.next(t))}catch(t){o(t)}}function s(t){try{u(i.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?r(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(a,s)}u((i=i.apply(t,e||[])).next())}))}function r(t,e){var n,i,r,o,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,i&&(r=2&o[0]?i.return:o[0]?i.throw||((r=i.return)&&r.call(i),0):i.next)&&!(r=r.call(i,o[1])).done)return r;switch(i=0,r&&(o=[2&o[0],r.value]),o[0]){case 0:case 1:r=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,i=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((r=(r=a.trys).length>0&&r[r.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!r||o[1]>r[0]&&o[1]<r[3])){a.label=o[1];break}if(6===o[0]&&a.label<r[1]){a.label=r[1],r=o;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(o);break}r[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],i=0}finally{n=r=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function o(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],i=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&i>=t.length&&(t=void 0),{value:t&&t[i++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function a(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var i,r,o=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(i=o.next()).done;)a.push(i.value)}catch(t){r={error:t}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}return a}function s(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(a(arguments[e]));return t}function u(t,e){if(!(e instanceof Object))return e;switch(e.constructor){case Date:return new Date(e.getTime());case Object:void 0===t&&(t={});break;case Array:t=[];break;default:return e}for(var n in e)e.hasOwnProperty(n)&&"__proto__"!==n&&(t[n]=u(t[n],e[n]));return t}var c=function(){function t(){var t=this;this.reject=function(){},this.resolve=function(){},this.promise=new Promise((function(e,n){t.resolve=e,t.reject=n}))}return t.prototype.wrapCallback=function(t){var e=this;return function(n,i){n?e.reject(n):e.resolve(i),"function"==typeof t&&(e.promise.catch((function(){})),1===t.length?t(n):t(n,i))}},t}();function h(){try{return"[object process]"===Object.prototype.toString.call(n.g.process)}catch(t){return!1}}function l(){var t="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof t&&void 0!==t.id}function f(){return"indexedDB"in self&&null!=indexedDB}function p(){return new Promise((function(t,e){try{var n=!0,i="validate-browser-context-for-indexeddb-analytics-module",r=window.indexedDB.open(i);r.onsuccess=function(){r.result.close(),n||window.indexedDB.deleteDatabase(i),t(!0)},r.onupgradeneeded=function(){n=!1},r.onerror=function(){var t;e((null===(t=r.error)||void 0===t?void 0:t.message)||"")}}catch(t){e(t)}}))}function d(){return!(!navigator||!navigator.cookieEnabled)}var v=function(e){function n(t,i,r){var o=e.call(this,i)||this;return o.code=t,o.customData=r,o.name="FirebaseError",Object.setPrototypeOf(o,n.prototype),Error.captureStackTrace&&Error.captureStackTrace(o,m.prototype.create),o}return function(e,n){function i(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(i.prototype=n.prototype,new i)}(n,e),n}(Error),m=function(){function t(t,e,n){this.service=t,this.serviceName=e,this.errors=n}return t.prototype.create=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var i=e[0]||{},r=this.service+"/"+t,o=this.errors[t],a=o?g(o,i):"Error",s=this.serviceName+": "+a+" ("+r+").",u=new v(r,s,i);return u},t}();function g(t,e){return t.replace(b,(function(t,n){var i=e[n];return null!=i?String(i):"<"+n+"?>"}))}var b=/\{\$([^}]+)}/g;function y(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function w(t,e){var n=new I(t,e);return n.subscribe.bind(n)}!function(){function t(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(var t=1;t<this.blockSize;++t)this.pad_[t]=0;this.reset()}t.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},t.prototype.compress_=function(t,e){e||(e=0);var n=this.W_;if("string"==typeof t)for(var i=0;i<16;i++)n[i]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(i=0;i<16;i++)n[i]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(i=16;i<80;i++){var r=n[i-3]^n[i-8]^n[i-14]^n[i-16];n[i]=4294967295&(r<<1|r>>>31)}var o,a,s=this.chain_[0],u=this.chain_[1],c=this.chain_[2],h=this.chain_[3],l=this.chain_[4];for(i=0;i<80;i++)i<40?i<20?(o=h^u&(c^h),a=1518500249):(o=u^c^h,a=1859775393):i<60?(o=u&c|h&(u|c),a=2400959708):(o=u^c^h,a=3395469782),r=(s<<5|s>>>27)+o+l+a+n[i]&4294967295,l=h,h=c,c=4294967295&(u<<30|u>>>2),u=s,s=r;this.chain_[0]=this.chain_[0]+s&4294967295,this.chain_[1]=this.chain_[1]+u&4294967295,this.chain_[2]=this.chain_[2]+c&4294967295,this.chain_[3]=this.chain_[3]+h&4294967295,this.chain_[4]=this.chain_[4]+l&4294967295},t.prototype.update=function(t,e){if(null!=t){void 0===e&&(e=t.length);for(var n=e-this.blockSize,i=0,r=this.buf_,o=this.inbuf_;i<e;){if(0===o)for(;i<=n;)this.compress_(t,i),i+=this.blockSize;if("string"==typeof t){for(;i<e;)if(r[o]=t.charCodeAt(i),++i,++o===this.blockSize){this.compress_(r),o=0;break}}else for(;i<e;)if(r[o]=t[i],++i,++o===this.blockSize){this.compress_(r),o=0;break}}this.inbuf_=o,this.total_+=e}},t.prototype.digest=function(){var t=[],e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&e,e/=256;this.compress_(this.buf_);var i=0;for(n=0;n<5;n++)for(var r=24;r>=0;r-=8)t[i]=this.chain_[n]>>r&255,++i;return t}}();var I=function(){function t(t,e){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then((function(){t(n)})).catch((function(t){n.error(t)}))}return t.prototype.next=function(t){this.forEachObserver((function(e){e.next(t)}))},t.prototype.error=function(t){this.forEachObserver((function(e){e.error(t)})),this.close(t)},t.prototype.complete=function(){this.forEachObserver((function(t){t.complete()})),this.close()},t.prototype.subscribe=function(t,e,n){var i,r=this;if(void 0===t&&void 0===e&&void 0===n)throw new Error("Missing Observer.");void 0===(i=function(t,e){if("object"!=typeof t||null===t)return!1;for(var n=0,i=["next","error","complete"];n<i.length;n++){var r=i[n];if(r in t&&"function"==typeof t[r])return!0}return!1}(t)?t:{next:t,error:e,complete:n}).next&&(i.next=T),void 0===i.error&&(i.error=T),void 0===i.complete&&(i.complete=T);var o=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((function(){try{r.finalError?i.error(r.finalError):i.complete()}catch(t){}})),this.observers.push(i),o},t.prototype.unsubscribeOne=function(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},t.prototype.forEachObserver=function(t){if(!this.finalized)for(var e=0;e<this.observers.length;e++)this.sendOne(e,t)},t.prototype.sendOne=function(t,e){var n=this;this.task.then((function(){if(void 0!==n.observers&&void 0!==n.observers[t])try{e(n.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}}))},t.prototype.close=function(t){var e=this;this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then((function(){e.observers=void 0,e.onNoObservers=void 0})))},t}();function T(){}function E(t,e,n){void 0===e&&(e=1e3),void 0===n&&(n=2);var i=e*Math.pow(n,t),r=Math.round(.5*i*(Math.random()-.5)*2);return Math.min(144e5,i+r)}var S,_=function(){function t(t,e,n){this.name=t,this.instanceFactory=e,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY"}return t.prototype.setInstantiationMode=function(t){return this.instantiationMode=t,this},t.prototype.setMultipleInstances=function(t){return this.multipleInstances=t,this},t.prototype.setServiceProps=function(t){return this.serviceProps=t,this},t}(),A="[DEFAULT]",k=function(){function t(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map}return t.prototype.get=function(t){void 0===t&&(t=A);var e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){var n=new c;this.instancesDeferred.set(e,n);try{var i=this.getOrInitializeService(e);i&&n.resolve(i)}catch(t){}}return this.instancesDeferred.get(e).promise},t.prototype.getImmediate=function(t){var n=e({identifier:A,optional:!1},t),i=n.identifier,r=n.optional,o=this.normalizeInstanceIdentifier(i);try{var a=this.getOrInitializeService(o);if(!a){if(r)return null;throw Error("Service "+this.name+" is not available")}return a}catch(t){if(r)return null;throw t}},t.prototype.getComponent=function(){return this.component},t.prototype.setComponent=function(t){var e,n;if(t.name!==this.name)throw Error("Mismatching Component "+t.name+" for Provider "+this.name+".");if(this.component)throw Error("Component for "+this.name+" has already been provided");if(this.component=t,function(t){return"EAGER"===t.instantiationMode}(t))try{this.getOrInitializeService(A)}catch(t){}try{for(var i=o(this.instancesDeferred.entries()),r=i.next();!r.done;r=i.next()){var s=a(r.value,2),u=s[0],c=s[1],h=this.normalizeInstanceIdentifier(u);try{var l=this.getOrInitializeService(h);c.resolve(l)}catch(t){}}}catch(t){e={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}},t.prototype.clearInstance=function(t){void 0===t&&(t=A),this.instancesDeferred.delete(t),this.instances.delete(t)},t.prototype.delete=function(){return i(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return t=Array.from(this.instances.values()),[4,Promise.all(s(t.filter((function(t){return"INTERNAL"in t})).map((function(t){return t.INTERNAL.delete()})),t.filter((function(t){return"_delete"in t})).map((function(t){return t._delete()}))))];case 1:return e.sent(),[2]}}))}))},t.prototype.isComponentSet=function(){return null!=this.component},t.prototype.getOrInitializeService=function(t){var e=this.instances.get(t);return!e&&this.component&&(e=this.component.instanceFactory(this.container,function(t){return t===A?void 0:t}(t)),this.instances.set(t,e)),e||null},t.prototype.normalizeInstanceIdentifier=function(t){return this.component?this.component.multipleInstances?t:A:t},t}(),N=function(){function t(t){this.name=t,this.providers=new Map}return t.prototype.addComponent=function(t){var e=this.getProvider(t.name);if(e.isComponentSet())throw new Error("Component "+t.name+" has already been registered with "+this.name);e.setComponent(t)},t.prototype.addOrOverwriteComponent=function(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)},t.prototype.getProvider=function(t){if(this.providers.has(t))return this.providers.get(t);var e=new k(t,this);return this.providers.set(t,e),e},t.prototype.getProviders=function(){return Array.from(this.providers.values())},t}();function O(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),r=0;for(e=0;e<n;e++)for(var o=arguments[e],a=0,s=o.length;a<s;a++,r++)i[r]=o[a];return i}var C,P=[];!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(C||(C={}));var D,R={debug:C.DEBUG,verbose:C.VERBOSE,info:C.INFO,warn:C.WARN,error:C.ERROR,silent:C.SILENT},L=C.INFO,x=((S={})[C.DEBUG]="log",S[C.VERBOSE]="log",S[C.INFO]="info",S[C.WARN]="warn",S[C.ERROR]="error",S),M=function(t,e){for(var n=[],i=2;i<arguments.length;i++)n[i-2]=arguments[i];if(!(e<t.logLevel)){var r=(new Date).toISOString(),o=x[e];if(!o)throw new Error("Attempted to log a message with an invalid logType (value: "+e+")");console[o].apply(console,O(["["+r+"]  "+t.name+":"],n))}},j=function(){function t(t){this.name=t,this._logLevel=L,this._logHandler=M,this._userLogHandler=null,P.push(this)}return Object.defineProperty(t.prototype,"logLevel",{get:function(){return this._logLevel},set:function(t){if(!(t in C))throw new TypeError('Invalid value "'+t+'" assigned to `logLevel`');this._logLevel=t},enumerable:!1,configurable:!0}),t.prototype.setLogLevel=function(t){this._logLevel="string"==typeof t?R[t]:t},Object.defineProperty(t.prototype,"logHandler",{get:function(){return this._logHandler},set:function(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"userLogHandler",{get:function(){return this._userLogHandler},set:function(t){this._userLogHandler=t},enumerable:!1,configurable:!0}),t.prototype.debug=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,O([this,C.DEBUG],t)),this._logHandler.apply(this,O([this,C.DEBUG],t))},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,O([this,C.VERBOSE],t)),this._logHandler.apply(this,O([this,C.VERBOSE],t))},t.prototype.info=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,O([this,C.INFO],t)),this._logHandler.apply(this,O([this,C.INFO],t))},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,O([this,C.WARN],t)),this._logHandler.apply(this,O([this,C.WARN],t))},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,O([this,C.ERROR],t)),this._logHandler.apply(this,O([this,C.ERROR],t))},t}();function F(t){P.forEach((function(e){e.setLogLevel(t)}))}var V,U=((D={})["no-app"]="No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",D["bad-app-name"]="Illegal App name: '{$appName}",D["duplicate-app"]="Firebase App named '{$appName}' already exists",D["app-deleted"]="Firebase App named '{$appName}' already deleted",D["invalid-app-argument"]="firebase.{$appName}() takes either no argument or a Firebase App instance.",D["invalid-log-argument"]="First argument to `onLog` must be null or a function.",D),q=new m("app","Firebase",U),H="@firebase/app",K="[DEFAULT]",B=((V={})[H]="fire-core",V["@firebase/analytics"]="fire-analytics",V["@firebase/auth"]="fire-auth",V["@firebase/database"]="fire-rtdb",V["@firebase/functions"]="fire-fn",V["@firebase/installations"]="fire-iid",V["@firebase/messaging"]="fire-fcm",V["@firebase/performance"]="fire-perf",V["@firebase/remote-config"]="fire-rc",V["@firebase/storage"]="fire-gcs",V["@firebase/firestore"]="fire-fst",V["fire-js"]="fire-js",V["firebase-wrapper"]="fire-js-all",V),G=new j("@firebase/app"),W=function(){function t(t,e,n){var i,r,a=this;this.firebase_=n,this.isDeleted_=!1,this.name_=e.name,this.automaticDataCollectionEnabled_=e.automaticDataCollectionEnabled||!1,this.options_=u(void 0,t),this.container=new N(e.name),this._addComponent(new _("app",(function(){return a}),"PUBLIC"));try{for(var s=o(this.firebase_.INTERNAL.components.values()),c=s.next();!c.done;c=s.next()){var h=c.value;this._addComponent(h)}}catch(t){i={error:t}}finally{try{c&&!c.done&&(r=s.return)&&r.call(s)}finally{if(i)throw i.error}}}return Object.defineProperty(t.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed_(),this.automaticDataCollectionEnabled_},set:function(t){this.checkDestroyed_(),this.automaticDataCollectionEnabled_=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"name",{get:function(){return this.checkDestroyed_(),this.name_},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"options",{get:function(){return this.checkDestroyed_(),this.options_},enumerable:!1,configurable:!0}),t.prototype.delete=function(){var t=this;return new Promise((function(e){t.checkDestroyed_(),e()})).then((function(){return t.firebase_.INTERNAL.removeApp(t.name_),Promise.all(t.container.getProviders().map((function(t){return t.delete()})))})).then((function(){t.isDeleted_=!0}))},t.prototype._getService=function(t,e){return void 0===e&&(e=K),this.checkDestroyed_(),this.container.getProvider(t).getImmediate({identifier:e})},t.prototype._removeServiceInstance=function(t,e){void 0===e&&(e=K),this.container.getProvider(t).clearInstance(e)},t.prototype._addComponent=function(t){try{this.container.addComponent(t)}catch(e){G.debug("Component "+t.name+" failed to register with FirebaseApp "+this.name,e)}},t.prototype._addOrOverwriteComponent=function(t){this.container.addOrOverwriteComponent(t)},t.prototype.checkDestroyed_=function(){if(this.isDeleted_)throw q.create("app-deleted",{appName:this.name_})},t}();W.prototype.name&&W.prototype.options||W.prototype.delete||console.log("dc");var z=function t(){var n=function(t){var e={},n=new Map,i={__esModule:!0,initializeApp:function(n,r){void 0===r&&(r={}),"object"==typeof r&&null!==r||(r={name:r});var o=r;void 0===o.name&&(o.name=K);var a=o.name;if("string"!=typeof a||!a)throw q.create("bad-app-name",{appName:String(a)});if(y(e,a))throw q.create("duplicate-app",{appName:a});var s=new t(n,o,i);return e[a]=s,s},app:r,registerVersion:function(t,e,n){var i,r=null!==(i=B[t])&&void 0!==i?i:t;n&&(r+="-"+n);var o=r.match(/\s|\//),s=e.match(/\s|\//);if(o||s){var u=['Unable to register library "'+r+'" with version "'+e+'":'];return o&&u.push('library name "'+r+'" contains illegal characters (whitespace or "/")'),o&&s&&u.push("and"),s&&u.push('version name "'+e+'" contains illegal characters (whitespace or "/")'),void G.warn(u.join(" "))}a(new _(r+"-version",(function(){return{library:r,version:e}}),"VERSION"))},setLogLevel:F,onLog:function(t,e){if(null!==t&&"function"!=typeof t)throw q.create("invalid-log-argument",{appName:name});!function(t,e){for(var n=function(n){var i=null;e&&e.level&&(i=R[e.level]),n.userLogHandler=null===t?null:function(e,n){for(var r=[],o=2;o<arguments.length;o++)r[o-2]=arguments[o];var a=r.map((function(t){if(null==t)return null;if("string"==typeof t)return t;if("number"==typeof t||"boolean"==typeof t)return t.toString();if(t instanceof Error)return t.message;try{return JSON.stringify(t)}catch(t){return null}})).filter((function(t){return t})).join(" ");n>=(null!=i?i:e.logLevel)&&t({level:C[n].toLowerCase(),message:a,args:r,type:e.name})}},i=0,r=P;i<r.length;i++)n(r[i])}(t,e)},apps:null,SDK_VERSION:"8.0.1",INTERNAL:{registerComponent:a,removeApp:function(t){delete e[t]},components:n,useAsService:function(t,e){return"serverAuth"===e?null:e}}};function r(t){if(!y(e,t=t||K))throw q.create("no-app",{appName:t});return e[t]}function a(a){var s,c,h=a.name;if(n.has(h))return G.debug("There were multiple attempts to register component "+h+"."),"PUBLIC"===a.type?i[h]:null;if(n.set(h,a),"PUBLIC"===a.type){var l=function(t){if(void 0===t&&(t=r()),"function"!=typeof t[h])throw q.create("invalid-app-argument",{appName:h});return t[h]()};void 0!==a.serviceProps&&u(l,a.serviceProps),i[h]=l,t.prototype[h]=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return this._getService.bind(this,h).apply(this,a.multipleInstances?t:[])}}try{for(var f=o(Object.keys(e)),p=f.next();!p.done;p=f.next()){var d=p.value;e[d]._addComponent(a)}}catch(t){s={error:t}}finally{try{p&&!p.done&&(c=f.return)&&c.call(f)}finally{if(s)throw s.error}}return"PUBLIC"===a.type?i[h]:null}return i.default=i,Object.defineProperty(i,"apps",{get:function(){return Object.keys(e).map((function(t){return e[t]}))}}),r.App=t,i}(W);return n.INTERNAL=e(e({},n.INTERNAL),{createFirebaseNamespace:t,extendNamespace:function(t){u(n,t)},createSubscribe:w,ErrorFactory:m,deepExtend:u}),n}(),X=function(){function t(t){this.container=t}return t.prototype.getPlatformInfoString=function(){return this.container.getProviders().map((function(t){if(function(t){var e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}(t)){var e=t.getImmediate();return e.library+"/"+e.version}return null})).filter((function(t){return t})).join(" ")},t}();if("object"==typeof self&&self.self===self&&void 0!==self.firebase){G.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");var J=self.firebase.SDK_VERSION;J&&J.indexOf("LITE")>=0&&G.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ")}var Y=z.initializeApp;z.initializeApp=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return h()&&G.warn('\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the "main" field in package.json.\n      \n      If you are using Webpack, you can specify "main" as the first item in\n      "resolve.mainFields":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the @rollup/plugin-node-resolve plugin and specify "main"\n      as the first item in "mainFields", e.g. [\'main\', \'module\'].\n      https://github.com/rollup/@rollup/plugin-node-resolve\n      '),Y.apply(void 0,t)};var $=z;!function(t,e){t.INTERNAL.registerComponent(new _("platform-logger",(function(t){return new X(t)}),"PRIVATE")),t.registerVersion(H,"0.6.13",void 0),t.registerVersion("fire-js","")}($);const Z=$;var Q,tt=n(676),et="w:0.4.19",nt=((Q={})["missing-app-config-values"]='Missing App configuration value: "{$valueName}"',Q["not-registered"]="Firebase Installation is not registered.",Q["installation-not-found"]="Firebase Installation not found.",Q["request-failed"]='{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"',Q["app-offline"]="Could not process request. Application offline.",Q["delete-pending-registration"]="Can't delete installation while there is a pending registration request.",Q),it=new m("installations","Installations",nt);function rt(t){return t instanceof v&&t.code.includes("request-failed")}function ot(t){return"https://firebaseinstallations.googleapis.com/v1/projects/"+t.projectId+"/installations"}function at(t){return{token:t.token,requestStatus:2,expiresIn:(e=t.expiresIn,Number(e.replace("s","000"))),creationTime:Date.now()};var e}function st(t,e){return i(this,void 0,void 0,(function(){var n,i;return r(this,(function(r){switch(r.label){case 0:return[4,e.json()];case 1:return n=r.sent(),i=n.error,[2,it.create("request-failed",{requestName:t,serverCode:i.code,serverMessage:i.message,serverStatus:i.status})]}}))}))}function ut(t){var e=t.apiKey;return new Headers({"Content-Type":"application/json",Accept:"application/json","x-goog-api-key":e})}function ct(t,e){var n=e.refreshToken,i=ut(t);return i.append("Authorization",function(t){return"FIS_v2 "+t}(n)),i}function ht(t){return i(this,void 0,void 0,(function(){var e;return r(this,(function(n){switch(n.label){case 0:return[4,t()];case 1:return(e=n.sent()).status>=500&&e.status<600?[2,t()]:[2,e]}}))}))}function lt(t,e){var n=e.fid;return i(this,void 0,void 0,(function(){var e,i,o,a,s,u;return r(this,(function(r){switch(r.label){case 0:return e=ot(t),i=ut(t),o={fid:n,authVersion:"FIS_v2",appId:t.appId,sdkVersion:et},a={method:"POST",headers:i,body:JSON.stringify(o)},[4,ht((function(){return fetch(e,a)}))];case 1:return(s=r.sent()).ok?[4,s.json()]:[3,3];case 2:return[2,{fid:(u=r.sent()).fid||n,registrationStatus:2,refreshToken:u.refreshToken,authToken:at(u.authToken)}];case 3:return[4,st("Create Installation",s)];case 4:throw r.sent()}}))}))}function ft(t){return new Promise((function(e){setTimeout(e,t)}))}var pt=/^[cdef][\w-]{21}$/;function dt(){try{var t=new Uint8Array(17);(self.crypto||self.msCrypto).getRandomValues(t),t[0]=112+t[0]%16;var e=function(t){return(e=t,btoa(String.fromCharCode.apply(String,s(e))).replace(/\+/g,"-").replace(/\//g,"_")).substr(0,22);var e}(t);return pt.test(e)?e:""}catch(t){return""}}function vt(t){return t.appName+"!"+t.appId}var mt=new Map;function gt(t,e){var n=vt(t);bt(n,e),function(t,e){var n=wt();n&&n.postMessage({key:t,fid:e}),It()}(n,e)}function bt(t,e){var n,i,r=mt.get(t);if(r)try{for(var a=o(r),s=a.next();!s.done;s=a.next())(0,s.value)(e)}catch(t){n={error:t}}finally{try{s&&!s.done&&(i=a.return)&&i.call(a)}finally{if(n)throw n.error}}}var yt=null;function wt(){return!yt&&"BroadcastChannel"in self&&((yt=new BroadcastChannel("[Firebase] FID Change")).onmessage=function(t){bt(t.data.key,t.data.fid)}),yt}function It(){0===mt.size&&yt&&(yt.close(),yt=null)}var Tt,Et="firebase-installations-store",St=null;function _t(){return St||(St=(0,tt.openDb)("firebase-installations-database",1,(function(t){switch(t.oldVersion){case 0:t.createObjectStore(Et)}}))),St}function At(t,e){return i(this,void 0,void 0,(function(){var n,i,o,a,s;return r(this,(function(r){switch(r.label){case 0:return n=vt(t),[4,_t()];case 1:return i=r.sent(),o=i.transaction(Et,"readwrite"),[4,(a=o.objectStore(Et)).get(n)];case 2:return s=r.sent(),[4,a.put(e,n)];case 3:return r.sent(),[4,o.complete];case 4:return r.sent(),s&&s.fid===e.fid||gt(t,e.fid),[2,e]}}))}))}function kt(t){return i(this,void 0,void 0,(function(){var e,n,i;return r(this,(function(r){switch(r.label){case 0:return e=vt(t),[4,_t()];case 1:return n=r.sent(),[4,(i=n.transaction(Et,"readwrite")).objectStore(Et).delete(e)];case 2:return r.sent(),[4,i.complete];case 3:return r.sent(),[2]}}))}))}function Nt(t,e){return i(this,void 0,void 0,(function(){var n,i,o,a,s,u;return r(this,(function(r){switch(r.label){case 0:return n=vt(t),[4,_t()];case 1:return i=r.sent(),o=i.transaction(Et,"readwrite"),[4,(a=o.objectStore(Et)).get(n)];case 2:return s=r.sent(),void 0!==(u=e(s))?[3,4]:[4,a.delete(n)];case 3:return r.sent(),[3,6];case 4:return[4,a.put(u,n)];case 5:r.sent(),r.label=6;case 6:return[4,o.complete];case 7:return r.sent(),!u||s&&s.fid===u.fid||gt(t,u.fid),[2,u]}}))}))}function Ot(t){return i(this,void 0,void 0,(function(){var e,n,o;return r(this,(function(a){switch(a.label){case 0:return[4,Nt(t,(function(n){var o=function(t){return Dt(t||{fid:dt(),registrationStatus:0})}(n),a=function(t,e){if(0===e.registrationStatus){if(!navigator.onLine)return{installationEntry:e,registrationPromise:Promise.reject(it.create("app-offline"))};var n={fid:e.fid,registrationStatus:1,registrationTime:Date.now()};return{installationEntry:n,registrationPromise:function(t,e){return i(this,void 0,void 0,(function(){var n,i;return r(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,7]),[4,lt(t,e)];case 1:return n=r.sent(),[2,At(t,n)];case 2:return rt(i=r.sent())&&409===i.customData.serverCode?[4,kt(t)]:[3,4];case 3:return r.sent(),[3,6];case 4:return[4,At(t,{fid:e.fid,registrationStatus:0})];case 5:r.sent(),r.label=6;case 6:throw i;case 7:return[2]}}))}))}(t,n)}}return 1===e.registrationStatus?{installationEntry:e,registrationPromise:Ct(t)}:{installationEntry:e}}(t,o);return e=a.registrationPromise,a.installationEntry}))];case 1:return""!==(n=a.sent()).fid?[3,3]:(o={},[4,e]);case 2:return[2,(o.installationEntry=a.sent(),o)];case 3:return[2,{installationEntry:n,registrationPromise:e}]}}))}))}function Ct(t){return i(this,void 0,void 0,(function(){var e,n,i,o;return r(this,(function(r){switch(r.label){case 0:return[4,Pt(t)];case 1:e=r.sent(),r.label=2;case 2:return 1!==e.registrationStatus?[3,5]:[4,ft(100)];case 3:return r.sent(),[4,Pt(t)];case 4:return e=r.sent(),[3,2];case 5:return 0!==e.registrationStatus?[3,7]:[4,Ot(t)];case 6:return n=r.sent(),i=n.installationEntry,(o=n.registrationPromise)?[2,o]:[2,i];case 7:return[2,e]}}))}))}function Pt(t){return Nt(t,(function(t){if(!t)throw it.create("installation-not-found");return Dt(t)}))}function Dt(t){return 1===(e=t).registrationStatus&&e.registrationTime+1e4<Date.now()?{fid:t.fid,registrationStatus:0}:t;var e}function Rt(t,e){var n=t.appConfig,o=t.platformLoggerProvider;return i(this,void 0,void 0,(function(){var t,i,a,s,u,c;return r(this,(function(r){switch(r.label){case 0:return t=function(t,e){var n=e.fid;return ot(t)+"/"+n+"/authTokens:generate"}(n,e),i=ct(n,e),(a=o.getImmediate({optional:!0}))&&i.append("x-firebase-client",a.getPlatformInfoString()),s={installation:{sdkVersion:et}},u={method:"POST",headers:i,body:JSON.stringify(s)},[4,ht((function(){return fetch(t,u)}))];case 1:return(c=r.sent()).ok?[4,c.json()]:[3,3];case 2:return[2,at(r.sent())];case 3:return[4,st("Generate Auth Token",c)];case 4:throw r.sent()}}))}))}function Lt(t,n){return void 0===n&&(n=!1),i(this,void 0,void 0,(function(){var o,a,s;return r(this,(function(u){switch(u.label){case 0:return[4,Nt(t.appConfig,(function(a){if(!Mt(a))throw it.create("not-registered");var s,u=a.authToken;if(!n&&(2===(s=u).requestStatus&&!function(t){var e=Date.now();return e<t.creationTime||t.creationTime+t.expiresIn<e+36e5}(s)))return a;if(1===u.requestStatus)return o=function(t,e){return i(this,void 0,void 0,(function(){var n,i;return r(this,(function(r){switch(r.label){case 0:return[4,xt(t.appConfig)];case 1:n=r.sent(),r.label=2;case 2:return 1!==n.authToken.requestStatus?[3,5]:[4,ft(100)];case 3:return r.sent(),[4,xt(t.appConfig)];case 4:return n=r.sent(),[3,2];case 5:return 0===(i=n.authToken).requestStatus?[2,Lt(t,e)]:[2,i]}}))}))}(t,n),a;if(!navigator.onLine)throw it.create("app-offline");var c=function(t){var n={requestStatus:1,requestTime:Date.now()};return e(e({},t),{authToken:n})}(a);return o=function(t,n){return i(this,void 0,void 0,(function(){var i,o,a;return r(this,(function(r){switch(r.label){case 0:return r.trys.push([0,3,,8]),[4,Rt(t,n)];case 1:return i=r.sent(),a=e(e({},n),{authToken:i}),[4,At(t.appConfig,a)];case 2:return r.sent(),[2,i];case 3:return!rt(o=r.sent())||401!==o.customData.serverCode&&404!==o.customData.serverCode?[3,5]:[4,kt(t.appConfig)];case 4:return r.sent(),[3,7];case 5:return a=e(e({},n),{authToken:{requestStatus:0}}),[4,At(t.appConfig,a)];case 6:r.sent(),r.label=7;case 7:throw o;case 8:return[2]}}))}))}(t,c),c}))];case 1:return a=u.sent(),o?[4,o]:[3,3];case 2:return s=u.sent(),[3,4];case 3:s=a.authToken,u.label=4;case 4:return[2,s]}}))}))}function xt(t){return Nt(t,(function(t){if(!Mt(t))throw it.create("not-registered");var n;return 1===(n=t.authToken).requestStatus&&n.requestTime+1e4<Date.now()?e(e({},t),{authToken:{requestStatus:0}}):t}))}function Mt(t){return void 0!==t&&2===t.registrationStatus}function jt(t){return i(this,void 0,void 0,(function(){var e;return r(this,(function(n){switch(n.label){case 0:return[4,Ot(t)];case 1:return(e=n.sent().registrationPromise)?[4,e]:[3,3];case 2:n.sent(),n.label=3;case 3:return[2]}}))}))}function Ft(t,e){return i(this,void 0,void 0,(function(){var n,i,o,a;return r(this,(function(r){switch(r.label){case 0:return n=function(t,e){var n=e.fid;return ot(t)+"/"+n}(t,e),i=ct(t,e),o={method:"DELETE",headers:i},[4,ht((function(){return fetch(n,o)}))];case 1:return(a=r.sent()).ok?[3,3]:[4,st("Delete Installation",a)];case 2:throw r.sent();case 3:return[2]}}))}))}function Vt(t){return it.create("missing-app-config-values",{valueName:t})}(Tt=Z).INTERNAL.registerComponent(new _("installations",(function(t){var e=t.getProvider("app").getImmediate(),n={appConfig:function(t){var e,n;if(!t||!t.options)throw Vt("App Configuration");if(!t.name)throw Vt("App Name");try{for(var i=o(["projectId","apiKey","appId"]),r=i.next();!r.done;r=i.next()){var a=r.value;if(!t.options[a])throw Vt(a)}}catch(t){e={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(e)throw e.error}}return{appName:t.name,projectId:t.options.projectId,apiKey:t.options.apiKey,appId:t.options.appId}}(e),platformLoggerProvider:t.getProvider("platform-logger")};return{app:e,getId:function(){return function(t){return i(this,void 0,void 0,(function(){var e,n,i;return r(this,(function(r){switch(r.label){case 0:return[4,Ot(t.appConfig)];case 1:return e=r.sent(),n=e.installationEntry,(i=e.registrationPromise)?i.catch(console.error):Lt(t).catch(console.error),[2,n.fid]}}))}))}(n)},getToken:function(t){return function(t,e){return void 0===e&&(e=!1),i(this,void 0,void 0,(function(){return r(this,(function(n){switch(n.label){case 0:return[4,jt(t.appConfig)];case 1:return n.sent(),[4,Lt(t,e)];case 2:return[2,n.sent().token]}}))}))}(n,t)},delete:function(){return function(t){return i(this,void 0,void 0,(function(){var e,n;return r(this,(function(i){switch(i.label){case 0:return[4,Nt(e=t.appConfig,(function(t){if(!t||0!==t.registrationStatus)return t}))];case 1:if(!(n=i.sent()))return[3,6];if(1!==n.registrationStatus)return[3,2];throw it.create("delete-pending-registration");case 2:if(2!==n.registrationStatus)return[3,6];if(navigator.onLine)return[3,3];throw it.create("app-offline");case 3:return[4,Ft(e,n)];case 4:return i.sent(),[4,kt(e)];case 5:i.sent(),i.label=6;case 6:return[2]}}))}))}(n)},onIdChange:function(t){return function(t,e){var n=t.appConfig;return function(t,e){wt();var n=vt(t),i=mt.get(n);i||(i=new Set,mt.set(n,i)),i.add(e)}(n,e),function(){!function(t,e){var n=vt(t),i=mt.get(n);i&&(i.delete(e),0===i.size&&mt.delete(n),It())}(n,e)}}(n,t)}}}),"PUBLIC")),Tt.registerVersion("@firebase/installations","0.4.19");var Ut,qt,Ht="https://www.googletagmanager.com/gtag/js";!function(t){t.EVENT="event",t.SET="set",t.CONFIG="config"}(Ut||(Ut={})),function(t){t.ADD_SHIPPING_INFO="add_shipping_info",t.ADD_PAYMENT_INFO="add_payment_info",t.ADD_TO_CART="add_to_cart",t.ADD_TO_WISHLIST="add_to_wishlist",t.BEGIN_CHECKOUT="begin_checkout",t.CHECKOUT_PROGRESS="checkout_progress",t.EXCEPTION="exception",t.GENERATE_LEAD="generate_lead",t.LOGIN="login",t.PAGE_VIEW="page_view",t.PURCHASE="purchase",t.REFUND="refund",t.REMOVE_FROM_CART="remove_from_cart",t.SCREEN_VIEW="screen_view",t.SEARCH="search",t.SELECT_CONTENT="select_content",t.SELECT_ITEM="select_item",t.SELECT_PROMOTION="select_promotion",t.SET_CHECKOUT_OPTION="set_checkout_option",t.SHARE="share",t.SIGN_UP="sign_up",t.TIMING_COMPLETE="timing_complete",t.VIEW_CART="view_cart",t.VIEW_ITEM="view_item",t.VIEW_ITEM_LIST="view_item_list",t.VIEW_PROMOTION="view_promotion",t.VIEW_SEARCH_RESULTS="view_search_results"}(qt||(qt={}));var Kt,Bt=new j("@firebase/analytics");function Gt(t,e,n,o,a,s){return i(this,void 0,void 0,(function(){var i,u,c,h;return r(this,(function(r){switch(r.label){case 0:i=o[a],r.label=1;case 1:return r.trys.push([1,7,,8]),i?[4,e[i]]:[3,3];case 2:return r.sent(),[3,6];case 3:return[4,Promise.all(n)];case 4:return u=r.sent(),(c=u.find((function(t){return t.measurementId===a})))?[4,e[c.appId]]:[3,6];case 5:r.sent(),r.label=6;case 6:return[3,8];case 7:return h=r.sent(),Bt.error(h),[3,8];case 8:return t(Ut.CONFIG,a,s),[2]}}))}))}function Wt(t,e,n,o,a){return i(this,void 0,void 0,(function(){var i,s,u,c,h,l,f,p;return r(this,(function(r){switch(r.label){case 0:return r.trys.push([0,4,,5]),i=[],a&&a.send_to?(s=a.send_to,Array.isArray(s)||(s=[s]),[4,Promise.all(n)]):[3,2];case 1:for(u=r.sent(),c=function(t){var n=u.find((function(e){return e.measurementId===t})),r=n&&e[n.appId];if(!r)return i=[],"break";i.push(r)},h=0,l=s;h<l.length&&(f=l[h],"break"!==c(f));h++);r.label=2;case 2:return 0===i.length&&(i=Object.values(e)),[4,Promise.all(i)];case 3:return r.sent(),t(Ut.EVENT,o,a||{}),[3,5];case 4:return p=r.sent(),Bt.error(p),[3,5];case 5:return[2]}}))}))}var zt=((Kt={})["already-exists"]="A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.",Kt["already-initialized"]="Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.",Kt["interop-component-reg-failed"]="Firebase Analytics Interop Component failed to instantiate: {$reason}",Kt["invalid-analytics-context"]="Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}",Kt["indexeddb-unavailable"]="IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}",Kt["fetch-throttle"]="The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.",Kt["config-fetch-failed"]="Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}",Kt["no-api-key"]='The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.',Kt["no-app-id"]='The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.',Kt),Xt=new m("analytics","Analytics",zt),Jt=new(function(){function t(t,e){void 0===t&&(t={}),void 0===e&&(e=1e3),this.throttleMetadata=t,this.intervalMillis=e}return t.prototype.getThrottleMetadata=function(t){return this.throttleMetadata[t]},t.prototype.setThrottleMetadata=function(t,e){this.throttleMetadata[t]=e},t.prototype.deleteThrottleMetadata=function(t){delete this.throttleMetadata[t]},t}());function Yt(t){return new Headers({Accept:"application/json","x-goog-api-key":t})}function $t(t){var e;return i(this,void 0,void 0,(function(){var n,i,o,a,s,u,c;return r(this,(function(r){switch(r.label){case 0:return n=t.appId,i=t.apiKey,o={method:"GET",headers:Yt(i)},a="https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig".replace("{app-id}",n),[4,fetch(a,o)];case 1:if(200===(s=r.sent()).status||304===s.status)return[3,6];u="",r.label=2;case 2:return r.trys.push([2,4,,5]),[4,s.json()];case 3:return c=r.sent(),(null===(e=c.error)||void 0===e?void 0:e.message)&&(u=c.error.message),[3,5];case 4:return r.sent(),[3,5];case 5:throw Xt.create("config-fetch-failed",{httpStatus:s.status,responseMessage:u});case 6:return[2,s.json()]}}))}))}function Zt(t,e,n,o){var a=e.throttleEndTimeMillis,s=e.backoffCount;return void 0===o&&(o=Jt),i(this,void 0,void 0,(function(){var e,i,u,c,h,l,f;return r(this,(function(r){switch(r.label){case 0:e=t.appId,i=t.measurementId,r.label=1;case 1:return r.trys.push([1,3,,4]),[4,Qt(n,a)];case 2:return r.sent(),[3,4];case 3:if(u=r.sent(),i)return Bt.warn("Timed out fetching this Firebase app's measurement ID from the server. Falling back to the measurement ID "+i+' provided in the "measurementId" field in the local Firebase config. ['+u.message+"]"),[2,{appId:e,measurementId:i}];throw u;case 4:return r.trys.push([4,6,,7]),[4,$t(t)];case 5:return c=r.sent(),o.deleteThrottleMetadata(e),[2,c];case 6:if(!function(t){if(!(t instanceof v&&t.customData))return!1;var e=Number(t.customData.httpStatus);return 429===e||500===e||503===e||504===e}(h=r.sent())){if(o.deleteThrottleMetadata(e),i)return Bt.warn("Failed to fetch this Firebase app's measurement ID from the server. Falling back to the measurement ID "+i+' provided in the "measurementId" field in the local Firebase config. ['+h.message+"]"),[2,{appId:e,measurementId:i}];throw h}return l=503===Number(h.customData.httpStatus)?E(s,o.intervalMillis,30):E(s,o.intervalMillis),f={throttleEndTimeMillis:Date.now()+l,backoffCount:s+1},o.setThrottleMetadata(e,f),Bt.debug("Calling attemptFetch again in "+l+" millis"),[2,Zt(t,f,n,o)];case 7:return[2]}}))}))}function Qt(t,e){return new Promise((function(n,i){var r=Math.max(e-Date.now(),0),o=setTimeout(n,r);t.addEventListener((function(){clearTimeout(o),i(Xt.create("fetch-throttle",{throttleEndTimeMillis:e}))}))}))}var te=function(){function t(){this.listeners=[]}return t.prototype.addEventListener=function(t){this.listeners.push(t)},t.prototype.abort=function(){this.listeners.forEach((function(t){return t()}))},t}();var ee,ne,ie={},re=[],oe={},ae="dataLayer",se="gtag",ue=!1;function ce(t){if(ue)throw Xt.create("already-initialized");t.dataLayerName&&(ae=t.dataLayerName),t.gtagName&&(se=t.gtagName)}function he(t,n){!function(){var t=[];if(l()&&t.push("This is a browser extension environment."),d()||t.push("Cookies are not available."),t.length>0){var e=t.map((function(t,e){return"("+(e+1)+") "+t})).join(" "),n=Xt.create("invalid-analytics-context",{errorInfo:e});Bt.warn(n.message)}}();var o=t.options.appId;if(!o)throw Xt.create("no-app-id");if(!t.options.apiKey){if(!t.options.measurementId)throw Xt.create("no-api-key");Bt.warn('The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest measurement ID for this Firebase app. Falling back to the measurement ID '+t.options.measurementId+' provided in the "measurementId" field in the local Firebase config.')}if(null!=ie[o])throw Xt.create("already-exists",{id:o});if(!ue){(function(){for(var t=window.document.getElementsByTagName("script"),e=0,n=Object.values(t);e<n.length;e++){var i=n[e];if(i.src&&i.src.includes(Ht))return i}return null})()||function(t){var e=document.createElement("script");e.src=Ht+"?l="+t,e.async=!0,document.head.appendChild(e)}(ae),function(t){var e=[];Array.isArray(window[t])?e=window[t]:window[t]=e}(ae);var a=function(t,e,n,o,a){var s=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];window[o].push(arguments)};return window[a]&&"function"==typeof window[a]&&(s=window[a]),window[a]=function(t,e,n,o){return function(a,s,u){return i(this,void 0,void 0,(function(){var i;return r(this,(function(r){switch(r.label){case 0:return r.trys.push([0,6,,7]),a!==Ut.EVENT?[3,2]:[4,Wt(t,e,n,s,u)];case 1:return r.sent(),[3,5];case 2:return a!==Ut.CONFIG?[3,4]:[4,Gt(t,e,n,o,s,u)];case 3:return r.sent(),[3,5];case 4:t(Ut.SET,s),r.label=5;case 5:return[3,7];case 6:return i=r.sent(),Bt.error(i),[3,7];case 7:return[2]}}))}))}}(s,t,e,n),{gtagCore:s,wrappedGtag:window[a]}}(ie,re,oe,ae,se),s=a.wrappedGtag,u=a.gtagCore;ne=s,ee=u,ue=!0}return ie[o]=function(t,e,n,o,a){return i(this,void 0,void 0,(function(){var s,u,c,h,l,d,v;return r(this,(function(m){switch(m.label){case 0:return(s=function(t,e,n){return void 0===e&&(e=Jt),i(this,void 0,void 0,(function(){var n,o,a,s,u,c,h=this;return r(this,(function(l){if(n=t.options,o=n.appId,a=n.apiKey,s=n.measurementId,!o)throw Xt.create("no-app-id");if(!a){if(s)return[2,{measurementId:s,appId:o}];throw Xt.create("no-api-key")}return u=e.getThrottleMetadata(o)||{backoffCount:0,throttleEndTimeMillis:Date.now()},c=new te,setTimeout((function(){return i(h,void 0,void 0,(function(){return r(this,(function(t){return c.abort(),[2]}))}))}),6e4),[2,Zt({appId:o,apiKey:a,measurementId:s},u,c,e)]}))}))}(t)).then((function(e){n[e.measurementId]=e.appId,t.options.measurementId&&e.measurementId!==t.options.measurementId&&Bt.warn("The measurement ID in the local Firebase config ("+t.options.measurementId+") does not match the measurement ID fetched from the server ("+e.measurementId+"). To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.")})).catch((function(t){return Bt.error(t)})),e.push(s),u=function(){return i(this,void 0,void 0,(function(){var t;return r(this,(function(e){switch(e.label){case 0:return f()?[3,1]:(Bt.warn(Xt.create("indexeddb-unavailable",{errorInfo:"IndexedDB is not available in this environment."}).message),[2,!1]);case 1:return e.trys.push([1,3,,4]),[4,p()];case 2:return e.sent(),[3,4];case 3:return t=e.sent(),Bt.warn(Xt.create("indexeddb-unavailable",{errorInfo:t}).message),[2,!1];case 4:return[2,!0]}}))}))}().then((function(t){return t?o.getId():void 0})),[4,Promise.all([s,u])];case 1:return c=m.sent(),h=c[0],l=c[1],a("js",new Date),(v={}).origin="firebase",v.update=!0,d=v,null!=l&&(d.firebase_id=l),a(Ut.CONFIG,h.measurementId,d),[2,h.measurementId]}}))}))}(t,re,oe,n,ee),{app:t,logEvent:function(t,n,a){(function(t,n,o,a,s){return i(this,void 0,void 0,(function(){var i,u;return r(this,(function(r){switch(r.label){case 0:return s&&s.global?(t(Ut.EVENT,o,a),[2]):[3,1];case 1:return[4,n];case 2:i=r.sent(),u=e(e({},a),{send_to:i}),t(Ut.EVENT,o,u),r.label=3;case 3:return[2]}}))}))})(ne,ie[o],t,n,a).catch((function(t){return Bt.error(t)}))},setCurrentScreen:function(t,e){(function(t,e,n,o){return i(this,void 0,void 0,(function(){var i;return r(this,(function(r){switch(r.label){case 0:return o&&o.global?(t(Ut.SET,{screen_name:n}),[2,Promise.resolve()]):[3,1];case 1:return[4,e];case 2:i=r.sent(),t(Ut.CONFIG,i,{update:!0,screen_name:n}),r.label=3;case 3:return[2]}}))}))})(ne,ie[o],t,e).catch((function(t){return Bt.error(t)}))},setUserId:function(t,e){(function(t,e,n,o){return i(this,void 0,void 0,(function(){var i;return r(this,(function(r){switch(r.label){case 0:return o&&o.global?(t(Ut.SET,{user_id:n}),[2,Promise.resolve()]):[3,1];case 1:return[4,e];case 2:i=r.sent(),t(Ut.CONFIG,i,{update:!0,user_id:n}),r.label=3;case 3:return[2]}}))}))})(ne,ie[o],t,e).catch((function(t){return Bt.error(t)}))},setUserProperties:function(t,e){(function(t,e,n,o){return i(this,void 0,void 0,(function(){var i,a,s,u,c;return r(this,(function(r){switch(r.label){case 0:if(!o||!o.global)return[3,1];for(i={},a=0,s=Object.keys(n);a<s.length;a++)u=s[a],i["user_properties."+u]=n[u];return t(Ut.SET,i),[2,Promise.resolve()];case 1:return[4,e];case 2:c=r.sent(),t(Ut.CONFIG,c,{update:!0,user_properties:n}),r.label=3;case 3:return[2]}}))}))})(ne,ie[o],t,e).catch((function(t){return Bt.error(t)}))},setAnalyticsCollectionEnabled:function(t){(function(t,e){return i(this,void 0,void 0,(function(){var n;return r(this,(function(i){switch(i.label){case 0:return[4,t];case 1:return n=i.sent(),window["ga-disable-"+n]=!e,[2]}}))}))})(ie[o],t).catch((function(t){return Bt.error(t)}))},INTERNAL:{delete:function(){return delete ie[o],Promise.resolve()}}}}var le="analytics";function fe(){return i(this,void 0,void 0,(function(){return r(this,(function(t){switch(t.label){case 0:if(l())return[2,!1];if(!d())return[2,!1];if(!f())return[2,!1];t.label=1;case 1:return t.trys.push([1,3,,4]),[4,p()];case 2:return[2,t.sent()];case 3:return t.sent(),[2,!1];case 4:return[2]}}))}))}!function(t){t.INTERNAL.registerComponent(new _(le,(function(t){return he(t.getProvider("app").getImmediate(),t.getProvider("installations").getImmediate())}),"PUBLIC").setServiceProps({settings:ce,EventName:qt,isSupported:fe})),t.INTERNAL.registerComponent(new _("analytics-internal",(function(t){try{return{logEvent:t.getProvider(le).getImmediate().logEvent}}catch(t){throw Xt.create("interop-component-reg-failed",{reason:t})}}),"PRIVATE")),t.registerVersion("@firebase/analytics","0.6.2")}(Z),function(){var t,e="function"==typeof Object.defineProperties?Object.defineProperty:function(t,e,n){t!=Array.prototype&&t!=Object.prototype&&(t[e]=n.value)},i=function(t){t=["object"==typeof window&&window,"object"==typeof self&&self,"object"==typeof n.g&&n.g,t];for(var e=0;e<t.length;++e){var i=t[e];if(i&&i.Math==Math)return i}return globalThis}(this);function r(t){var e=0;return function(){return e<t.length?{done:!1,value:t[e++]}:{done:!0}}}function o(t){var e="undefined"!=typeof Symbol&&Symbol.iterator&&t[Symbol.iterator];return e?e.call(t):{next:r(t)}}!function(t,n){if(n){var r=i;t=t.split(".");for(var o=0;o<t.length-1;o++){var a=t[o];a in r||(r[a]={}),r=r[a]}(n=n(o=r[t=t[t.length-1]]))!=o&&null!=n&&e(r,t,{configurable:!0,writable:!0,value:n})}}("Promise",(function(t){function e(t){this.b=0,this.c=void 0,this.a=[];var e=this.f();try{t(e.resolve,e.reject)}catch(t){e.reject(t)}}function n(){this.a=null}function r(t){return t instanceof e?t:new e((function(e){e(t)}))}if(t)return t;n.prototype.b=function(t){if(null==this.a){this.a=[];var e=this;this.c((function(){e.g()}))}this.a.push(t)};var a=i.setTimeout;n.prototype.c=function(t){a(t,0)},n.prototype.g=function(){for(;this.a&&this.a.length;){var t=this.a;this.a=[];for(var e=0;e<t.length;++e){var n=t[e];t[e]=null;try{n()}catch(t){this.f(t)}}}this.a=null},n.prototype.f=function(t){this.c((function(){throw t}))},e.prototype.f=function(){function t(t){return function(i){n||(n=!0,t.call(e,i))}}var e=this,n=!1;return{resolve:t(this.v),reject:t(this.g)}},e.prototype.v=function(t){if(t===this)this.g(new TypeError("A Promise cannot resolve to itself"));else if(t instanceof e)this.o(t);else{t:switch(typeof t){case"object":var n=null!=t;break t;case"function":n=!0;break t;default:n=!1}n?this.m(t):this.h(t)}},e.prototype.m=function(t){var e=void 0;try{e=t.then}catch(t){return void this.g(t)}"function"==typeof e?this.u(e,t):this.h(t)},e.prototype.g=function(t){this.i(2,t)},e.prototype.h=function(t){this.i(1,t)},e.prototype.i=function(t,e){if(0!=this.b)throw Error("Cannot settle("+t+", "+e+"): Promise already settled in state"+this.b);this.b=t,this.c=e,this.l()},e.prototype.l=function(){if(null!=this.a){for(var t=0;t<this.a.length;++t)s.b(this.a[t]);this.a=null}};var s=new n;return e.prototype.o=function(t){var e=this.f();t.Pa(e.resolve,e.reject)},e.prototype.u=function(t,e){var n=this.f();try{t.call(e,n.resolve,n.reject)}catch(t){n.reject(t)}},e.prototype.then=function(t,n){function i(t,e){return"function"==typeof t?function(e){try{r(t(e))}catch(t){o(t)}}:e}var r,o,a=new e((function(t,e){r=t,o=e}));return this.Pa(i(t,r),i(n,o)),a},e.prototype.catch=function(t){return this.then(void 0,t)},e.prototype.Pa=function(t,e){function n(){switch(i.b){case 1:t(i.c);break;case 2:e(i.c);break;default:throw Error("Unexpected state: "+i.b)}}var i=this;null==this.a?s.b(n):this.a.push(n)},e.resolve=r,e.reject=function(t){return new e((function(e,n){n(t)}))},e.race=function(t){return new e((function(e,n){for(var i=o(t),a=i.next();!a.done;a=i.next())r(a.value).Pa(e,n)}))},e.all=function(t){var n=o(t),i=n.next();return i.done?r([]):new e((function(t,e){function o(e){return function(n){a[e]=n,0==--s&&t(a)}}var a=[],s=0;do{a.push(void 0),s++,r(i.value).Pa(o(a.length-1),e),i=n.next()}while(!i.done)}))},e}));var a=a||{},s=this||self,u=/^[\w+/_-]+[=]{0,2}$/,c=null;function h(t){return(t=t.querySelector&&t.querySelector("script[nonce]"))&&(t=t.nonce||t.getAttribute("nonce"))&&u.test(t)?t:""}function l(){}function f(t){var e=typeof t;return"object"!=e?e:t?Array.isArray(t)?"array":e:"null"}function p(t){var e=f(t);return"array"==e||"object"==e&&"number"==typeof t.length}function d(t){return"function"==f(t)}function v(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}function m(t){return Object.prototype.hasOwnProperty.call(t,g)&&t[g]||(t[g]=++b)}var g="closure_uid_"+(1e9*Math.random()>>>0),b=0;function y(t,e,n){return t.call.apply(t.bind,arguments)}function w(t,e,n){if(!t)throw Error();if(2<arguments.length){var i=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,i),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function I(t,e,n){return(I=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?y:w).apply(null,arguments)}function T(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}var E=Date.now;function S(t,e){function n(){}n.prototype=e.prototype,t.$a=e.prototype,t.prototype=new n,t.prototype.constructor=t}function _(t){return t}function A(t,e,n){this.code=O+t,this.message=e||C[t]||"",this.a=n||null}function k(t){var e=t&&t.code;return e?new A(e.substring(O.length),t.message,t.serverResponse):null}S(A,Error),A.prototype.w=function(){var t={code:this.code,message:this.message};return this.a&&(t.serverResponse=this.a),t},A.prototype.toJSON=function(){return this.w()};var N,O="auth/",C={"admin-restricted-operation":"This operation is restricted to administrators only.","argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.","captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.","code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.","requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-change-needs-verification":"Multi-factor users must always have a verified email.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.","internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.","invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.","invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-dynamic-link-domain":"The provided dynamic link domain is not configured or authorized for the current project.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.","invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-multi-factor-session":"The request does not contain a valid proof of first factor successful sign-in.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.","unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].","invalid-provider-id":"The specified provider ID is invalid.","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","invalid-tenant-id":"The Auth instance's tenant ID is invalid.","multi-factor-info-not-found":"The user does not have a second factor matching the identifier provided.","multi-factor-auth-required":"Proof of ownership of a second factor is required to complete sign-in.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.","missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-multi-factor-info":"No second factor identifier is provided.","missing-multi-factor-session":"The request is missing proof of first factor successful sign-in.","missing-or-invalid-nonce":"The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.","missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.","no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","null-user":"A null user object was provided as the argument for an operation which requires a non-null user object.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.","rejected-credential":"The request contains malformed or mismatching credentials.","second-factor-already-in-use":"The second factor is already enrolled on this account.","maximum-second-factor-count-exceeded":"The maximum allowed number of second factors on a user has been exceeded.","tenant-id-mismatch":"The provided tenant ID does not match the Auth instance's tenant ID",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.","too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-first-factor":"Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","unsupported-tenant-operation":"This operation is not supported in a multi-tenant context.","unverified-email":"The operation requires a verified email.","user-cancelled":"The user did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.","web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."},P={kd:{Sa:"https://staging-identitytoolkit.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",Ya:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Va:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"b"},rd:{Sa:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",Ya:"https://securetoken.googleapis.com/v1/token",Va:"https://identitytoolkit.googleapis.com/v2/",id:"p"},td:{Sa:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",Ya:"https://staging-securetoken.sandbox.googleapis.com/v1/token",Va:"https://staging-identitytoolkit.sandbox.googleapis.com/v2/",id:"s"},ud:{Sa:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",Ya:"https://test-securetoken.sandbox.googleapis.com/v1/token",Va:"https://test-identitytoolkit.sandbox.googleapis.com/v2/",id:"t"}};function D(t){for(var e in P)if(P[e].id===t)return{firebaseEndpoint:(t=P[e]).Sa,secureTokenEndpoint:t.Ya,identityPlatformEndpoint:t.Va};return null}function R(t){if(!t)return!1;try{return!!t.$goog_Thenable}catch(t){return!1}}function L(t){if(Error.captureStackTrace)Error.captureStackTrace(this,L);else{var e=Error().stack;e&&(this.stack=e)}t&&(this.message=String(t))}function x(t,e){for(var n="",i=(t=t.split("%s")).length-1,r=0;r<i;r++)n+=t[r]+(r<e.length?e[r]:"%s");L.call(this,n+t[i])}function M(t,e){throw new x("Failure"+(t?": "+t:""),Array.prototype.slice.call(arguments,1))}function j(t,e){this.c=t,this.f=e,this.b=0,this.a=null}function F(t,e){t.f(e),100>t.b&&(t.b++,e.next=t.a,t.a=e)}function V(){this.b=this.a=null}N=D("__EID__")?"__EID__":void 0,S(L,Error),L.prototype.name="CustomError",S(x,L),x.prototype.name="AssertionError",j.prototype.get=function(){if(0<this.b){this.b--;var t=this.a;this.a=t.next,t.next=null}else t=this.c();return t};var U=new j((function(){return new H}),(function(t){t.reset()}));function q(){var t=we,e=null;return t.a&&(e=t.a,t.a=t.a.next,t.a||(t.b=null),e.next=null),e}function H(){this.next=this.b=this.a=null}V.prototype.add=function(t,e){var n=U.get();n.set(t,e),this.b?this.b.next=n:this.a=n,this.b=n},H.prototype.set=function(t,e){this.a=t,this.b=e,this.next=null},H.prototype.reset=function(){this.next=this.b=this.a=null};var K=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if("string"==typeof t)return"string"!=typeof e||1!=e.length?-1:t.indexOf(e,0);for(var n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},B=Array.prototype.forEach?function(t,e,n){Array.prototype.forEach.call(t,e,n)}:function(t,e,n){for(var i=t.length,r="string"==typeof t?t.split(""):t,o=0;o<i;o++)o in r&&e.call(n,r[o],o,t)},G=Array.prototype.filter?function(t,e){return Array.prototype.filter.call(t,e,void 0)}:function(t,e){for(var n=t.length,i=[],r=0,o="string"==typeof t?t.split(""):t,a=0;a<n;a++)if(a in o){var s=o[a];e.call(void 0,s,a,t)&&(i[r++]=s)}return i},W=Array.prototype.map?function(t,e){return Array.prototype.map.call(t,e,void 0)}:function(t,e){for(var n=t.length,i=Array(n),r="string"==typeof t?t.split(""):t,o=0;o<n;o++)o in r&&(i[o]=e.call(void 0,r[o],o,t));return i},z=Array.prototype.some?function(t,e){return Array.prototype.some.call(t,e,void 0)}:function(t,e){for(var n=t.length,i="string"==typeof t?t.split(""):t,r=0;r<n;r++)if(r in i&&e.call(void 0,i[r],r,t))return!0;return!1};function X(t,e){return 0<=K(t,e)}function J(t,e){var n;return(n=0<=(e=K(t,e)))&&Array.prototype.splice.call(t,e,1),n}function Y(t,e){!function(t,e){for(var n="string"==typeof t?t.split(""):t,i=t.length-1;0<=i;--i)i in n&&e.call(void 0,n[i],i,t)}(t,(function(n,i){e.call(void 0,n,i,t)&&Array.prototype.splice.call(t,i,1).length}))}function $(t){return Array.prototype.concat.apply([],arguments)}function Q(t){var e=t.length;if(0<e){for(var n=Array(e),i=0;i<e;i++)n[i]=t[i];return n}return[]}var tt,et=String.prototype.trim?function(t){return t.trim()}:function(t){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(t)[1]},nt=/&/g,it=/</g,rt=/>/g,ot=/"/g,at=/'/g,st=/\x00/g,ut=/[\x00&<>"']/;function ct(t,e){return-1!=t.indexOf(e)}function ht(t,e){return t<e?-1:t>e?1:0}t:{var lt=s.navigator;if(lt){var ft=lt.userAgent;if(ft){tt=ft;break t}}tt=""}function pt(t){return ct(tt,t)}function dt(t,e){for(var n in t)e.call(void 0,t[n],n,t)}function vt(t){for(var e in t)return!1;return!0}function mt(t){var e,n={};for(e in t)n[e]=t[e];return n}var gt="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function bt(t,e){for(var n,i,r=1;r<arguments.length;r++){for(n in i=arguments[r])t[n]=i[n];for(var o=0;o<gt.length;o++)n=gt[o],Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}}function yt(t,e){t:{try{var n=t&&t.ownerDocument,i=n&&(n.defaultView||n.parentWindow);if((i=i||s).Element&&i.Location){var r=i;break t}}catch(t){}r=null}if(r&&void 0!==r[e]&&(!t||!(t instanceof r[e])&&(t instanceof r.Location||t instanceof r.Element))){if(v(t))try{var o=t.constructor.displayName||t.constructor.name||Object.prototype.toString.call(t)}catch(t){o="<object could not be stringified>"}else o=void 0===t?"undefined":null===t?"null":typeof t;M("Argument is not a %s (or a non-Element, non-Location mock); got: %s",e,o)}}function wt(t,e){this.a=t===St&&e||"",this.b=Et}function It(t){return t instanceof wt&&t.constructor===wt&&t.b===Et?t.a:(M("expected object of type Const, got '"+t+"'"),"type_error:Const")}wt.prototype.sa=!0,wt.prototype.ra=function(){return this.a},wt.prototype.toString=function(){return"Const{"+this.a+"}"};var Tt,Et={},St={};function _t(){if(void 0===Tt){var t=null,e=s.trustedTypes;if(e&&e.createPolicy){try{t=e.createPolicy("goog#html",{createHTML:_,createScript:_,createScriptURL:_})}catch(t){s.console&&s.console.error(t.message)}Tt=t}else Tt=t}return Tt}function At(t,e){this.a=e===Pt?t:""}function kt(t){return t instanceof At&&t.constructor===At?t.a:(M("expected object of type TrustedResourceUrl, got '"+t+"' of type "+f(t)),"type_error:TrustedResourceUrl")}function Nt(t,e){var n=It(t);if(!Ct.test(n))throw Error("Invalid TrustedResourceUrl format: "+n);return function(t){var e=_t();return new At(t=e?e.createScriptURL(t):t,Pt)}(t=n.replace(Ot,(function(t,i){if(!Object.prototype.hasOwnProperty.call(e,i))throw Error('Found marker, "'+i+'", in format string, "'+n+'", but no valid label mapping found in args: '+JSON.stringify(e));return(t=e[i])instanceof wt?It(t):encodeURIComponent(String(t))})))}At.prototype.sa=!0,At.prototype.ra=function(){return this.a.toString()},At.prototype.toString=function(){return"TrustedResourceUrl{"+this.a+"}"};var Ot=/%{(\w+)}/g,Ct=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i,Pt={};function Dt(t,e){this.a=e===Vt?t:""}function Rt(t){return t instanceof Dt&&t.constructor===Dt?t.a:(M("expected object of type SafeUrl, got '"+t+"' of type "+f(t)),"type_error:SafeUrl")}Dt.prototype.sa=!0,Dt.prototype.ra=function(){return this.a.toString()},Dt.prototype.toString=function(){return"SafeUrl{"+this.a+"}"};var Lt=/^(?:audio\/(?:3gpp2|3gpp|aac|L16|midi|mp3|mp4|mpeg|oga|ogg|opus|x-m4a|x-matroska|x-wav|wav|webm)|font\/\w+|image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp|x-icon)|text\/csv|video\/(?:mpeg|mp4|ogg|webm|quicktime|x-matroska))(?:;\w+=(?:\w+|"[\w;,= ]+"))*$/i,xt=/^data:(.*);base64,[a-z0-9+\/]+=*$/i,Mt=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;function jt(t){if(t instanceof Dt)return t;if(t="object"==typeof t&&t.sa?t.ra():String(t),Mt.test(t))t=new Dt(t,Vt);else{var e=(t=(t=String(t)).replace(/(%0A|%0D)/g,"")).match(xt);t=e&&Lt.test(e[1])?new Dt(t,Vt):null}return t}function Ft(t){return t instanceof Dt?t:(t="object"==typeof t&&t.sa?t.ra():String(t),Mt.test(t)||(t="about:invalid#zClosurez"),new Dt(t,Vt))}var Vt={},Ut=new Dt("about:invalid#zClosurez",Vt);function qt(t,e,n){this.a=n===Ht?t:""}qt.prototype.sa=!0,qt.prototype.ra=function(){return this.a.toString()},qt.prototype.toString=function(){return"SafeHtml{"+this.a+"}"};var Ht={};function Kt(t,e,n,i){return t=t instanceof Dt?t:Ft(t),e=e||s,n=n instanceof wt?It(n):n||"",e.open(Rt(t),n,i,void 0)}function Bt(t,e){for(var n=t.split("%s"),i="",r=Array.prototype.slice.call(arguments,1);r.length&&1<n.length;)i+=n.shift()+r.shift();return i+n.join("%s")}function Gt(t){return ut.test(t)&&(-1!=t.indexOf("&")&&(t=t.replace(nt,"&amp;")),-1!=t.indexOf("<")&&(t=t.replace(it,"&lt;")),-1!=t.indexOf(">")&&(t=t.replace(rt,"&gt;")),-1!=t.indexOf('"')&&(t=t.replace(ot,"&quot;")),-1!=t.indexOf("'")&&(t=t.replace(at,"&#39;")),-1!=t.indexOf("\0")&&(t=t.replace(st,"&#0;"))),t}function Wt(t){return Wt[" "](t),t}Wt[" "]=l;var zt,Xt,Jt=pt("Opera"),Yt=pt("Trident")||pt("MSIE"),$t=pt("Edge"),Zt=$t||Yt,Qt=pt("Gecko")&&!(ct(tt.toLowerCase(),"webkit")&&!pt("Edge"))&&!(pt("Trident")||pt("MSIE"))&&!pt("Edge"),te=ct(tt.toLowerCase(),"webkit")&&!pt("Edge");function ee(){var t=s.document;return t?t.documentMode:void 0}t:{var ne="",ie=(Xt=tt,Qt?/rv:([^\);]+)(\)|;)/.exec(Xt):$t?/Edge\/([\d\.]+)/.exec(Xt):Yt?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(Xt):te?/WebKit\/(\S+)/.exec(Xt):Jt?/(?:Version)[ \/]?(\S+)/.exec(Xt):void 0);if(ie&&(ne=ie?ie[1]:""),Yt){var re=ee();if(null!=re&&re>parseFloat(ne)){zt=String(re);break t}}zt=ne}var oe,ae={};function se(t){return function(t,e){var n=ae;return Object.prototype.hasOwnProperty.call(n,t)?n[t]:n[t]=e()}(t,(function(){for(var e=0,n=et(String(zt)).split("."),i=et(String(t)).split("."),r=Math.max(n.length,i.length),o=0;0==e&&o<r;o++){var a=n[o]||"",s=i[o]||"";do{if(a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],0==a[0].length&&0==s[0].length)break;e=ht(0==a[1].length?0:parseInt(a[1],10),0==s[1].length?0:parseInt(s[1],10))||ht(0==a[2].length,0==s[2].length)||ht(a[2],s[2]),a=a[3],s=s[3]}while(0==e)}return 0<=e}))}s.document&&Yt?oe=ee()||parseInt(zt,10)||void 0:oe=void 0;var ue=oe;try{new self.OffscreenCanvas(0,0).getContext("2d")}catch(Xt){}var ce=!Yt||9<=Number(ue);function he(t){var e=document;return"string"==typeof t?e.getElementById(t):t}function le(t,e){dt(e,(function(e,n){e&&"object"==typeof e&&e.sa&&(e=e.ra()),"style"==n?t.style.cssText=e:"class"==n?t.className=e:"for"==n?t.htmlFor=e:de.hasOwnProperty(n)?t.setAttribute(de[n],e):0==n.lastIndexOf("aria-",0)||0==n.lastIndexOf("data-",0)?t.setAttribute(n,e):t[n]=e}))}var fe,pe,de={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};function ve(t,e,n){function i(n){n&&e.appendChild("string"==typeof n?t.createTextNode(n):n)}for(var r=2;r<n.length;r++){var o=n[r];if(!p(o)||v(o)&&0<o.nodeType)i(o);else{t:{if(o&&"number"==typeof o.length){if(v(o)){var a="function"==typeof o.item||"string"==typeof o.item;break t}if(d(o)){a="function"==typeof o.item;break t}}a=!1}B(a?Q(o):o,i)}}}function me(t,e){return e=String(e),"application/xhtml+xml"===t.contentType&&(e=e.toLowerCase()),t.createElement(e)}function ge(t){s.setTimeout((function(){throw t}),0)}function be(t,e){pe||function(){if(s.Promise&&s.Promise.resolve){var t=s.Promise.resolve(void 0);pe=function(){t.then(Ie)}}else pe=function(){var t=Ie;!d(s.setImmediate)||s.Window&&s.Window.prototype&&!pt("Edge")&&s.Window.prototype.setImmediate==s.setImmediate?(fe||(fe=function(){var t=s.MessageChannel;if(void 0===t&&"undefined"!=typeof window&&window.postMessage&&window.addEventListener&&!pt("Presto")&&(t=function(){var t=me(document,"IFRAME");t.style.display="none",document.documentElement.appendChild(t);var e=t.contentWindow;(t=e.document).open(),t.close();var n="callImmediate"+Math.random(),i="file:"==e.location.protocol?"*":e.location.protocol+"//"+e.location.host;t=I((function(t){"*"!=i&&t.origin!=i||t.data!=n||this.port1.onmessage()}),this),e.addEventListener("message",t,!1),this.port1={},this.port2={postMessage:function(){e.postMessage(n,i)}}}),void 0!==t&&!pt("Trident")&&!pt("MSIE")){var e=new t,n={},i=n;return e.port1.onmessage=function(){if(void 0!==n.next){var t=(n=n.next).Fb;n.Fb=null,t()}},function(t){i.next={Fb:t},i=i.next,e.port2.postMessage(0)}}return function(t){s.setTimeout(t,0)}}()),fe(t)):s.setImmediate(t)}}(),ye||(pe(),ye=!0),we.add(t,e)}var ye=!1,we=new V;function Ie(){for(var t;t=q();){try{t.a.call(t.b)}catch(t){ge(t)}F(U,t)}ye=!1}function Te(t,e){if(this.a=Ee,this.i=void 0,this.f=this.b=this.c=null,this.g=this.h=!1,t!=l)try{var n=this;t.call(e,(function(t){Me(n,Se,t)}),(function(t){if(!(t instanceof Ke))try{if(t instanceof Error)throw t;throw Error("Promise rejected.")}catch(t){}Me(n,_e,t)}))}catch(t){Me(this,_e,t)}}var Ee=0,Se=2,_e=3;function Ae(){this.next=this.f=this.b=this.g=this.a=null,this.c=!1}Ae.prototype.reset=function(){this.f=this.b=this.g=this.a=null,this.c=!1};var ke=new j((function(){return new Ae}),(function(t){t.reset()}));function Ne(t,e,n){var i=ke.get();return i.g=t,i.b=e,i.f=n,i}function Oe(t){if(t instanceof Te)return t;var e=new Te(l);return Me(e,Se,t),e}function Ce(t){return new Te((function(e,n){n(t)}))}function Pe(t,e,n){je(t,e,n,null)||be(T(e,t))}function De(t){return new Te((function(e){var n=t.length,i=[];if(n)for(var r=function(t,r,o){n--,i[t]=r?{Ob:!0,value:o}:{Ob:!1,reason:o},0==n&&e(i)},o=0;o<t.length;o++)Pe(t[o],T(r,o,!0),T(r,o,!1));else e(i)}))}function Re(t,e){if(t.a==Ee)if(t.c){var n=t.c;if(n.b){for(var i=0,r=null,o=null,a=n.b;a&&(a.c||(i++,a.a==t&&(r=a),!(r&&1<i)));a=a.next)r||(o=a);r&&(n.a==Ee&&1==i?Re(n,e):(o?((i=o).next==n.f&&(n.f=i),i.next=i.next.next):Ve(n),Ue(n,r,_e,e)))}t.c=null}else Me(t,_e,e)}function Le(t,e){t.b||t.a!=Se&&t.a!=_e||Fe(t),t.f?t.f.next=e:t.b=e,t.f=e}function xe(t,e,n,i){var r=Ne(null,null,null);return r.a=new Te((function(t,o){r.g=e?function(n){try{var r=e.call(i,n);t(r)}catch(t){o(t)}}:t,r.b=n?function(e){try{var r=n.call(i,e);void 0===r&&e instanceof Ke?o(e):t(r)}catch(t){o(t)}}:o})),r.a.c=t,Le(t,r),r.a}function Me(t,e,n){t.a==Ee&&(t===n&&(e=_e,n=new TypeError("Promise cannot resolve to itself")),t.a=1,je(n,t.Zc,t.$c,t)||(t.i=n,t.a=e,t.c=null,Fe(t),e!=_e||n instanceof Ke||function(t,e){t.g=!0,be((function(){t.g&&He.call(null,e)}))}(t,n)))}function je(t,e,n,i){if(t instanceof Te)return Le(t,Ne(e||l,n||null,i)),!0;if(R(t))return t.then(e,n,i),!0;if(v(t))try{var r=t.then;if(d(r))return function(t,e,n,i,r){function o(t){a||(a=!0,i.call(r,t))}var a=!1;try{e.call(t,(function(t){a||(a=!0,n.call(r,t))}),o)}catch(t){o(t)}}(t,r,e,n,i),!0}catch(t){return n.call(i,t),!0}return!1}function Fe(t){t.h||(t.h=!0,be(t.fc,t))}function Ve(t){var e=null;return t.b&&(e=t.b,t.b=e.next,e.next=null),t.b||(t.f=null),e}function Ue(t,e,n,i){if(n==_e&&e.b&&!e.c)for(;t&&t.g;t=t.c)t.g=!1;if(e.a)e.a.c=null,qe(e,n,i);else try{e.c?e.g.call(e.f):qe(e,n,i)}catch(t){He.call(null,t)}F(ke,e)}function qe(t,e,n){e==Se?t.g.call(t.f,n):t.b&&t.b.call(t.f,n)}Te.prototype.then=function(t,e,n){return xe(this,d(t)?t:null,d(e)?e:null,n)},Te.prototype.$goog_Thenable=!0,(t=Te.prototype).na=function(t,e){return(t=Ne(t,t,e)).c=!0,Le(this,t),this},t.s=function(t,e){return xe(this,null,t,e)},t.cancel=function(t){if(this.a==Ee){var e=new Ke(t);be((function(){Re(this,e)}),this)}},t.Zc=function(t){this.a=Ee,Me(this,Se,t)},t.$c=function(t){this.a=Ee,Me(this,_e,t)},t.fc=function(){for(var t;t=Ve(this);)Ue(this,t,this.a,this.i);this.h=!1};var He=ge;function Ke(t){L.call(this,t)}function Be(){0!=Ge&&(We[m(this)]=this),this.xa=this.xa,this.oa=this.oa}S(Ke,L),Ke.prototype.name="cancel";var Ge=0,We={};function ze(t){if(!t.xa&&(t.xa=!0,t.Da(),0!=Ge)){var e=m(t);if(0!=Ge&&t.oa&&0<t.oa.length)throw Error(t+" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");delete We[e]}}Be.prototype.xa=!1,Be.prototype.Da=function(){if(this.oa)for(;this.oa.length;)this.oa.shift()()};var Xe=Object.freeze||function(t){return t},Je=!Yt||9<=Number(ue),Ye=Yt&&!se("9"),$e=function(){if(!s.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});try{s.addEventListener("test",l,e),s.removeEventListener("test",l,e)}catch(t){}return t}();function Ze(t,e){this.type=t,this.b=this.target=e,this.defaultPrevented=!1}function Qe(t,e){if(Ze.call(this,t?t.type:""),this.relatedTarget=this.b=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.pointerId=0,this.pointerType="",this.a=null,t){var n=this.type=t.type,i=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.b=e,e=t.relatedTarget){if(Qt){t:{try{Wt(e.nodeName);var r=!0;break t}catch(t){}r=!1}r||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,i?(this.clientX=void 0!==i.clientX?i.clientX:i.pageX,this.clientY=void 0!==i.clientY?i.clientY:i.pageY,this.screenX=i.screenX||0,this.screenY=i.screenY||0):(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType="string"==typeof t.pointerType?t.pointerType:tn[t.pointerType]||"",this.a=t,t.defaultPrevented&&this.preventDefault()}}Ze.prototype.preventDefault=function(){this.defaultPrevented=!0},S(Qe,Ze);var tn=Xe({2:"touch",3:"pen",4:"mouse"});Qe.prototype.preventDefault=function(){Qe.$a.preventDefault.call(this);var t=this.a;if(t.preventDefault)t.preventDefault();else if(t.returnValue=!1,Ye)try{(t.ctrlKey||112<=t.keyCode&&123>=t.keyCode)&&(t.keyCode=-1)}catch(t){}},Qe.prototype.g=function(){return this.a};var en="closure_listenable_"+(1e6*Math.random()|0),nn=0;function rn(t,e,n,i,r){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!i,this.Ua=r,this.key=++nn,this.va=this.Oa=!1}function on(t){t.va=!0,t.listener=null,t.proxy=null,t.src=null,t.Ua=null}function an(t){this.src=t,this.a={},this.b=0}function sn(t,e){var n=e.type;n in t.a&&J(t.a[n],e)&&(on(e),0==t.a[n].length&&(delete t.a[n],t.b--))}function un(t,e,n,i){for(var r=0;r<t.length;++r){var o=t[r];if(!o.va&&o.listener==e&&o.capture==!!n&&o.Ua==i)return r}return-1}an.prototype.add=function(t,e,n,i,r){var o=t.toString();(t=this.a[o])||(t=this.a[o]=[],this.b++);var a=un(t,e,i,r);return-1<a?(e=t[a],n||(e.Oa=!1)):((e=new rn(e,this.src,o,!!i,r)).Oa=n,t.push(e)),e};var cn="closure_lm_"+(1e6*Math.random()|0),hn={};function ln(t,e,n,i,r){if(i&&i.once)pn(t,e,n,i,r);else if(Array.isArray(e))for(var o=0;o<e.length;o++)ln(t,e[o],n,i,r);else n=Tn(n),t&&t[en]?Sn(t,e,n,v(i)?!!i.capture:!!i,r):fn(t,e,n,!1,i,r)}function fn(t,e,n,i,r,o){if(!e)throw Error("Invalid event type");var a=v(r)?!!r.capture:!!r,s=wn(t);if(s||(t[cn]=s=new an(t)),!(n=s.add(e,n,i,a,o)).proxy)if(i=function(){var t=yn,e=Je?function(n){return t.call(e.src,e.listener,n)}:function(n){if(!(n=t.call(e.src,e.listener,n)))return n};return e}(),n.proxy=i,i.src=t,i.listener=n,t.addEventListener)$e||(r=a),void 0===r&&(r=!1),t.addEventListener(e.toString(),i,r);else if(t.attachEvent)t.attachEvent(mn(e.toString()),i);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(i)}}function pn(t,e,n,i,r){if(Array.isArray(e))for(var o=0;o<e.length;o++)pn(t,e[o],n,i,r);else n=Tn(n),t&&t[en]?_n(t,e,n,v(i)?!!i.capture:!!i,r):fn(t,e,n,!0,i,r)}function dn(t,e,n,i,r){if(Array.isArray(e))for(var o=0;o<e.length;o++)dn(t,e[o],n,i,r);else i=v(i)?!!i.capture:!!i,n=Tn(n),t&&t[en]?(t=t.v,(e=String(e).toString())in t.a&&-1<(n=un(o=t.a[e],n,i,r))&&(on(o[n]),Array.prototype.splice.call(o,n,1),0==o.length&&(delete t.a[e],t.b--))):t&&(t=wn(t))&&(e=t.a[e.toString()],t=-1,e&&(t=un(e,n,i,r)),(n=-1<t?e[t]:null)&&vn(n))}function vn(t){if("number"!=typeof t&&t&&!t.va){var e=t.src;if(e&&e[en])sn(e.v,t);else{var n=t.type,i=t.proxy;e.removeEventListener?e.removeEventListener(n,i,t.capture):e.detachEvent?e.detachEvent(mn(n),i):e.addListener&&e.removeListener&&e.removeListener(i),(n=wn(e))?(sn(n,t),0==n.b&&(n.src=null,e[cn]=null)):on(t)}}}function mn(t){return t in hn?hn[t]:hn[t]="on"+t}function gn(t,e,n,i){var r=!0;if((t=wn(t))&&(e=t.a[e.toString()]))for(e=e.concat(),t=0;t<e.length;t++){var o=e[t];o&&o.capture==n&&!o.va&&(o=bn(o,i),r=r&&!1!==o)}return r}function bn(t,e){var n=t.listener,i=t.Ua||t.src;return t.Oa&&vn(t),n.call(i,e)}function yn(t,e){if(t.va)return!0;if(!Je){if(!e)t:{e=["window","event"];for(var n=s,i=0;i<e.length;i++)if(null==(n=n[e[i]])){e=null;break t}e=n}if(e=new Qe(i=e,this),n=!0,!(0>i.keyCode||null!=i.returnValue)){t:{var r=!1;if(0==i.keyCode)try{i.keyCode=-1;break t}catch(t){r=!0}(r||null==i.returnValue)&&(i.returnValue=!0)}for(i=[],r=e.b;r;r=r.parentNode)i.push(r);for(t=t.type,r=i.length-1;0<=r;r--){e.b=i[r];var o=gn(i[r],t,!0,e);n=n&&o}for(r=0;r<i.length;r++)e.b=i[r],o=gn(i[r],t,!1,e),n=n&&o}return n}return bn(t,new Qe(e,this))}function wn(t){return(t=t[cn])instanceof an?t:null}var In="__closure_events_fn_"+(1e9*Math.random()>>>0);function Tn(t){return d(t)?t:(t[In]||(t[In]=function(e){return t.handleEvent(e)}),t[In])}function En(){Be.call(this),this.v=new an(this),this.$b=this,this.fb=null}function Sn(t,e,n,i,r){t.v.add(String(e),n,!1,i,r)}function _n(t,e,n,i,r){t.v.add(String(e),n,!0,i,r)}function An(t,e,n,i){if(!(e=t.v.a[String(e)]))return!0;e=e.concat();for(var r=!0,o=0;o<e.length;++o){var a=e[o];if(a&&!a.va&&a.capture==n){var s=a.listener,u=a.Ua||a.src;a.Oa&&sn(t.v,a),r=!1!==s.call(u,i)&&r}}return r&&!i.defaultPrevented}function kn(t,e,n){if(d(t))n&&(t=I(t,n));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=I(t.handleEvent,t)}return 2147483647<Number(e)?-1:s.setTimeout(t,e||0)}function Nn(t){var e=null;return new Te((function(n,i){-1==(e=kn((function(){n(void 0)}),t))&&i(Error("Failed to schedule timer."))})).s((function(t){throw s.clearTimeout(e),t}))}function On(t){if(t.V&&"function"==typeof t.V)return t.V();if("string"==typeof t)return t.split("");if(p(t)){for(var e=[],n=t.length,i=0;i<n;i++)e.push(t[i]);return e}for(i in e=[],n=0,t)e[n++]=t[i];return e}function Cn(t){if(t.Y&&"function"==typeof t.Y)return t.Y();if(!t.V||"function"!=typeof t.V){if(p(t)||"string"==typeof t){var e=[];t=t.length;for(var n=0;n<t;n++)e.push(n);return e}for(var i in e=[],n=0,t)e[n++]=i;return e}}function Pn(t,e){this.b={},this.a=[],this.c=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var i=0;i<n;i+=2)this.set(arguments[i],arguments[i+1])}else if(t)if(t instanceof Pn)for(n=t.Y(),i=0;i<n.length;i++)this.set(n[i],t.get(n[i]));else for(i in t)this.set(i,t[i])}function Dn(t){if(t.c!=t.a.length){for(var e=0,n=0;e<t.a.length;){var i=t.a[e];Rn(t.b,i)&&(t.a[n++]=i),e++}t.a.length=n}if(t.c!=t.a.length){var r={};for(n=e=0;e<t.a.length;)Rn(r,i=t.a[e])||(t.a[n++]=i,r[i]=1),e++;t.a.length=n}}function Rn(t,e){return Object.prototype.hasOwnProperty.call(t,e)}S(En,Be),En.prototype[en]=!0,En.prototype.addEventListener=function(t,e,n,i){ln(this,t,e,n,i)},En.prototype.removeEventListener=function(t,e,n,i){dn(this,t,e,n,i)},En.prototype.dispatchEvent=function(t){var e,n=this.fb;if(n)for(e=[];n;n=n.fb)e.push(n);n=this.$b;var i=t.type||t;if("string"==typeof t)t=new Ze(t,n);else if(t instanceof Ze)t.target=t.target||n;else{var r=t;bt(t=new Ze(i,n),r)}if(r=!0,e)for(var o=e.length-1;0<=o;o--){var a=t.b=e[o];r=An(a,i,!0,t)&&r}if(r=An(a=t.b=n,i,!0,t)&&r,r=An(a,i,!1,t)&&r,e)for(o=0;o<e.length;o++)r=An(a=t.b=e[o],i,!1,t)&&r;return r},En.prototype.Da=function(){if(En.$a.Da.call(this),this.v){var t,e=this.v;for(t in e.a){for(var n=e.a[t],i=0;i<n.length;i++)on(n[i]);delete e.a[t],e.b--}}this.fb=null},(t=Pn.prototype).V=function(){Dn(this);for(var t=[],e=0;e<this.a.length;e++)t.push(this.b[this.a[e]]);return t},t.Y=function(){return Dn(this),this.a.concat()},t.clear=function(){this.b={},this.c=this.a.length=0},t.get=function(t,e){return Rn(this.b,t)?this.b[t]:e},t.set=function(t,e){Rn(this.b,t)||(this.c++,this.a.push(t)),this.b[t]=e},t.forEach=function(t,e){for(var n=this.Y(),i=0;i<n.length;i++){var r=n[i],o=this.get(r);t.call(e,o,r,this)}};var Ln=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function xn(t,e){var n;this.a=this.l=this.f="",this.g=null,this.h=this.c="",this.i=!1,t instanceof xn?(this.i=void 0!==e?e:t.i,Mn(this,t.f),this.l=t.l,this.a=t.a,jn(this,t.g),this.c=t.c,Fn(this,ii(t.b)),this.h=t.h):t&&(n=String(t).match(Ln))?(this.i=!!e,Mn(this,n[1]||"",!0),this.l=Kn(n[2]||""),this.a=Kn(n[3]||"",!0),jn(this,n[4]),this.c=Kn(n[5]||"",!0),Fn(this,n[6]||"",!0),this.h=Kn(n[7]||"")):(this.i=!!e,this.b=new $n(null,this.i))}function Mn(t,e,n){t.f=n?Kn(e,!0):e,t.f&&(t.f=t.f.replace(/:$/,""))}function jn(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.g=e}else t.g=null}function Fn(t,e,n){e instanceof $n?(t.b=e,function(t,e){e&&!t.f&&(Zn(t),t.c=null,t.a.forEach((function(t,e){var n=e.toLowerCase();e!=n&&(ti(this,e),ni(this,n,t))}),t)),t.f=e}(t.b,t.i)):(n||(e=Bn(e,Jn)),t.b=new $n(e,t.i))}function Vn(t,e,n){t.b.set(e,n)}function Un(t,e){return t.b.get(e)}function qn(t){return t instanceof xn?new xn(t):new xn(t,void 0)}function Hn(t,e,n,i){var r=new xn(null,void 0);return t&&Mn(r,t),e&&(r.a=e),n&&jn(r,n),i&&(r.c=i),r}function Kn(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function Bn(t,e,n){return"string"==typeof t?(t=encodeURI(t).replace(e,Gn),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function Gn(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}xn.prototype.toString=function(){var t=[],e=this.f;e&&t.push(Bn(e,Wn,!0),":");var n=this.a;return(n||"file"==e)&&(t.push("//"),(e=this.l)&&t.push(Bn(e,Wn,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.g)&&t.push(":",String(n))),(n=this.c)&&(this.a&&"/"!=n.charAt(0)&&t.push("/"),t.push(Bn(n,"/"==n.charAt(0)?Xn:zn,!0))),(n=this.b.toString())&&t.push("?",n),(n=this.h)&&t.push("#",Bn(n,Yn)),t.join("")},xn.prototype.resolve=function(t){var e=new xn(this),n=!!t.f;n?Mn(e,t.f):n=!!t.l,n?e.l=t.l:n=!!t.a,n?e.a=t.a:n=null!=t.g;var i=t.c;if(n)jn(e,t.g);else if(n=!!t.c){if("/"!=i.charAt(0))if(this.a&&!this.c)i="/"+i;else{var r=e.c.lastIndexOf("/");-1!=r&&(i=e.c.substr(0,r+1)+i)}if(".."==(r=i)||"."==r)i="";else if(ct(r,"./")||ct(r,"/.")){i=0==r.lastIndexOf("/",0),r=r.split("/");for(var o=[],a=0;a<r.length;){var s=r[a++];"."==s?i&&a==r.length&&o.push(""):".."==s?((1<o.length||1==o.length&&""!=o[0])&&o.pop(),i&&a==r.length&&o.push("")):(o.push(s),i=!0)}i=o.join("/")}else i=r}return n?e.c=i:n=""!==t.b.toString(),n?Fn(e,ii(t.b)):n=!!t.h,n&&(e.h=t.h),e};var Wn=/[#\/\?@]/g,zn=/[#\?:]/g,Xn=/[#\?]/g,Jn=/[#\?@]/g,Yn=/#/g;function $n(t,e){this.b=this.a=null,this.c=t||null,this.f=!!e}function Zn(t){t.a||(t.a=new Pn,t.b=0,t.c&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var i=t[n].indexOf("="),r=null;if(0<=i){var o=t[n].substring(0,i);r=t[n].substring(i+1)}else o=t[n];e(o,r?decodeURIComponent(r.replace(/\+/g," ")):"")}}}(t.c,(function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)})))}function Qn(t){var e=Cn(t);if(void 0===e)throw Error("Keys are undefined");var n=new $n(null,void 0);t=On(t);for(var i=0;i<e.length;i++){var r=e[i],o=t[i];Array.isArray(o)?ni(n,r,o):n.add(r,o)}return n}function ti(t,e){Zn(t),e=ri(t,e),Rn(t.a.b,e)&&(t.c=null,t.b-=t.a.get(e).length,Rn((t=t.a).b,e)&&(delete t.b[e],t.c--,t.a.length>2*t.c&&Dn(t)))}function ei(t,e){return Zn(t),e=ri(t,e),Rn(t.a.b,e)}function ni(t,e,n){ti(t,e),0<n.length&&(t.c=null,t.a.set(ri(t,e),Q(n)),t.b+=n.length)}function ii(t){var e=new $n;return e.c=t.c,t.a&&(e.a=new Pn(t.a),e.b=t.b),e}function ri(t,e){return e=String(e),t.f&&(e=e.toLowerCase()),e}function oi(t){var e=[];return si(new ai,t,e),e.join("")}function ai(){}function si(t,e,n){if(null==e)n.push("null");else{if("object"==typeof e){if(Array.isArray(e)){var i=e;e=i.length,n.push("[");for(var r="",o=0;o<e;o++)n.push(r),si(t,i[o],n),r=",";return void n.push("]")}if(!(e instanceof String||e instanceof Number||e instanceof Boolean)){for(i in n.push("{"),r="",e)Object.prototype.hasOwnProperty.call(e,i)&&"function"!=typeof(o=e[i])&&(n.push(r),hi(i,n),n.push(":"),si(t,o,n),r=",");return void n.push("}")}e=e.valueOf()}switch(typeof e){case"string":hi(e,n);break;case"number":n.push(isFinite(e)&&!isNaN(e)?String(e):"null");break;case"boolean":n.push(String(e));break;case"function":n.push("null");break;default:throw Error("Unknown type: "+typeof e)}}}(t=$n.prototype).add=function(t,e){Zn(this),this.c=null,t=ri(this,t);var n=this.a.get(t);return n||this.a.set(t,n=[]),n.push(e),this.b+=1,this},t.clear=function(){this.a=this.c=null,this.b=0},t.forEach=function(t,e){Zn(this),this.a.forEach((function(n,i){B(n,(function(n){t.call(e,n,i,this)}),this)}),this)},t.Y=function(){Zn(this);for(var t=this.a.V(),e=this.a.Y(),n=[],i=0;i<e.length;i++)for(var r=t[i],o=0;o<r.length;o++)n.push(e[i]);return n},t.V=function(t){Zn(this);var e=[];if("string"==typeof t)ei(this,t)&&(e=$(e,this.a.get(ri(this,t))));else{t=this.a.V();for(var n=0;n<t.length;n++)e=$(e,t[n])}return e},t.set=function(t,e){return Zn(this),this.c=null,ei(this,t=ri(this,t))&&(this.b-=this.a.get(t).length),this.a.set(t,[e]),this.b+=1,this},t.get=function(t,e){return t&&0<(t=this.V(t)).length?String(t[0]):e},t.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var t=[],e=this.a.Y(),n=0;n<e.length;n++){var i=e[n],r=encodeURIComponent(String(i));i=this.V(i);for(var o=0;o<i.length;o++){var a=r;""!==i[o]&&(a+="="+encodeURIComponent(String(i[o]))),t.push(a)}}return this.c=t.join("&")};var ui={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\u000b"},ci=/\uffff/.test("￿")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;function hi(t,e){e.push('"',t.replace(ci,(function(t){var e=ui[t];return e||(e="\\u"+(65536|t.charCodeAt(0)).toString(16).substr(1),ui[t]=e),e})),'"')}function li(){var t=Pi();return Yt&&!!ue&&11==ue||/Edge\/\d+/.test(t)}function fi(){return s.window&&s.window.location.href||self&&self.location&&self.location.href||""}function pi(t,e){e=e||s.window;var n="about:blank";t&&(n=Rt(jt(t)||Ut)),e.location.href=n}function di(t,e){var n,i=[];for(n in t)n in e?typeof t[n]!=typeof e[n]?i.push(n):"object"==typeof t[n]&&null!=t[n]&&null!=e[n]?0<di(t[n],e[n]).length&&i.push(n):t[n]!==e[n]&&i.push(n):i.push(n);for(n in e)n in t||i.push(n);return i}function vi(t){return!!((t=(t||Pi()).toLowerCase()).match(/android/)||t.match(/webos/)||t.match(/iphone|ipad|ipod/)||t.match(/blackberry/)||t.match(/windows phone/)||t.match(/iemobile/))}function mi(t){t=t||s.window;try{t.close()}catch(t){}}function gi(t,e,n){var i=Math.floor(1e9*Math.random()).toString();e=e||500,n=n||600;var r=(window.screen.availHeight-n)/2,o=(window.screen.availWidth-e)/2;for(a in e={width:e,height:n,top:0<r?r:0,left:0<o?o:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1},n=Pi().toLowerCase(),i&&(e.target=i,ct(n,"crios/")&&(e.target="_blank")),Ni(Pi())==Ai&&(t=t||"http://localhost",e.scrollbars=!0),n=t||"",(t=e)||(t={}),i=window,e=n instanceof Dt?n:jt(void 0!==n.href?n.href:String(n))||Ut,n=t.target||n.target,r=[],t)switch(a){case"width":case"height":case"top":case"left":r.push(a+"="+t[a]);break;case"target":case"noopener":case"noreferrer":break;default:r.push(a+"="+(t[a]?1:0))}var a=r.join(",");if((pt("iPhone")&&!pt("iPod")&&!pt("iPad")||pt("iPad")||pt("iPod"))&&i.navigator&&i.navigator.standalone&&n&&"_self"!=n?(yt(a=me(document,"A"),"HTMLAnchorElement"),e=e instanceof Dt?e:Ft(e),a.href=Rt(e),a.setAttribute("target",n),t.noreferrer&&a.setAttribute("rel","noreferrer"),(t=document.createEvent("MouseEvent")).initMouseEvent("click",!0,!0,i,1),a.dispatchEvent(t),a={}):t.noreferrer?(a=Kt("",i,n,a),t=Rt(e),a&&(Zt&&ct(t,";")&&(t="'"+t.replace(/'/g,"%27")+"'"),a.opener=null,t='<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+Gt(t)+'">',t=new qt(t=(i=_t())?i.createHTML(t):t,null,Ht),i=a.document)&&(i.write(function(t){return t instanceof qt&&t.constructor===qt?t.a:(M("expected object of type SafeHtml, got '"+t+"' of type "+f(t)),"type_error:SafeHtml")}(t)),i.close())):(a=Kt(e,i,n,a))&&t.noopener&&(a.opener=null),a)try{a.focus()}catch(t){}return a}var bi=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,yi=/^[^@]+@[^@]+$/;function wi(){var t=null;return new Te((function(e){"complete"==s.document.readyState?e():(t=function(){e()},pn(window,"load",t))})).s((function(e){throw dn(window,"load",t),e}))}function Ii(t){return t=t||Pi(),!("file:"!==Mi()&&"ionic:"!==Mi()||!t.toLowerCase().match(/iphone|ipad|ipod|android/))}function Ti(){var t=s.window;try{return!(!t||t==t.top)}catch(t){return!1}}function Ei(){return void 0!==s.WorkerGlobalScope&&"function"==typeof s.importScripts}function Si(){return Z.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":Z.INTERNAL.hasOwnProperty("node")?"Node":Ei()?"Worker":"Browser"}function _i(){var t=Si();return"ReactNative"===t||"Node"===t}var Ai="Firefox",ki="Chrome";function Ni(t){var e=t.toLowerCase();return ct(e,"opera/")||ct(e,"opr/")||ct(e,"opios/")?"Opera":ct(e,"iemobile")?"IEMobile":ct(e,"msie")||ct(e,"trident/")?"IE":ct(e,"edge/")?"Edge":ct(e,"firefox/")?Ai:ct(e,"silk/")?"Silk":ct(e,"blackberry")?"Blackberry":ct(e,"webos")?"Webos":!ct(e,"safari/")||ct(e,"chrome/")||ct(e,"crios/")||ct(e,"android")?!ct(e,"chrome/")&&!ct(e,"crios/")||ct(e,"edge/")?ct(e,"android")?"Android":(t=t.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&2==t.length?t[1]:"Other":ki:"Safari"}var Oi={ld:"FirebaseCore-web",nd:"FirebaseUI-web"};function Ci(t,e){e=e||[];var n,i=[],r={};for(n in Oi)r[Oi[n]]=!0;for(n=0;n<e.length;n++)void 0!==r[e[n]]&&(delete r[e[n]],i.push(e[n]));return i.sort(),(e=i).length||(e=["FirebaseCore-web"]),"Browser"===(i=Si())?i=Ni(r=Pi()):"Worker"===i&&(i=Ni(r=Pi())+"-"+i),i+"/JsCore/"+t+"/"+e.join(",")}function Pi(){return s.navigator&&s.navigator.userAgent||""}function Di(t,e){t=t.split("."),e=e||s;for(var n=0;n<t.length&&"object"==typeof e&&null!=e;n++)e=e[t[n]];return n!=t.length&&(e=void 0),e}function Ri(){try{var t=s.localStorage,e=qi();if(t)return t.setItem(e,"1"),t.removeItem(e),!li()||!!s.indexedDB}catch(t){return Ei()&&!!s.indexedDB}return!1}function Li(){return(xi()||"chrome-extension:"===Mi()||Ii())&&!_i()&&Ri()&&!Ei()}function xi(){return"http:"===Mi()||"https:"===Mi()}function Mi(){return s.location&&s.location.protocol||null}function ji(t){return!vi(t=t||Pi())&&Ni(t)!=Ai}function Fi(t){return void 0===t?null:oi(t)}function Vi(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&null!==t[e]&&void 0!==t[e]&&(n[e]=t[e]);return n}function Ui(t){if(null!==t)return JSON.parse(t)}function qi(t){return t||Math.floor(1e9*Math.random()).toString()}function Hi(t){return"Safari"!=Ni(t=t||Pi())&&!t.toLowerCase().match(/iphone|ipad|ipod/)}function Ki(){var t=s.___jsl;if(t&&t.H)for(var e in t.H)if(t.H[e].r=t.H[e].r||[],t.H[e].L=t.H[e].L||[],t.H[e].r=t.H[e].L.concat(),t.CP)for(var n=0;n<t.CP.length;n++)t.CP[n]=null}function Bi(t,e){if(t>e)throw Error("Short delay should be less than long delay!");this.a=t,this.c=e,t=Pi(),e=Si(),this.b=vi(t)||"ReactNative"===e}function Gi(){var t=s.document;return!t||void 0===t.visibilityState||"visible"==t.visibilityState}function Wi(t){"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(t)}function zi(t){try{var e=new Date(parseInt(t,10));if(!isNaN(e.getTime())&&!/[^0-9]/.test(t))return e.toUTCString()}catch(t){}return null}function Xi(){return!(!Di("fireauth.oauthhelper",s)&&!Di("fireauth.iframe",s))}Bi.prototype.get=function(){var t=s.navigator;return!t||"boolean"!=typeof t.onLine||!xi()&&"chrome-extension:"!==Mi()&&void 0===t.connection||t.onLine?this.b?this.c:this.a:Math.min(5e3,this.a)};var Ji,Yi={};function $i(t){Yi[t]||(Yi[t]=!0,Wi(t))}try{var Zi={};Object.defineProperty(Zi,"abcd",{configurable:!0,enumerable:!0,value:1}),Object.defineProperty(Zi,"abcd",{configurable:!0,enumerable:!0,value:2}),Ji=2==Zi.abcd}catch(Xt){Ji=!1}function Qi(t,e,n){Ji?Object.defineProperty(t,e,{configurable:!0,enumerable:!0,value:n}):t[e]=n}function tr(t,e){if(e)for(var n in e)e.hasOwnProperty(n)&&Qi(t,n,e[n])}function er(t){var e={};return tr(e,t),e}function nr(t){var e=t;if("object"==typeof t&&null!=t)for(var n in e="length"in t?[]:{},t)Qi(e,n,nr(t[n]));return e}function ir(t){var e=t&&(t[ur]?"phone":null);if(!(e&&t&&t[sr]))throw new A("internal-error","Internal assert: invalid MultiFactorInfo object");Qi(this,"uid",t[sr]),Qi(this,"displayName",t[or]||null);var n=null;t[ar]&&(n=new Date(t[ar]).toUTCString()),Qi(this,"enrollmentTime",n),Qi(this,"factorId",e)}function rr(t){try{var e=new cr(t)}catch(t){e=null}return e}ir.prototype.w=function(){return{uid:this.uid,displayName:this.displayName,factorId:this.factorId,enrollmentTime:this.enrollmentTime}};var or="displayName",ar="enrolledAt",sr="mfaEnrollmentId",ur="phoneInfo";function cr(t){ir.call(this,t),Qi(this,"phoneNumber",t[ur])}function hr(t){var e={},n=t[dr],i=t[mr],r=t[gr];if(t=rr(t[vr]),!r||r!=fr&&r!=pr&&!n||r==pr&&!i||r==lr&&!t)throw Error("Invalid checkActionCode response!");r==pr?(e[yr]=n||null,e[Ir]=n||null,e[br]=i):(e[yr]=i||null,e[Ir]=i||null,e[br]=n||null),e[wr]=t||null,Qi(this,Er,r),Qi(this,Tr,nr(e))}S(cr,ir),cr.prototype.w=function(){var t=cr.$a.w.call(this);return t.phoneNumber=this.phoneNumber,t};var lr="REVERT_SECOND_FACTOR_ADDITION",fr="EMAIL_SIGNIN",pr="VERIFY_AND_CHANGE_EMAIL",dr="email",vr="mfaInfo",mr="newEmail",gr="requestType",br="email",yr="fromEmail",wr="multiFactorInfo",Ir="previousEmail",Tr="data",Er="operation";function Sr(t){var e=Un(t=qn(t),_r)||null,n=Un(t,Ar)||null,i=Un(t,Or)||null;if(i=i&&Pr[i]||null,!e||!n||!i)throw new A("argument-error",_r+", "+Ar+"and "+Or+" are required in a valid action code URL.");tr(this,{apiKey:e,operation:i,code:n,continueUrl:Un(t,kr)||null,languageCode:Un(t,Nr)||null,tenantId:Un(t,Cr)||null})}var _r="apiKey",Ar="oobCode",kr="continueUrl",Nr="languageCode",Or="mode",Cr="tenantId",Pr={recoverEmail:"RECOVER_EMAIL",resetPassword:"PASSWORD_RESET",revertSecondFactorAddition:lr,signIn:fr,verifyAndChangeEmail:pr,verifyEmail:"VERIFY_EMAIL"};function Dr(t){try{return new Sr(t)}catch(t){return null}}function Rr(t){var e=t[Fr];if(void 0===e)throw new A("missing-continue-uri");if("string"!=typeof e||"string"==typeof e&&!e.length)throw new A("invalid-continue-uri");this.h=e,this.b=this.a=null,this.g=!1;var n=t[Lr];if(n&&"object"==typeof n){e=n[qr];var i=n[Vr];if(n=n[Ur],"string"==typeof e&&e.length){if(this.a=e,void 0!==i&&"boolean"!=typeof i)throw new A("argument-error",Vr+" property must be a boolean when specified.");if(this.g=!!i,void 0!==n&&("string"!=typeof n||"string"==typeof n&&!n.length))throw new A("argument-error",Ur+" property must be a non empty string when specified.");this.b=n||null}else{if(void 0!==e)throw new A("argument-error",qr+" property must be a non empty string when specified.");if(void 0!==i||void 0!==n)throw new A("missing-android-pkg-name")}}else if(void 0!==n)throw new A("argument-error",Lr+" property must be a non null object when specified.");if(this.f=null,(e=t[jr])&&"object"==typeof e){if("string"==typeof(e=e[Hr])&&e.length)this.f=e;else if(void 0!==e)throw new A("argument-error",Hr+" property must be a non empty string when specified.")}else if(void 0!==e)throw new A("argument-error",jr+" property must be a non null object when specified.");if(void 0!==(e=t[Mr])&&"boolean"!=typeof e)throw new A("argument-error",Mr+" property must be a boolean when specified.");if(this.c=!!e,void 0!==(t=t[xr])&&("string"!=typeof t||"string"==typeof t&&!t.length))throw new A("argument-error",xr+" property must be a non empty string when specified.");this.i=t||null}var Lr="android",xr="dynamicLinkDomain",Mr="handleCodeInApp",jr="iOS",Fr="url",Vr="installApp",Ur="minimumVersion",qr="packageName",Hr="bundleId";function Kr(t){var e={};for(var n in e.continueUrl=t.h,e.canHandleCodeInApp=t.c,(e.androidPackageName=t.a)&&(e.androidMinimumVersion=t.b,e.androidInstallApp=t.g),e.iOSBundleId=t.f,e.dynamicLinkDomain=t.i,e)null===e[n]&&delete e[n];return e}var Br=null;function Gr(t){var e=zr(t);if(!(e&&e.sub&&e.iss&&e.aud&&e.exp))throw Error("Invalid JWT");this.g=t,this.c=e.exp,this.h=e.sub,E(),this.a=e.provider_id||e.firebase&&e.firebase.sign_in_provider||null,this.f=e.firebase&&e.firebase.tenant||null,this.b=!!e.is_anonymous||"anonymous"==this.a}function Wr(t){try{return new Gr(t)}catch(t){return null}}function zr(t){if(!t)return null;if(3!=(t=t.split(".")).length)return null;for(var e=(4-(t=t[1]).length%4)%4,n=0;n<e;n++)t+=".";try{return JSON.parse(function(t){var e="";return function(t,e){function n(e){for(;i<t.length;){var n=t.charAt(i++),r=Br[n];if(null!=r)return r;if(!/^[\s\xa0]*$/.test(n))throw Error("Unknown base64 encoding at char: "+n)}return e}!function(){if(!Br){Br={};for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".split(""),e=["+/=","+/","-_=","-_.","-_"],n=0;5>n;n++)for(var i=t.concat(e[n].split("")),r=0;r<i.length;r++){var o=i[r];void 0===Br[o]&&(Br[o]=r)}}}();for(var i=0;;){var r=n(-1),o=n(0),a=n(64),s=n(64);if(64===s&&-1===r)break;e(r<<2|o>>4),64!=a&&(e(o<<4&240|a>>2),64!=s&&e(a<<6&192|s))}}(t,(function(t){e+=String.fromCharCode(t)})),e}(t))}catch(t){}return null}Gr.prototype.S=function(){return this.f},Gr.prototype.i=function(){return this.b},Gr.prototype.toString=function(){return this.g};var Xr="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),Jr=["client_id","response_type","scope","redirect_uri","state"],Yr={md:{Ja:"locale",ua:700,ta:600,fa:"facebook.com",Wa:Jr},od:{Ja:null,ua:500,ta:750,fa:"github.com",Wa:Jr},pd:{Ja:"hl",ua:515,ta:680,fa:"google.com",Wa:Jr},vd:{Ja:"lang",ua:485,ta:705,fa:"twitter.com",Wa:Xr},jd:{Ja:"locale",ua:640,ta:600,fa:"apple.com",Wa:[]}};function $r(t){for(var e in Yr)if(Yr[e].fa==t)return Yr[e];return null}function Zr(t){var e={};e["facebook.com"]=io,e["google.com"]=oo,e["github.com"]=ro,e["twitter.com"]=ao;var n=t&&t[to];try{if(n)return e[n]?new e[n](t):new no(t);if(void 0!==t[Qr])return new eo(t)}catch(t){}return null}var Qr="idToken",to="providerId";function eo(t){var e=t[to];if(!e&&t[Qr]){var n=Wr(t[Qr]);n&&n.a&&(e=n.a)}if(!e)throw Error("Invalid additional user info!");"anonymous"!=e&&"custom"!=e||(e=null),n=!1,void 0!==t.isNewUser?n=!!t.isNewUser:"identitytoolkit#SignupNewUserResponse"===t.kind&&(n=!0),Qi(this,"providerId",e),Qi(this,"isNewUser",n)}function no(t){eo.call(this,t),Qi(this,"profile",nr((t=Ui(t.rawUserInfo||"{}"))||{}))}function io(t){if(no.call(this,t),"facebook.com"!=this.providerId)throw Error("Invalid provider ID!")}function ro(t){if(no.call(this,t),"github.com"!=this.providerId)throw Error("Invalid provider ID!");Qi(this,"username",this.profile&&this.profile.login||null)}function oo(t){if(no.call(this,t),"google.com"!=this.providerId)throw Error("Invalid provider ID!")}function ao(t){if(no.call(this,t),"twitter.com"!=this.providerId)throw Error("Invalid provider ID!");Qi(this,"username",t.screenName||null)}function so(t){var e=qn(t),n=Un(e,"link"),i=Un(qn(n),"link");return e=Un(e,"deep_link_id"),Un(qn(e),"link")||e||i||n||t}function uo(t,e){if(!t&&!e)throw new A("internal-error","Internal assert: no raw session string available");if(t&&e)throw new A("internal-error","Internal assert: unable to determine the session type");this.a=t||null,this.b=e||null,this.type=this.a?co:ho}S(no,eo),S(io,no),S(ro,no),S(oo,no),S(ao,no);var co="enroll",ho="signin";function lo(){}function fo(t,e){return t.then((function(t){if(t[ts]){var n=Wr(t[ts]);if(!n||e!=n.h)throw new A("user-mismatch");return t}throw new A("user-mismatch")})).s((function(t){throw t&&t.code&&t.code==O+"user-not-found"?new A("user-mismatch"):t}))}function po(t,e){if(!e)throw new A("internal-error","failed to construct a credential");this.a=e,Qi(this,"providerId",t),Qi(this,"signInMethod",t)}function vo(t){return{pendingToken:t.a,requestUri:"http://localhost"}}function mo(t){if(t&&t.providerId&&t.signInMethod&&0==t.providerId.indexOf("saml.")&&t.pendingToken)try{return new po(t.providerId,t.pendingToken)}catch(t){}return null}function go(t,e,n){if(this.a=null,e.idToken||e.accessToken)e.idToken&&Qi(this,"idToken",e.idToken),e.accessToken&&Qi(this,"accessToken",e.accessToken),e.nonce&&!e.pendingToken&&Qi(this,"nonce",e.nonce),e.pendingToken&&(this.a=e.pendingToken);else{if(!e.oauthToken||!e.oauthTokenSecret)throw new A("internal-error","failed to construct a credential");Qi(this,"accessToken",e.oauthToken),Qi(this,"secret",e.oauthTokenSecret)}Qi(this,"providerId",t),Qi(this,"signInMethod",n)}function bo(t){var e={};return t.idToken&&(e.id_token=t.idToken),t.accessToken&&(e.access_token=t.accessToken),t.secret&&(e.oauth_token_secret=t.secret),e.providerId=t.providerId,t.nonce&&!t.a&&(e.nonce=t.nonce),e={postBody:Qn(e).toString(),requestUri:"http://localhost"},t.a&&(delete e.postBody,e.pendingToken=t.a),e}function yo(t){if(t&&t.providerId&&t.signInMethod){var e={idToken:t.oauthIdToken,accessToken:t.oauthTokenSecret?null:t.oauthAccessToken,oauthTokenSecret:t.oauthTokenSecret,oauthToken:t.oauthTokenSecret&&t.oauthAccessToken,nonce:t.nonce,pendingToken:t.pendingToken};try{return new go(t.providerId,e,t.signInMethod)}catch(t){}}return null}function wo(t,e){this.Pc=e||[],tr(this,{providerId:t,isOAuthProvider:!0}),this.Hb={},this.ob=($r(t)||{}).Ja||null,this.nb=null}function Io(t){if("string"!=typeof t||0!=t.indexOf("saml."))throw new A("argument-error",'SAML provider IDs must be prefixed with "saml."');wo.call(this,t,[])}function To(t){wo.call(this,t,Jr),this.a=[]}function Eo(){To.call(this,"facebook.com")}function So(t){if(!t)throw new A("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return v(t)&&(e=t.accessToken),(new Eo).credential({accessToken:e})}function _o(){To.call(this,"github.com")}function Ao(t){if(!t)throw new A("argument-error","credential failed: expected 1 argument (the OAuth access token).");var e=t;return v(t)&&(e=t.accessToken),(new _o).credential({accessToken:e})}function ko(){To.call(this,"google.com"),this.Ca("profile")}function No(t,e){var n=t;return v(t)&&(n=t.idToken,e=t.accessToken),(new ko).credential({idToken:n,accessToken:e})}function Oo(){wo.call(this,"twitter.com",Xr)}function Co(t,e){var n=t;if(v(n)||(n={oauthToken:t,oauthTokenSecret:e}),!n.oauthToken||!n.oauthTokenSecret)throw new A("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new go("twitter.com",n,"twitter.com")}function Po(t,e,n){this.a=t,this.f=e,Qi(this,"providerId","password"),Qi(this,"signInMethod",n===Ro.EMAIL_LINK_SIGN_IN_METHOD?Ro.EMAIL_LINK_SIGN_IN_METHOD:Ro.EMAIL_PASSWORD_SIGN_IN_METHOD)}function Do(t){return t&&t.email&&t.password?new Po(t.email,t.password,t.signInMethod):null}function Ro(){tr(this,{providerId:"password",isOAuthProvider:!1})}function Lo(t,e){if(!(e=xo(e)))throw new A("argument-error","Invalid email link!");return new Po(t,e.code,Ro.EMAIL_LINK_SIGN_IN_METHOD)}function xo(t){return(t=Dr(t=so(t)))&&t.operation===fr?t:null}function Mo(t){if(!(t.cb&&t.bb||t.La&&t.ea))throw new A("internal-error");this.a=t,Qi(this,"providerId","phone"),this.fa="phone",Qi(this,"signInMethod","phone")}function jo(t){if(t&&"phone"===t.providerId&&(t.verificationId&&t.verificationCode||t.temporaryProof&&t.phoneNumber)){var e={};return B(["verificationId","verificationCode","temporaryProof","phoneNumber"],(function(n){t[n]&&(e[n]=t[n])})),new Mo(e)}return null}function Fo(t){return t.a.La&&t.a.ea?{temporaryProof:t.a.La,phoneNumber:t.a.ea}:{sessionInfo:t.a.cb,code:t.a.bb}}function Vo(t){try{this.a=t||Z.auth()}catch(t){throw new A("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().")}tr(this,{providerId:"phone",isOAuthProvider:!1})}function Uo(t,e){if(!t)throw new A("missing-verification-id");if(!e)throw new A("missing-verification-code");return new Mo({cb:t,bb:e})}function qo(t){if(t.temporaryProof&&t.phoneNumber)return new Mo({La:t.temporaryProof,ea:t.phoneNumber});var e=t&&t.providerId;if(!e||"password"===e)return null;var n=t&&t.oauthAccessToken,i=t&&t.oauthTokenSecret,r=t&&t.nonce,o=t&&t.oauthIdToken,a=t&&t.pendingToken;try{switch(e){case"google.com":return No(o,n);case"facebook.com":return So(n);case"github.com":return Ao(n);case"twitter.com":return Co(n,i);default:return n||i||o||a?a?0==e.indexOf("saml.")?new po(e,a):new go(e,{pendingToken:a,idToken:t.oauthIdToken,accessToken:t.oauthAccessToken},e):new To(e).credential({idToken:o,accessToken:n,rawNonce:r}):null}}catch(t){return null}}function Ho(t){if(!t.isOAuthProvider)throw new A("invalid-oauth-provider")}function Ko(t,e,n,i,r,o,a){if(this.c=t,this.b=e||null,this.g=n||null,this.f=i||null,this.i=o||null,this.h=a||null,this.a=r||null,!this.g&&!this.a)throw new A("invalid-auth-event");if(this.g&&this.a)throw new A("invalid-auth-event");if(this.g&&!this.f)throw new A("invalid-auth-event")}function Bo(t){return(t=t||{}).type?new Ko(t.type,t.eventId,t.urlResponse,t.sessionId,t.error&&k(t.error),t.postBody,t.tenantId):null}function Go(){this.b=null,this.a=[]}uo.prototype.Ha=function(){return this.a?Oe(this.a):Oe(this.b)},uo.prototype.w=function(){return this.type==co?{multiFactorSession:{idToken:this.a}}:{multiFactorSession:{pendingCredential:this.b}}},lo.prototype.ja=function(){},lo.prototype.b=function(){},lo.prototype.c=function(){},lo.prototype.w=function(){},po.prototype.ja=function(t){return Is(t,vo(this))},po.prototype.b=function(t,e){var n=vo(this);return n.idToken=e,Ts(t,n)},po.prototype.c=function(t,e){return fo(Es(t,vo(this)),e)},po.prototype.w=function(){return{providerId:this.providerId,signInMethod:this.signInMethod,pendingToken:this.a}},go.prototype.ja=function(t){return Is(t,bo(this))},go.prototype.b=function(t,e){var n=bo(this);return n.idToken=e,Ts(t,n)},go.prototype.c=function(t,e){return fo(Es(t,bo(this)),e)},go.prototype.w=function(){var t={providerId:this.providerId,signInMethod:this.signInMethod};return this.idToken&&(t.oauthIdToken=this.idToken),this.accessToken&&(t.oauthAccessToken=this.accessToken),this.secret&&(t.oauthTokenSecret=this.secret),this.nonce&&(t.nonce=this.nonce),this.a&&(t.pendingToken=this.a),t},wo.prototype.Ka=function(t){return this.Hb=mt(t),this},S(Io,wo),S(To,wo),To.prototype.Ca=function(t){return X(this.a,t)||this.a.push(t),this},To.prototype.Pb=function(){return Q(this.a)},To.prototype.credential=function(t,e){var n;if(!(n=v(t)?{idToken:t.idToken||null,accessToken:t.accessToken||null,nonce:t.rawNonce||null}:{idToken:t||null,accessToken:e||null}).idToken&&!n.accessToken)throw new A("argument-error","credential failed: must provide the ID token and/or the access token.");return new go(this.providerId,n,this.providerId)},S(Eo,To),Qi(Eo,"PROVIDER_ID","facebook.com"),Qi(Eo,"FACEBOOK_SIGN_IN_METHOD","facebook.com"),S(_o,To),Qi(_o,"PROVIDER_ID","github.com"),Qi(_o,"GITHUB_SIGN_IN_METHOD","github.com"),S(ko,To),Qi(ko,"PROVIDER_ID","google.com"),Qi(ko,"GOOGLE_SIGN_IN_METHOD","google.com"),S(Oo,wo),Qi(Oo,"PROVIDER_ID","twitter.com"),Qi(Oo,"TWITTER_SIGN_IN_METHOD","twitter.com"),Po.prototype.ja=function(t){return this.signInMethod==Ro.EMAIL_LINK_SIGN_IN_METHOD?ru(t,Ps,{email:this.a,oobCode:this.f}):ru(t,Qs,{email:this.a,password:this.f})},Po.prototype.b=function(t,e){return this.signInMethod==Ro.EMAIL_LINK_SIGN_IN_METHOD?ru(t,Ds,{idToken:e,email:this.a,oobCode:this.f}):ru(t,Gs,{idToken:e,email:this.a,password:this.f})},Po.prototype.c=function(t,e){return fo(this.ja(t),e)},Po.prototype.w=function(){return{email:this.a,password:this.f,signInMethod:this.signInMethod}},tr(Ro,{PROVIDER_ID:"password"}),tr(Ro,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"}),tr(Ro,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"}),Mo.prototype.ja=function(t){return t.eb(Fo(this))},Mo.prototype.b=function(t,e){var n=Fo(this);return n.idToken=e,ru(t,eu,n)},Mo.prototype.c=function(t,e){var n=Fo(this);return n.operation="REAUTH",fo(t=ru(t,nu,n),e)},Mo.prototype.w=function(){var t={providerId:"phone"};return this.a.cb&&(t.verificationId=this.a.cb),this.a.bb&&(t.verificationCode=this.a.bb),this.a.La&&(t.temporaryProof=this.a.La),this.a.ea&&(t.phoneNumber=this.a.ea),t},Vo.prototype.eb=function(t,e){var n=this.a.a;return Oe(e.verify()).then((function(i){if("string"!=typeof i)throw new A("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(e.type){case"recaptcha":var r=v(t)?t.session:null,o=v(t)?t.phoneNumber:t;return(r&&r.type==co?r.Ha().then((function(t){return function(t,e){return ru(t,zs,e).then((function(t){return t.phoneSessionInfo.sessionInfo}))}(n,{idToken:t,phoneEnrollmentInfo:{phoneNumber:o,recaptchaToken:i}})})):r&&r.type==ho?r.Ha().then((function(e){return function(t,e){return ru(t,Xs,e).then((function(t){return t.phoneResponseInfo.sessionInfo}))}(n,{mfaPendingCredential:e,mfaEnrollmentId:t.multiFactorHint&&t.multiFactorHint.uid||t.multiFactorUid,phoneSignInInfo:{recaptchaToken:i}})})):function(t,e){return ru(t,Ks,e)}(n,{phoneNumber:o,recaptchaToken:i})).then((function(t){return"function"==typeof e.reset&&e.reset(),t}),(function(t){throw"function"==typeof e.reset&&e.reset(),t}));default:throw new A("argument-error",'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.')}}))},tr(Vo,{PROVIDER_ID:"phone"}),tr(Vo,{PHONE_SIGN_IN_METHOD:"phone"}),Ko.prototype.getUid=function(){var t=[];return t.push(this.c),this.b&&t.push(this.b),this.f&&t.push(this.f),this.h&&t.push(this.h),t.join("-")},Ko.prototype.S=function(){return this.h},Ko.prototype.w=function(){return{type:this.c,eventId:this.b,urlResponse:this.g,sessionId:this.f,postBody:this.i,tenantId:this.h,error:this.a&&this.a.w()}};var Wo,zo=null;function Xo(t){var e="unauthorized-domain",n=void 0,i=qn(t);t=i.a,"chrome-extension"==(i=i.f)?n=Bt("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):"http"==i||"https"==i?n=Bt("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",t):e="operation-not-supported-in-this-environment",A.call(this,e,n)}function Jo(t,e,n){A.call(this,t,n),(t=e||{}).Ib&&Qi(this,"email",t.Ib),t.ea&&Qi(this,"phoneNumber",t.ea),t.credential&&Qi(this,"credential",t.credential),t.Yb&&Qi(this,"tenantId",t.Yb)}function Yo(t){if(t.code){var e=t.code||"";0==e.indexOf(O)&&(e=e.substring(O.length));var n={credential:qo(t),Yb:t.tenantId};if(t.email)n.Ib=t.email;else if(t.phoneNumber)n.ea=t.phoneNumber;else if(!n.credential)return new A(e,t.message||void 0);return new Jo(e,n,t.message)}return null}function $o(){}function Zo(t){return t.c||(t.c=t.b())}function Qo(){}function ta(t){if(!t.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var e=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],n=0;n<e.length;n++){var i=e[n];try{return new ActiveXObject(i),t.f=i}catch(t){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed")}return t.f}function ea(){}function na(){this.a=new XDomainRequest,this.readyState=0,this.onreadystatechange=null,this.responseType=this.responseText=this.response="",this.status=-1,this.statusText="",this.a.onload=I(this.pc,this),this.a.onerror=I(this.Rb,this),this.a.onprogress=I(this.qc,this),this.a.ontimeout=I(this.uc,this)}function ia(t,e){t.readyState=e,t.onreadystatechange&&t.onreadystatechange()}function ra(t,e,n){this.reset(t,e,n,void 0,void 0)}function oa(t){this.f=t,this.b=this.c=this.a=null}function aa(t,e){this.name=t,this.value=e}S(Xo,A),S(Jo,A),Jo.prototype.w=function(){var t={code:this.code,message:this.message};this.email&&(t.email=this.email),this.phoneNumber&&(t.phoneNumber=this.phoneNumber),this.tenantId&&(t.tenantId=this.tenantId);var e=this.credential&&this.credential.w();return e&&bt(t,e),t},Jo.prototype.toJSON=function(){return this.w()},$o.prototype.c=null,S(Qo,$o),Qo.prototype.a=function(){var t=ta(this);return t?new ActiveXObject(t):new XMLHttpRequest},Qo.prototype.b=function(){var t={};return ta(this)&&(t[0]=!0,t[1]=!0),t},Wo=new Qo,S(ea,$o),ea.prototype.a=function(){var t=new XMLHttpRequest;if("withCredentials"in t)return t;if("undefined"!=typeof XDomainRequest)return new na;throw Error("Unsupported browser")},ea.prototype.b=function(){return{}},(t=na.prototype).open=function(t,e,n){if(null!=n&&!n)throw Error("Only async requests are supported.");this.a.open(t,e)},t.send=function(t){if(t){if("string"!=typeof t)throw Error("Only string data is supported");this.a.send(t)}else this.a.send()},t.abort=function(){this.a.abort()},t.setRequestHeader=function(){},t.getResponseHeader=function(t){return"content-type"==t.toLowerCase()?this.a.contentType:""},t.pc=function(){this.status=200,this.response=this.responseText=this.a.responseText,ia(this,4)},t.Rb=function(){this.status=500,this.response=this.responseText="",ia(this,4)},t.uc=function(){this.Rb()},t.qc=function(){this.status=200,ia(this,1)},t.getAllResponseHeaders=function(){return"content-type: "+this.a.contentType},ra.prototype.a=null,ra.prototype.reset=function(t,e,n,i,r){i||E(),delete this.a},aa.prototype.toString=function(){return this.name};var sa=new aa("SEVERE",1e3),ua=new aa("WARNING",900),ca=new aa("CONFIG",700),ha=new aa("FINE",500);function la(t){return t.c?t.c:t.a?la(t.a):(M("Root logger has no level set."),null)}oa.prototype.log=function(t,e,n){if(t.value>=la(this).value)for(d(e)&&(e=e()),t=new ra(t,String(e),this.f),n&&(t.a=n),n=this;n;)n=n.a};var fa={},pa=null;function da(t){var e;if(pa||(pa=new oa(""),fa[""]=pa,pa.c=ca),!(e=fa[t])){e=new oa(t);var n=t.lastIndexOf("."),i=t.substr(n+1);(n=da(t.substr(0,n))).b||(n.b={}),n.b[i]=e,e.a=n,fa[t]=e}return e}function va(t,e){t&&t.log(ha,e,void 0)}function ma(t){this.f=t}function ga(t){En.call(this),this.u=t,this.h=void 0,this.readyState=ba,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.l=new Headers,this.b=null,this.o="GET",this.f="",this.a=!1,this.i=da("goog.net.FetchXmlHttp"),this.m=this.c=this.g=null}S(ma,$o),ma.prototype.a=function(){return new ga(this.f)},ma.prototype.b=function(t){return function(){return t}}({}),S(ga,En);var ba=0;function ya(t){t.c.read().then(t.oc.bind(t)).catch(t.Ta.bind(t))}function wa(t){t.readyState=4,t.g=null,t.c=null,t.m=null,Ia(t)}function Ia(t){t.onreadystatechange&&t.onreadystatechange.call(t)}function Ta(t){En.call(this),this.headers=new Pn,this.O=t||null,this.c=!1,this.A=this.a=null,this.h=this.P=this.l="",this.f=this.N=this.i=this.G=!1,this.g=0,this.o=null,this.m=Ea,this.u=this.R=!1}(t=ga.prototype).open=function(t,e){if(this.readyState!=ba)throw this.abort(),Error("Error reopening a connection");this.o=t,this.f=e,this.readyState=1,Ia(this)},t.send=function(t){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var e={headers:this.l,method:this.o,credentials:this.h,cache:void 0};t&&(e.body=t),this.u.fetch(new Request(this.f,e)).then(this.tc.bind(this),this.Ta.bind(this))},t.abort=function(){this.response=this.responseText="",this.l=new Headers,this.status=0,this.c&&this.c.cancel("Request was aborted."),1<=this.readyState&&this.a&&4!=this.readyState&&(this.a=!1,wa(this)),this.readyState=ba},t.tc=function(t){this.a&&(this.g=t,this.b||(this.status=this.g.status,this.statusText=this.g.statusText,this.b=t.headers,this.readyState=2,Ia(this)),this.a&&(this.readyState=3,Ia(this),this.a&&("arraybuffer"===this.responseType?t.arrayBuffer().then(this.rc.bind(this),this.Ta.bind(this)):void 0!==s.ReadableStream&&"body"in t?(this.response=this.responseText="",this.c=t.body.getReader(),this.m=new TextDecoder,ya(this)):t.text().then(this.sc.bind(this),this.Ta.bind(this)))))},t.oc=function(t){if(this.a){var e=this.m.decode(t.value?t.value:new Uint8Array(0),{stream:!t.done});e&&(this.response=this.responseText+=e),t.done?wa(this):Ia(this),3==this.readyState&&ya(this)}},t.sc=function(t){this.a&&(this.response=this.responseText=t,wa(this))},t.rc=function(t){this.a&&(this.response=t,wa(this))},t.Ta=function(t){var e=this.i;e&&e.log(ua,"Failed to fetch url "+this.f,t instanceof Error?t:Error(t)),this.a&&wa(this)},t.setRequestHeader=function(t,e){this.l.append(t,e)},t.getResponseHeader=function(t){return this.b?this.b.get(t.toLowerCase())||"":((t=this.i)&&t.log(ua,"Attempting to get response header but no headers have been received for url: "+this.f,void 0),"")},t.getAllResponseHeaders=function(){if(!this.b){var t=this.i;return t&&t.log(ua,"Attempting to get all response headers but no headers have been received for url: "+this.f,void 0),""}t=[];for(var e=this.b.entries(),n=e.next();!n.done;)n=n.value,t.push(n[0]+": "+n[1]),n=e.next();return t.join("\r\n")},Object.defineProperty(ga.prototype,"withCredentials",{get:function(){return"include"===this.h},set:function(t){this.h=t?"include":"same-origin"}}),S(Ta,En);var Ea="";Ta.prototype.b=da("goog.net.XhrIo");var Sa=/^https?$/i,_a=["POST","PUT"];function Aa(t){return"content-type"==t.toLowerCase()}function ka(t,e){t.c=!1,t.a&&(t.f=!0,t.a.abort(),t.f=!1),t.h=e,Na(t),Ca(t)}function Na(t){t.G||(t.G=!0,t.dispatchEvent("complete"),t.dispatchEvent("error"))}function Oa(t){if(t.c&&void 0!==a)if(t.A[1]&&4==Da(t)&&2==Ra(t))va(t.b,La(t,"Local request error detected and ignored"));else if(t.i&&4==Da(t))kn(t.Ub,0,t);else if(t.dispatchEvent("readystatechange"),4==Da(t)){va(t.b,La(t,"Request complete")),t.c=!1;try{var e,n=Ra(t);t:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var i=!0;break t;default:i=!1}if(!(e=i)){var r;if(r=0===n){var o=String(t.l).match(Ln)[1]||null;if(!o&&s.self&&s.self.location){var u=s.self.location.protocol;o=u.substr(0,u.length-1)}r=!Sa.test(o?o.toLowerCase():"")}e=r}if(e)t.dispatchEvent("complete"),t.dispatchEvent("success");else{try{var c=2<Da(t)?t.a.statusText:""}catch(e){va(t.b,"Can not get status: "+e.message),c=""}t.h=c+" ["+Ra(t)+"]",Na(t)}}finally{Ca(t)}}}function Ca(t,e){if(t.a){Pa(t);var n=t.a,i=t.A[0]?l:null;t.a=null,t.A=null,e||t.dispatchEvent("ready");try{n.onreadystatechange=i}catch(e){(t=t.b)&&t.log(sa,"Problem encountered resetting onreadystatechange: "+e.message,void 0)}}}function Pa(t){t.a&&t.u&&(t.a.ontimeout=null),t.o&&(s.clearTimeout(t.o),t.o=null)}function Da(t){return t.a?t.a.readyState:0}function Ra(t){try{return 2<Da(t)?t.a.status:-1}catch(t){return-1}}function La(t,e){return e+" ["+t.P+" "+t.l+" "+Ra(t)+"]"}function xa(t){var e=Wa;this.g=[],this.u=e,this.o=t||null,this.f=this.a=!1,this.c=void 0,this.m=this.A=this.i=!1,this.h=0,this.b=null,this.l=0}function Ma(t,e,n){t.a=!0,t.c=n,t.f=!e,Ua(t)}function ja(t){if(t.a){if(!t.m)throw new qa(t);t.m=!1}}function Fa(t,e,n,i){t.g.push([e,n,i]),t.a&&Ua(t)}function Va(t){return z(t.g,(function(t){return d(t[1])}))}function Ua(t){if(t.h&&t.a&&Va(t)){var e=t.h,n=Ba[e];n&&(s.clearTimeout(n.a),delete Ba[e]),t.h=0}t.b&&(t.b.l--,delete t.b),e=t.c;for(var i=n=!1;t.g.length&&!t.i;){var r=t.g.shift(),o=r[0],a=r[1];if(r=r[2],o=t.f?a:o)try{var u=o.call(r||t.o,e);void 0!==u&&(t.f=t.f&&(u==e||u instanceof Error),t.c=e=u),(R(e)||"function"==typeof s.Promise&&e instanceof s.Promise)&&(i=!0,t.i=!0)}catch(i){e=i,t.f=!0,Va(t)||(n=!0)}}t.c=e,i&&(u=I(t.v,t,!0),i=I(t.v,t,!1),e instanceof xa?(Fa(e,u,i),e.A=!0):e.then(u,i)),n&&(e=new Ka(e),Ba[e.a]=e,t.h=e.a)}function qa(){L.call(this)}function Ha(){L.call(this)}function Ka(t){this.a=s.setTimeout(I(this.c,this),0),this.b=t}(t=Ta.prototype).Ma=function(){void 0!==a&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",va(this.b,La(this,this.h)),this.dispatchEvent("timeout"),this.abort(8))},t.abort=function(){this.a&&this.c&&(va(this.b,La(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),Ca(this))},t.Da=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),Ca(this,!0)),Ta.$a.Da.call(this)},t.Ub=function(){this.xa||(this.N||this.i||this.f?Oa(this):this.Ic())},t.Ic=function(){Oa(this)},t.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.m){case Ea:case"text":return this.a.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var t=this.b;return t&&t.log(sa,"Response type "+this.m+" is not supported on this browser",void 0),null}catch(t){return va(this.b,"Can not get response: "+t.message),null}},xa.prototype.cancel=function(t){if(this.a)this.c instanceof xa&&this.c.cancel();else{if(this.b){var e=this.b;delete this.b,t?e.cancel(t):(e.l--,0>=e.l&&e.cancel())}this.u?this.u.call(this.o,this):this.m=!0,this.a||(t=new Ha(this),ja(this),Ma(this,!1,t))}},xa.prototype.v=function(t,e){this.i=!1,Ma(this,t,e)},xa.prototype.then=function(t,e,n){var i,r,o=new Te((function(t,e){i=t,r=e}));return Fa(this,i,(function(t){t instanceof Ha?o.cancel():r(t)})),o.then(t,e,n)},xa.prototype.$goog_Thenable=!0,S(qa,L),qa.prototype.message="Deferred has already fired",qa.prototype.name="AlreadyCalledError",S(Ha,L),Ha.prototype.message="Deferred was canceled",Ha.prototype.name="CanceledError",Ka.prototype.c=function(){throw delete Ba[this.a],this.b};var Ba={};function Ga(t){var e={},n=e.document||document,i=kt(t).toString(),r=me(document,"SCRIPT"),o={Vb:r,Ma:void 0},a=new xa(o),u=null,l=null!=e.timeout?e.timeout:5e3;return 0<l&&(u=window.setTimeout((function(){za(r,!0);var t=new Ya(Ja,"Timeout reached for loading script "+i);ja(a),Ma(a,!1,t)}),l),o.Ma=u),r.onload=r.onreadystatechange=function(){r.readyState&&"loaded"!=r.readyState&&"complete"!=r.readyState||(za(r,e.wd||!1,u),ja(a),Ma(a,!0,null))},r.onerror=function(){za(r,!0,u);var t=new Ya(Xa,"Error while loading script "+i);ja(a),Ma(a,!1,t)},bt(o=e.attributes||{},{type:"text/javascript",charset:"UTF-8"}),le(r,o),function(t,e){yt(t,"HTMLScriptElement"),t.src=kt(e),(e=t.ownerDocument&&t.ownerDocument.defaultView)&&e!=s?e=h(e.document):(null===c&&(c=h(s.document)),e=c),e&&t.setAttribute("nonce",e)}(r,t),function(t){var e;return(e=(t||document).getElementsByTagName("HEAD"))&&0!=e.length?e[0]:t.documentElement}(n).appendChild(r),a}function Wa(){if(this&&this.Vb){var t=this.Vb;t&&"SCRIPT"==t.tagName&&za(t,!0,this.Ma)}}function za(t,e,n){null!=n&&s.clearTimeout(n),t.onload=l,t.onerror=l,t.onreadystatechange=l,e&&window.setTimeout((function(){t&&t.parentNode&&t.parentNode.removeChild(t)}),0)}var Xa=0,Ja=1;function Ya(t,e){var n="Jsloader error (code #"+t+")";e&&(n+=": "+e),L.call(this,n),this.code=t}function $a(t){this.f=t}function Za(t,e,n){if(this.c=t,t=e||{},this.l=t.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token",this.v=t.secureTokenTimeout||es,this.g=mt(t.secureTokenHeaders||ns),this.h=t.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",this.i=t.identityPlatformEndpoint||"https://identitytoolkit.googleapis.com/v2/",this.m=t.firebaseTimeout||is,this.a=mt(t.firebaseHeaders||rs),n&&(this.a["X-Client-Version"]=n,this.g["X-Client-Version"]=n),n="Node"==Si(),!(n=s.XMLHttpRequest||n&&Z.INTERNAL.node&&Z.INTERNAL.node.XMLHttpRequest)&&!Ei())throw new A("internal-error","The XMLHttpRequest compatibility library was not found.");this.f=void 0,Ei()?this.f=new ma(self):_i()?this.f=new $a(n):this.f=new ea,this.b=null}S(Ya,L),S($a,$o),$a.prototype.a=function(){return new this.f},$a.prototype.b=function(){return{}};var Qa,ts="idToken",es=new Bi(3e4,6e4),ns={"Content-Type":"application/x-www-form-urlencoded"},is=new Bi(3e4,6e4),rs={"Content-Type":"application/json"};function os(t,e){e?t.a["X-Firebase-Locale"]=e:delete t.a["X-Firebase-Locale"]}function as(t,e){e&&(t.l=ss("https://securetoken.googleapis.com/v1/token",e),t.h=ss("https://www.googleapis.com/identitytoolkit/v3/relyingparty/",e),t.i=ss("https://identitytoolkit.googleapis.com/v2/",e))}function ss(t,e){return t=qn(t),e=qn(e.url),t.c=t.a+t.c,Mn(t,e.f),t.a=e.a,jn(t,e.g),t.toString()}function us(t,e){e?(t.a["X-Client-Version"]=e,t.g["X-Client-Version"]=e):(delete t.a["X-Client-Version"],delete t.g["X-Client-Version"])}function cs(t,e,n,i,r,o,a){(function(){var t=Pi();return!((t=Ni(t)!=ki?null:(t=t.match(/\sChrome\/(\d+)/i))&&2==t.length?parseInt(t[1],10):null)&&30>t||Yt&&ue&&!(9<ue))})()||Ei()?t=I(t.u,t):(Qa||(Qa=new Te((function(t,e){!function(t,e){((window.gapi||{}).client||{}).request?t():(s[ls]=function(){((window.gapi||{}).client||{}).request?t():e(Error("CORS_UNSUPPORTED"))},function(t,e){Fa(t,null,e,void 0)}(Ga(Nt(hs,{onload:ls})),(function(){e(Error("CORS_UNSUPPORTED"))})))}(t,e)}))),t=I(t.o,t)),t(e,n,i,r,o,a)}Za.prototype.S=function(){return this.b},Za.prototype.u=function(t,e,n,i,r,o){if(Ei()&&(void 0===s.fetch||void 0===s.Headers||void 0===s.Request))throw new A("operation-not-supported-in-this-environment","fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");var a=new Ta(this.f);if(o){a.g=Math.max(0,o);var u=setTimeout((function(){a.dispatchEvent("timeout")}),o)}Sn(a,"complete",(function(){u&&clearTimeout(u);var t=null;try{t=JSON.parse(function(t){try{return t.a?t.a.responseText:""}catch(e){return va(t.b,"Can not get responseText: "+e.message),""}}(this))||null}catch(e){t=null}e&&e(t)})),_n(a,"ready",(function(){u&&clearTimeout(u),ze(this)})),_n(a,"timeout",(function(){u&&clearTimeout(u),ze(this),e&&e(null)})),function(t,e,n,i,r){if(t.a)throw Error("[goog.net.XhrIo] Object is active with another request="+t.l+"; newUri="+e);n=n?n.toUpperCase():"GET",t.l=e,t.h="",t.P=n,t.G=!1,t.c=!0,t.a=t.O?t.O.a():Wo.a(),t.A=t.O?Zo(t.O):Zo(Wo),t.a.onreadystatechange=I(t.Ub,t);try{va(t.b,La(t,"Opening Xhr")),t.N=!0,t.a.open(n,String(e),!0),t.N=!1}catch(e){return va(t.b,La(t,"Error opening Xhr: "+e.message)),void ka(t,e)}e=i||"";var o=new Pn(t.headers);r&&function(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(p(t)||"string"==typeof t)B(t,e,void 0);else for(var n=Cn(t),i=On(t),r=i.length,o=0;o<r;o++)e.call(void 0,i[o],n&&n[o],t)}(r,(function(t,e){o.set(e,t)})),r=function(t){t:{for(var e=Aa,n=t.length,i="string"==typeof t?t.split(""):t,r=0;r<n;r++)if(r in i&&e.call(void 0,i[r],r,t)){e=r;break t}e=-1}return 0>e?null:"string"==typeof t?t.charAt(e):t[e]}(o.Y()),i=s.FormData&&e instanceof s.FormData,!X(_a,n)||r||i||o.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),o.forEach((function(t,e){this.a.setRequestHeader(e,t)}),t),t.m&&(t.a.responseType=t.m),"withCredentials"in t.a&&t.a.withCredentials!==t.R&&(t.a.withCredentials=t.R);try{Pa(t),0<t.g&&(t.u=function(t){return Yt&&se(9)&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(t.a),va(t.b,La(t,"Will abort after "+t.g+"ms if incomplete, xhr2 "+t.u)),t.u?(t.a.timeout=t.g,t.a.ontimeout=I(t.Ma,t)):t.o=kn(t.Ma,t.g,t)),va(t.b,La(t,"Sending request")),t.i=!0,t.a.send(e),t.i=!1}catch(e){va(t.b,La(t,"Send error: "+e.message)),ka(t,e)}}(a,t,n,i,r)};var hs=new wt(St,"https://apis.google.com/js/client.js?onload=%{onload}"),ls="__fcb"+Math.floor(1e6*Math.random()).toString();function fs(t){if("string"!=typeof(t=t.email)||!yi.test(t))throw new A("invalid-email")}function ps(t){"email"in t&&fs(t)}function ds(t){if(!t[ts]){if(t.mfaPendingCredential)throw new A("multi-factor-auth-required",null,mt(t));throw new A("internal-error")}}function vs(t){if(t.phoneNumber||t.temporaryProof){if(!t.phoneNumber||!t.temporaryProof)throw new A("internal-error")}else{if(!t.sessionInfo)throw new A("missing-verification-id");if(!t.code)throw new A("missing-verification-code")}}Za.prototype.o=function(t,e,n,i,r){var o=this;Qa.then((function(){window.gapi.client.setApiKey(o.c);var a=window.gapi.auth.getToken();window.gapi.auth.setToken(null),window.gapi.client.request({path:t,method:n,body:i,headers:r,authType:"none",callback:function(t){window.gapi.auth.setToken(a),e&&e(t)}})})).s((function(t){e&&e({error:{message:t&&t.message||"CORS_UNSUPPORTED"}})}))},Za.prototype.yb=function(){return ru(this,Ws,{})},Za.prototype.Ab=function(t,e){return ru(this,Bs,{idToken:t,email:e})},Za.prototype.Bb=function(t,e){return ru(this,Gs,{idToken:t,password:e})};var ms={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};function gs(t){if(!t.phoneVerificationInfo)throw new A("internal-error");if(!t.phoneVerificationInfo.sessionInfo)throw new A("missing-verification-id");if(!t.phoneVerificationInfo.code)throw new A("missing-verification-code")}function bs(t){if(!t.requestUri||!t.sessionId&&!t.postBody&&!t.pendingToken)throw new A("internal-error")}function ys(t,e){return e.oauthIdToken&&e.providerId&&0==e.providerId.indexOf("oidc.")&&!e.pendingToken&&(t.sessionId?e.nonce=t.sessionId:t.postBody&&ei(t=new $n(t.postBody),"nonce")&&(e.nonce=t.get("nonce"))),e}function ws(t){var e=null;if(t.needConfirmation?(t.code="account-exists-with-different-credential",e=Yo(t)):"FEDERATED_USER_ID_ALREADY_LINKED"==t.errorMessage?(t.code="credential-already-in-use",e=Yo(t)):"EMAIL_EXISTS"==t.errorMessage?(t.code="email-already-in-use",e=Yo(t)):t.errorMessage&&(e=ou(t.errorMessage)),e)throw e;ds(t)}function Is(t,e){return e.returnIdpCredential=!0,ru(t,Js,e)}function Ts(t,e){return e.returnIdpCredential=!0,ru(t,$s,e)}function Es(t,e){return e.returnIdpCredential=!0,e.autoCreate=!1,ru(t,Ys,e)}function Ss(t){if(!t.oobCode)throw new A("invalid-action-code")}(t=Za.prototype).Cb=function(t,e){var n={idToken:t},i=[];return dt(ms,(function(t,r){var o=e[r];null===o?i.push(t):r in e&&(n[r]=o)})),i.length&&(n.deleteAttribute=i),ru(this,Bs,n)},t.ub=function(t,e){return bt(t={requestType:"PASSWORD_RESET",email:t},e),ru(this,Vs,t)},t.vb=function(t,e){return bt(t={requestType:"EMAIL_SIGNIN",email:t},e),ru(this,Ms,t)},t.tb=function(t,e){return bt(t={requestType:"VERIFY_EMAIL",idToken:t},e),ru(this,js,t)},t.Db=function(t,e,n){return bt(t={requestType:"VERIFY_AND_CHANGE_EMAIL",idToken:t,newEmail:e},n),ru(this,Fs,t)},t.eb=function(t){return ru(this,tu,t)},t.mb=function(t,e){return ru(this,Hs,{oobCode:t,newPassword:e})},t.Qa=function(t){return ru(this,As,{oobCode:t})},t.ib=function(t){return ru(this,_s,{oobCode:t})};var _s={endpoint:"setAccountInfo",B:Ss,Z:"email",C:!0},As={endpoint:"resetPassword",B:Ss,F:function(t){var e=t.requestType;if(!e||!t.email&&"EMAIL_SIGNIN"!=e&&"VERIFY_AND_CHANGE_EMAIL"!=e)throw new A("internal-error")},C:!0},ks={endpoint:"signupNewUser",B:function(t){if(fs(t),!t.password)throw new A("weak-password")},F:ds,U:!0,C:!0},Ns={endpoint:"createAuthUri",C:!0},Os={endpoint:"deleteAccount",M:["idToken"]},Cs={endpoint:"setAccountInfo",M:["idToken","deleteProvider"],B:function(t){if(!Array.isArray(t.deleteProvider))throw new A("internal-error")}},Ps={endpoint:"emailLinkSignin",M:["email","oobCode"],B:fs,F:ds,U:!0,C:!0},Ds={endpoint:"emailLinkSignin",M:["idToken","email","oobCode"],B:fs,F:ds,U:!0},Rs={endpoint:"accounts/mfaEnrollment:finalize",M:["idToken","phoneVerificationInfo"],B:gs,F:ds,C:!0,Na:!0},Ls={endpoint:"accounts/mfaSignIn:finalize",M:["mfaPendingCredential","phoneVerificationInfo"],B:gs,F:ds,C:!0,Na:!0},xs={endpoint:"getAccountInfo"},Ms={endpoint:"getOobConfirmationCode",M:["requestType"],B:function(t){if("EMAIL_SIGNIN"!=t.requestType)throw new A("internal-error");fs(t)},Z:"email",C:!0},js={endpoint:"getOobConfirmationCode",M:["idToken","requestType"],B:function(t){if("VERIFY_EMAIL"!=t.requestType)throw new A("internal-error")},Z:"email",C:!0},Fs={endpoint:"getOobConfirmationCode",M:["idToken","newEmail","requestType"],B:function(t){if("VERIFY_AND_CHANGE_EMAIL"!=t.requestType)throw new A("internal-error")},Z:"email",C:!0},Vs={endpoint:"getOobConfirmationCode",M:["requestType"],B:function(t){if("PASSWORD_RESET"!=t.requestType)throw new A("internal-error");fs(t)},Z:"email",C:!0},Us={kb:!0,endpoint:"getProjectConfig",Tb:"GET"},qs={kb:!0,endpoint:"getRecaptchaParam",Tb:"GET",F:function(t){if(!t.recaptchaSiteKey)throw new A("internal-error")}},Hs={endpoint:"resetPassword",B:Ss,Z:"email",C:!0},Ks={endpoint:"sendVerificationCode",M:["phoneNumber","recaptchaToken"],Z:"sessionInfo",C:!0},Bs={endpoint:"setAccountInfo",M:["idToken"],B:ps,U:!0},Gs={endpoint:"setAccountInfo",M:["idToken"],B:function(t){if(ps(t),!t.password)throw new A("weak-password")},F:ds,U:!0},Ws={endpoint:"signupNewUser",F:ds,U:!0,C:!0},zs={endpoint:"accounts/mfaEnrollment:start",M:["idToken","phoneEnrollmentInfo"],B:function(t){if(!t.phoneEnrollmentInfo)throw new A("internal-error");if(!t.phoneEnrollmentInfo.phoneNumber)throw new A("missing-phone-number");if(!t.phoneEnrollmentInfo.recaptchaToken)throw new A("missing-app-credential")},F:function(t){if(!t.phoneSessionInfo||!t.phoneSessionInfo.sessionInfo)throw new A("internal-error")},C:!0,Na:!0},Xs={endpoint:"accounts/mfaSignIn:start",M:["mfaPendingCredential","mfaEnrollmentId","phoneSignInInfo"],B:function(t){if(!t.phoneSignInInfo||!t.phoneSignInInfo.recaptchaToken)throw new A("missing-app-credential")},F:function(t){if(!t.phoneResponseInfo||!t.phoneResponseInfo.sessionInfo)throw new A("internal-error")},C:!0,Na:!0},Js={endpoint:"verifyAssertion",B:bs,Xa:ys,F:ws,U:!0,C:!0},Ys={endpoint:"verifyAssertion",B:bs,Xa:ys,F:function(t){if(t.errorMessage&&"USER_NOT_FOUND"==t.errorMessage)throw new A("user-not-found");if(t.errorMessage)throw ou(t.errorMessage);ds(t)},U:!0,C:!0},$s={endpoint:"verifyAssertion",B:function(t){if(bs(t),!t.idToken)throw new A("internal-error")},Xa:ys,F:ws,U:!0},Zs={endpoint:"verifyCustomToken",B:function(t){if(!t.token)throw new A("invalid-custom-token")},F:ds,U:!0,C:!0},Qs={endpoint:"verifyPassword",B:function(t){if(fs(t),!t.password)throw new A("wrong-password")},F:ds,U:!0,C:!0},tu={endpoint:"verifyPhoneNumber",B:vs,F:ds,C:!0},eu={endpoint:"verifyPhoneNumber",B:function(t){if(!t.idToken)throw new A("internal-error");vs(t)},F:function(t){if(t.temporaryProof)throw t.code="credential-already-in-use",Yo(t);ds(t)}},nu={Gb:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",B:vs,F:ds,C:!0},iu={endpoint:"accounts/mfaEnrollment:withdraw",M:["idToken","mfaEnrollmentId"],F:function(t){if(!!t[ts]^!!t.refreshToken)throw new A("internal-error")},C:!0,Na:!0};function ru(t,e,n){if(!function(t,e){if(!e||!e.length)return!0;if(!t)return!1;for(var n=0;n<e.length;n++){var i=t[e[n]];if(null==i||""===i)return!1}return!0}(n,e.M))return Ce(new A("internal-error"));var i,r=!!e.Na,o=e.Tb||"POST";return Oe(n).then(e.B).then((function(){return e.U&&(n.returnSecureToken=!0),e.C&&t.b&&void 0===n.tenantId&&(n.tenantId=t.b),function(t,e,n,i,r,o,a){var s=qn(e+n);Vn(s,"key",t.c),a&&Vn(s,"cb",E().toString());var u="GET"==i;if(u)for(var c in r)r.hasOwnProperty(c)&&Vn(s,c,r[c]);return new Te((function(e,n){cs(t,s.toString(),(function(t){t?t.error?n(au(t,o||{})):e(t):n(new A("network-request-failed"))}),i,u?void 0:oi(Vi(r)),t.a,t.m.get())}))}(t,r?t.i:t.h,e.endpoint,o,n,e.Gb,e.kb||!1)})).then((function(t){return i=t,e.Xa?e.Xa(n,i):i})).then(e.F).then((function(){if(!e.Z)return i;if(!(e.Z in i))throw new A("internal-error");return i[e.Z]}))}function ou(t){return au({error:{errors:[{message:t}],code:400,message:t}})}function au(t,e){var n=(t.error&&t.error.errors&&t.error.errors[0]||{}).reason||"",i={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(n=i[n]?new A(i[n]):null)return n;for(var r in n=t.error&&t.error.message||"",bt(i={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_OR_INVALID_NONCE:"missing-or-invalid-nonce",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",INVALID_PROVIDER_ID:"invalid-provider-id",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",REJECTED_CREDENTIAL:"rejected-credential",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_DYNAMIC_LINK_DOMAIN:"invalid-dynamic-link-domain",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash",UNSUPPORTED_TENANT_OPERATION:"unsupported-tenant-operation",INVALID_TENANT_ID:"invalid-tenant-id",TENANT_ID_MISMATCH:"tenant-id-mismatch",ADMIN_ONLY_OPERATION:"admin-restricted-operation",INVALID_MFA_PENDING_CREDENTIAL:"invalid-multi-factor-session",MFA_ENROLLMENT_NOT_FOUND:"multi-factor-info-not-found",MISSING_MFA_PENDING_CREDENTIAL:"missing-multi-factor-session",MISSING_MFA_ENROLLMENT_ID:"missing-multi-factor-info",EMAIL_CHANGE_NEEDS_VERIFICATION:"email-change-needs-verification",SECOND_FACTOR_EXISTS:"second-factor-already-in-use",SECOND_FACTOR_LIMIT_EXCEEDED:"maximum-second-factor-count-exceeded",UNSUPPORTED_FIRST_FACTOR:"unsupported-first-factor",UNVERIFIED_EMAIL:"unverified-email"},e||{}),e=(e=n.match(/^[^\s]+\s*:\s*([\s\S]*)$/))&&1<e.length?e[1]:void 0,i)if(0===n.indexOf(r))return new A(i[r],e);return!e&&t&&(e=Fi(t)),new A("internal-error",e)}function su(t){this.b=t,this.a=null,this.qb=function(t){return(lu||(lu=new Te((function(t,e){function n(){Ki(),Di("gapi.load")("gapi.iframes",{callback:t,ontimeout:function(){Ki(),e(Error("Network Error"))},timeout:cu.get()})}if(Di("gapi.iframes.Iframe"))t();else if(Di("gapi.load"))n();else{var i="__iframefcb"+Math.floor(1e6*Math.random()).toString();s[i]=function(){Di("gapi.load")?n():e(Error("Network Error"))},Oe(Ga(i=Nt(uu,{onload:i}))).s((function(){e(Error("Network Error"))}))}})).s((function(t){throw lu=null,t})))).then((function(){return new Te((function(e,n){Di("gapi.iframes.getContext")().open({where:document.body,url:t.b,messageHandlersFilter:Di("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},(function(i){function r(){clearTimeout(o),e()}t.a=i,t.a.restyle({setHideOnLeave:!1});var o=setTimeout((function(){n(Error("Network Error"))}),hu.get());i.ping(r).then(r,(function(){n(Error("Network Error"))}))}))}))}))}(this)}var uu=new wt(St,"https://apis.google.com/js/api.js?onload=%{onload}"),cu=new Bi(3e4,6e4),hu=new Bi(5e3,15e3),lu=null;function fu(t,e,n,i){this.l=t,this.h=e,this.i=n,this.g=i,this.f=null,t=this.g?Hn((t=qn(this.g.url)).f,t.a,t.g,"/emulator/auth/iframe"):Hn("https",this.l,null,"/__/auth/iframe"),this.a=t,Vn(this.a,"apiKey",this.h),Vn(this.a,"appName",this.i),this.b=null,this.c=[]}function pu(t,e,n,i,r,o){this.u=t,this.o=e,this.c=n,this.v=i,this.m=o,this.i=this.g=this.l=null,this.a=r,this.h=this.f=null}function du(t){try{return Z.app(t).auth().Ga()}catch(t){return[]}}function vu(t,e,n,i,r,o){this.o=t,this.g=e,this.b=n,this.f=o,this.c=i||null,this.i=r||null,this.l=this.u=this.A=null,this.h=[],this.v=this.a=null}function mu(t){var e=fi();return function(t){return ru(t,Us,{}).then((function(t){return t.authorizedDomains||[]}))}(t).then((function(t){t:{var n=qn(e),i=n.f;n=n.a;for(var r=0;r<t.length;r++){var o=t[r],a=n,s=i;if(0==o.indexOf("chrome-extension://")?a=qn(o).a==a&&"chrome-extension"==s:"http"!=s&&"https"!=s?a=!1:bi.test(o)?a=a==o:(o=o.split(".").join("\\."),a=new RegExp("^(.+\\."+o+"|"+o+")$","i").test(a)),a){t=!0;break t}}t=!1}if(!t)throw new Xo(fi())}))}function gu(t){return t.v||(t.v=wi().then((function(){if(!t.u){var e=t.c,n=t.i,i=du(t.b),r=new fu(t.o,t.g,t.b,t.f);r.f=e,r.b=n,r.c=Q(i||[]),t.u=r.toString()}t.m=new su(t.u),function(t){if(!t.m)throw Error("IfcHandler must be initialized!");!function(t,e){t.qb.then((function(){t.a.register("authEvent",e,Di("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}(t.m,(function(e){var n={};if(e&&e.authEvent){var i=!1;for(e=Bo(e.authEvent),n=0;n<t.h.length;n++)i=t.h[n](e)||i;return(n={}).status=i?"ACK":"ERROR",Oe(n)}return n.status="ERROR",Oe(n)}))}(t)}))),t.v}function bu(t){return t.l||(t.A=t.c?Ci(t.c,du(t.b)):null,t.l=new Za(t.g,D(t.i),t.A),t.f&&as(t.l,t.f)),t.l}function yu(t,e,n,i,r,o,a,s,u,c,h,l){return(t=new pu(t,e,n,i,r,l)).l=o,t.g=a,t.i=s,t.b=mt(u||null),t.f=c,t.xb(h).toString()}function wu(t){if(this.a=t||Z.INTERNAL.reactNative&&Z.INTERNAL.reactNative.AsyncStorage,!this.a)throw new A("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage"}function Iu(t){this.b=t,this.a={},this.f=I(this.c,this)}fu.prototype.toString=function(){return this.f?Vn(this.a,"v",this.f):ti(this.a.b,"v"),this.b?Vn(this.a,"eid",this.b):ti(this.a.b,"eid"),this.c.length?Vn(this.a,"fw",this.c.join(",")):ti(this.a.b,"fw"),this.a.toString()},pu.prototype.xb=function(t){return this.h=t,this},pu.prototype.toString=function(){if(this.m){var t=qn(this.m.url);t=Hn(t.f,t.a,t.g,"/emulator/auth/handler")}else t=Hn("https",this.u,null,"/__/auth/handler");if(Vn(t,"apiKey",this.o),Vn(t,"appName",this.c),Vn(t,"authType",this.v),this.a.isOAuthProvider){var e=this.a;try{var n=Z.app(this.c).auth().ka()}catch(t){n=null}for(var i in e.nb=n,Vn(t,"providerId",this.a.providerId),e=Vi((n=this.a).Hb))e[i]=e[i].toString();i=n.Pc,e=mt(e);for(var r=0;r<i.length;r++){var o=i[r];o in e&&delete e[o]}n.ob&&n.nb&&!e[n.ob]&&(e[n.ob]=n.nb),vt(e)||Vn(t,"customParameters",Fi(e))}if("function"==typeof this.a.Pb&&(n=this.a.Pb()).length&&Vn(t,"scopes",n.join(",")),this.l?Vn(t,"redirectUrl",this.l):ti(t.b,"redirectUrl"),this.g?Vn(t,"eventId",this.g):ti(t.b,"eventId"),this.i?Vn(t,"v",this.i):ti(t.b,"v"),this.b)for(var a in this.b)this.b.hasOwnProperty(a)&&!Un(t,a)&&Vn(t,a,this.b[a]);return this.h?Vn(t,"tid",this.h):ti(t.b,"tid"),this.f?Vn(t,"eid",this.f):ti(t.b,"eid"),(a=du(this.c)).length&&Vn(t,"fw",a.join(",")),t.toString()},(t=vu.prototype).Nb=function(t,e,n){var i=new A("popup-closed-by-user"),r=new A("web-storage-unsupported"),o=this,a=!1;return this.la().then((function(){(function(t){var e={type:"webStorageSupport"};return gu(t).then((function(){return function(t,e){return t.qb.then((function(){return new Te((function(n){t.a.send(e.type,e,n,Di("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}))}(t.m,e)})).then((function(t){if(t&&t.length&&void 0!==t[0].webStorageSupport)return t[0].webStorageSupport;throw Error()}))})(o).then((function(n){n||(t&&mi(t),e(r),a=!0)}))})).s((function(){})).then((function(){if(!a)return function(t){return new Te((function(e){return function n(){Nn(2e3).then((function(){if(t&&!t.closed)return n();e()}))}()}))}(t)})).then((function(){if(!a)return Nn(n).then((function(){e(i)}))}))},t.Wb=function(){var t=Pi();return!ji(t)&&!Hi(t)},t.Sb=function(){return!1},t.Lb=function(t,e,n,i,r,o,a,s){if(!t)return Ce(new A("popup-blocked"));if(a&&!ji())return this.la().s((function(e){mi(t),r(e)})),i(),Oe();this.a||(this.a=mu(bu(this)));var u=this;return this.a.then((function(){var e=u.la().s((function(e){throw mi(t),r(e),e}));return i(),e})).then((function(){Ho(n),a||pi(yu(u.o,u.g,u.b,e,n,null,o,u.c,void 0,u.i,s,u.f),t)})).s((function(t){throw"auth/network-request-failed"==t.code&&(u.a=null),t}))},t.Mb=function(t,e,n,i){this.a||(this.a=mu(bu(this)));var r=this;return this.a.then((function(){Ho(e),pi(yu(r.o,r.g,r.b,t,e,fi(),n,r.c,void 0,r.i,i,r.f))})).s((function(t){throw"auth/network-request-failed"==t.code&&(r.a=null),t}))},t.la=function(){var t=this;return gu(this).then((function(){return t.m.qb})).s((function(){throw t.a=null,new A("network-request-failed")}))},t.Zb=function(){return!0},t.Ea=function(t){this.h.push(t)},t.Ra=function(t){Y(this.h,(function(e){return e==t}))},(t=wu.prototype).get=function(t){return Oe(this.a.getItem(t)).then((function(t){return t&&Ui(t)}))},t.set=function(t,e){return Oe(this.a.setItem(t,Fi(e)))},t.T=function(t){return Oe(this.a.removeItem(t))},t.ca=function(){},t.ia=function(){};var Tu,Eu=[];function Su(t,e,n){vt(t.a)&&t.b.addEventListener("message",t.f),void 0===t.a[e]&&(t.a[e]=[]),t.a[e].push(n)}function _u(t){this.a=t}function Au(t){this.c=t,this.b=!1,this.a=[]}function ku(t,e,n,i){var r,o,a,s,u=n||{},c=null;if(t.b)return Ce(Error("connection_unavailable"));var h=i?800:50,l="undefined"!=typeof MessageChannel?new MessageChannel:null;return new Te((function(n,i){l?(r=Math.floor(Math.random()*Math.pow(10,20)).toString(),l.port1.start(),a=setTimeout((function(){i(Error("unsupported_event"))}),h),c={messageChannel:l,onMessage:o=function(t){t.data.eventId===r&&("ack"===t.data.status?(clearTimeout(a),s=setTimeout((function(){i(Error("timeout"))}),3e3)):"done"===t.data.status?(clearTimeout(s),void 0!==t.data.response?n(t.data.response):i(Error("unknown_error"))):(clearTimeout(a),clearTimeout(s),i(Error("invalid_response"))))}},t.a.push(c),l.port1.addEventListener("message",o),t.c.postMessage({eventType:e,eventId:r,data:u},[l.port2])):i(Error("connection_unavailable"))})).then((function(e){return Nu(t,c),e})).s((function(e){throw Nu(t,c),e}))}function Nu(t,e){if(e){var n=e.messageChannel,i=e.onMessage;n&&(n.port1.removeEventListener("message",i),n.port1.close()),Y(t.a,(function(t){return t==e}))}}function Ou(){if(!Ru())throw new A("web-storage-unsupported");this.c={},this.a=[],this.b=0,this.v=s.indexedDB,this.type="indexedDB",this.g=this.m=this.f=this.l=null,this.o=!1,this.h=null;var t=this;Ei()&&self?(this.m=function(){var t=Ei()?self:null;if(B(Eu,(function(n){n.b==t&&(e=n)})),!e){var e=new Iu(t);Eu.push(e)}return e}(),Su(this.m,"keyChanged",(function(e,n){return Fu(t).then((function(e){return 0<e.length&&B(t.a,(function(t){t(e)})),{keyProcessed:X(e,n.key)}}))})),Su(this.m,"ping",(function(){return Oe(["keyChanged"])}))):function(){var t=s.navigator;return t&&t.serviceWorker?Oe().then((function(){return t.serviceWorker.ready})).then((function(t){return t.active||null})).s((function(){return null})):Oe(null)}().then((function(e){(t.h=e)&&(t.g=new Au(new _u(e)),ku(t.g,"ping",null,!0).then((function(e){e[0].fulfilled&&X(e[0].value,"keyChanged")&&(t.o=!0)})).s((function(){})))}))}function Cu(t){return new Te((function(e,n){var i=t.v.open("firebaseLocalStorageDb",1);i.onerror=function(t){try{t.preventDefault()}catch(t){}n(Error(t.target.error))},i.onupgradeneeded=function(t){t=t.target.result;try{t.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"})}catch(t){n(t)}},i.onsuccess=function(i){(i=i.target.result).objectStoreNames.contains("firebaseLocalStorage")?e(i):function(t){return new Te((function(e,n){var i=t.v.deleteDatabase("firebaseLocalStorageDb");i.onsuccess=function(){e()},i.onerror=function(t){n(Error(t.target.error))}}))}(t).then((function(){return Cu(t)})).then((function(t){e(t)})).s((function(t){n(t)}))}}))}function Pu(t){return t.i||(t.i=Cu(t)),t.i}function Du(t,e){var n=0;return new Te((function i(r,o){Pu(t).then(e).then(r).s((function(e){if(!(3<++n))return Pu(t).then((function(e){return e.close(),t.i=void 0,i(r,o)}));o(e)}))}))}function Ru(){try{return!!s.indexedDB}catch(t){return!1}}function Lu(t){return t.objectStore("firebaseLocalStorage")}function xu(t,e){return t.transaction(["firebaseLocalStorage"],e?"readwrite":"readonly")}function Mu(t){return new Te((function(e,n){t.onsuccess=function(t){t&&t.target?e(t.target.result):e()},t.onerror=function(t){n(t.target.error)}}))}function ju(t,e){return t.g&&t.h&&function(){var t=s.navigator;return t&&t.serviceWorker&&t.serviceWorker.controller||null}()===t.h?ku(t.g,"keyChanged",{key:e},t.o).then((function(){})).s((function(){})):Oe()}function Fu(t){return Pu(t).then((function(t){var e=Lu(xu(t,!1));return e.getAll?Mu(e.getAll()):new Te((function(t,n){var i=[],r=e.openCursor();r.onsuccess=function(e){(e=e.target.result)?(i.push(e.value),e.continue()):t(i)},r.onerror=function(t){n(t.target.error)}}))})).then((function(e){var n={},i=[];if(0==t.b){for(i=0;i<e.length;i++)n[e[i].fbase_key]=e[i].value;i=di(t.c,n),t.c=n}return i}))}function Vu(t){t.l&&t.l.cancel("STOP_EVENT"),t.f&&(clearTimeout(t.f),t.f=null)}function Uu(t){var e=this,n=null;this.a=[],this.type="indexedDB",this.c=t,this.b=Oe().then((function(){if(Ru()){var t=qi(),i="__sak"+t;return Tu||(Tu=new Ou),(n=Tu).set(i,t).then((function(){return n.get(i)})).then((function(e){if(e!==t)throw Error("indexedDB not supported!");return n.T(i)})).then((function(){return n})).s((function(){return e.c}))}return e.c})).then((function(t){return e.type=t.type,t.ca((function(t){B(e.a,(function(e){e(t)}))})),t}))}function qu(){this.a={},this.type="inMemory"}function Hu(){if(!function(){var t="Node"==Si();if(!(t=Ku()||t&&Z.INTERNAL.node&&Z.INTERNAL.node.localStorage))return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}}()){if("Node"==Si())throw new A("internal-error","The LocalStorage compatibility library was not found.");throw new A("web-storage-unsupported")}this.a=Ku()||Z.INTERNAL.node.localStorage,this.type="localStorage"}function Ku(){try{var t=s.localStorage,e=qi();return t&&(t.setItem(e,"1"),t.removeItem(e)),t}catch(t){return null}}function Bu(){this.type="nullStorage"}function Gu(){if(!function(){var t="Node"==Si();if(!(t=Wu()||t&&Z.INTERNAL.node&&Z.INTERNAL.node.sessionStorage))return!1;try{return t.setItem("__sak","1"),t.removeItem("__sak"),!0}catch(t){return!1}}()){if("Node"==Si())throw new A("internal-error","The SessionStorage compatibility library was not found.");throw new A("web-storage-unsupported")}this.a=Wu()||Z.INTERNAL.node.sessionStorage,this.type="sessionStorage"}function Wu(){try{var t=s.sessionStorage,e=qi();return t&&(t.setItem(e,"1"),t.removeItem(e)),t}catch(t){return null}}function zu(){var t={};t.Browser=Yu,t.Node=$u,t.ReactNative=Zu,t.Worker=Qu,this.a=t[Si()]}Iu.prototype.c=function(t){var e=t.data.eventType,n=t.data.eventId,i=this.a[e];if(i&&0<i.length){t.ports[0].postMessage({status:"ack",eventId:n,eventType:e,response:null});var r=[];B(i,(function(e){r.push(Oe().then((function(){return e(t.origin,t.data.data)})))})),De(r).then((function(i){var r=[];B(i,(function(t){r.push({fulfilled:t.Ob,value:t.value,reason:t.reason?t.reason.message:void 0})})),B(r,(function(t){for(var e in t)void 0===t[e]&&delete t[e]})),t.ports[0].postMessage({status:"done",eventId:n,eventType:e,response:r})}))}},_u.prototype.postMessage=function(t,e){this.a.postMessage(t,e)},Au.prototype.close=function(){for(;0<this.a.length;)Nu(this,this.a[0]);this.b=!0},(t=Ou.prototype).set=function(t,e){var n=this,i=!1;return Du(this,(function(e){return Mu((e=Lu(xu(e,!0))).get(t))})).then((function(r){return Du(n,(function(o){if(o=Lu(xu(o,!0)),r)return r.value=e,Mu(o.put(r));n.b++,i=!0;var a={};return a.fbase_key=t,a.value=e,Mu(o.add(a))}))})).then((function(){return n.c[t]=e,ju(n,t)})).na((function(){i&&n.b--}))},t.get=function(t){return Du(this,(function(e){return Mu(Lu(xu(e,!1)).get(t))})).then((function(t){return t&&t.value}))},t.T=function(t){var e=this,n=!1;return Du(this,(function(i){return n=!0,e.b++,Mu(Lu(xu(i,!0)).delete(t))})).then((function(){return delete e.c[t],ju(e,t)})).na((function(){n&&e.b--}))},t.ca=function(t){0==this.a.length&&function(t){Vu(t),function e(){t.f=setTimeout((function(){t.l=Fu(t).then((function(e){0<e.length&&B(t.a,(function(t){t(e)}))})).then((function(){e()})).s((function(t){"STOP_EVENT"!=t.message&&e()}))}),800)}()}(this),this.a.push(t)},t.ia=function(t){Y(this.a,(function(e){return e==t})),0==this.a.length&&Vu(this)},(t=Uu.prototype).get=function(t){return this.b.then((function(e){return e.get(t)}))},t.set=function(t,e){return this.b.then((function(n){return n.set(t,e)}))},t.T=function(t){return this.b.then((function(e){return e.T(t)}))},t.ca=function(t){this.a.push(t)},t.ia=function(t){Y(this.a,(function(e){return e==t}))},(t=qu.prototype).get=function(t){return Oe(this.a[t])},t.set=function(t,e){return this.a[t]=e,Oe()},t.T=function(t){return delete this.a[t],Oe()},t.ca=function(){},t.ia=function(){},(t=Hu.prototype).get=function(t){var e=this;return Oe().then((function(){return Ui(e.a.getItem(t))}))},t.set=function(t,e){var n=this;return Oe().then((function(){var i=Fi(e);null===i?n.T(t):n.a.setItem(t,i)}))},t.T=function(t){var e=this;return Oe().then((function(){e.a.removeItem(t)}))},t.ca=function(t){s.window&&ln(s.window,"storage",t)},t.ia=function(t){s.window&&dn(s.window,"storage",t)},(t=Bu.prototype).get=function(){return Oe(null)},t.set=function(){return Oe()},t.T=function(){return Oe()},t.ca=function(){},t.ia=function(){},(t=Gu.prototype).get=function(t){var e=this;return Oe().then((function(){return Ui(e.a.getItem(t))}))},t.set=function(t,e){var n=this;return Oe().then((function(){var i=Fi(e);null===i?n.T(t):n.a.setItem(t,i)}))},t.T=function(t){var e=this;return Oe().then((function(){e.a.removeItem(t)}))},t.ca=function(){},t.ia=function(){};var Xu,Ju,Yu={D:Hu,ab:Gu},$u={D:Hu,ab:Gu},Zu={D:wu,ab:Bu},Qu={D:Hu,ab:Bu},tc={qd:"local",NONE:"none",sd:"session"};function ec(){var t=!(Hi(Pi())||!Ti()),e=ji(),n=Ri();this.v=t,this.h=e,this.l=n,this.a={},Xu||(Xu=new zu),t=Xu;try{this.g=!li()&&Xi()||!s.indexedDB?new t.a.D:new Uu(Ei()?new qu:new t.a.D)}catch(t){this.g=new qu,this.h=!0}try{this.i=new t.a.ab}catch(t){this.i=new qu}this.m=new qu,this.f=I(this.Xb,this),this.b={}}function nc(){return Ju||(Ju=new ec),Ju}function ic(t,e){switch(e){case"session":return t.i;case"none":return t.m;default:return t.g}}function rc(t,e){return"firebase:"+t.name+(e?":"+e:"")}function oc(t,e,n){return n=rc(e,n),"local"==e.D&&(t.b[n]=null),ic(t,e.D).T(n)}function ac(t){t.c&&(clearInterval(t.c),t.c=null)}function sc(t){this.a=t,this.b=nc()}(t=ec.prototype).get=function(t,e){return ic(this,t.D).get(rc(t,e))},t.set=function(t,e,n){var i=rc(t,n),r=this,o=ic(this,t.D);return o.set(i,e).then((function(){return o.get(i)})).then((function(e){"local"==t.D&&(r.b[i]=e)}))},t.addListener=function(t,e,n){t=rc(t,e),this.l&&(this.b[t]=s.localStorage.getItem(t)),vt(this.a)&&(ic(this,"local").ca(this.f),this.h||(li()||!Xi())&&s.indexedDB||!this.l||function(t){ac(t),t.c=setInterval((function(){for(var e in t.a){var n=s.localStorage.getItem(e),i=t.b[e];n!=i&&(t.b[e]=n,n=new Qe({type:"storage",key:e,target:window,oldValue:i,newValue:n,a:!0}),t.Xb(n))}}),1e3)}(this)),this.a[t]||(this.a[t]=[]),this.a[t].push(n)},t.removeListener=function(t,e,n){t=rc(t,e),this.a[t]&&(Y(this.a[t],(function(t){return t==n})),0==this.a[t].length&&delete this.a[t]),vt(this.a)&&(ic(this,"local").ia(this.f),ac(this))},t.Xb=function(t){if(t&&t.g){var e=t.a.key;if(null==e)for(var n in this.a){var i=this.b[n];void 0===i&&(i=null);var r=s.localStorage.getItem(n);r!==i&&(this.b[n]=r,this.lb(n))}else if(0==e.indexOf("firebase:")&&this.a[e]){if(void 0!==t.a.a?ic(this,"local").ia(this.f):ac(this),this.v)if(n=s.localStorage.getItem(e),(i=t.a.newValue)!==n)null!==i?s.localStorage.setItem(e,i):s.localStorage.removeItem(e);else if(this.b[e]===i&&void 0===t.a.a)return;var o=this;n=function(){void 0===t.a.a&&o.b[e]===s.localStorage.getItem(e)||(o.b[e]=s.localStorage.getItem(e),o.lb(e))},Yt&&ue&&10==ue&&s.localStorage.getItem(e)!==t.a.newValue&&t.a.newValue!==t.a.oldValue?setTimeout(n,10):n()}}else B(t,I(this.lb,this))},t.lb=function(t){this.a[t]&&B(this.a[t],(function(t){t()}))};var uc,cc={name:"authEvent",D:"local"};function hc(){this.a=nc()}function lc(t,e){this.b=fc,this.f=s.Uint8Array?new Uint8Array(this.b):Array(this.b),this.g=this.c=0,this.a=[],this.i=t,this.h=e,this.l=s.Int32Array?new Int32Array(64):Array(64),void 0===uc&&(uc=s.Int32Array?new Int32Array(yc):yc),this.reset()}S(lc,(function(){this.b=-1}));for(var fc=64,pc=fc-1,dc=[],vc=0;vc<pc;vc++)dc[vc]=0;var mc=$(128,dc);function gc(t){for(var e=t.f,n=t.l,i=0,r=0;r<e.length;)n[i++]=e[r]<<24|e[r+1]<<16|e[r+2]<<8|e[r+3],r=4*i;for(e=16;64>e;e++){r=0|n[e-15],i=0|n[e-2];var o=(0|n[e-16])+((r>>>7|r<<25)^(r>>>18|r<<14)^r>>>3)|0,a=(0|n[e-7])+((i>>>17|i<<15)^(i>>>19|i<<13)^i>>>10)|0;n[e]=o+a|0}i=0|t.a[0],r=0|t.a[1];var s=0|t.a[2],u=0|t.a[3],c=0|t.a[4],h=0|t.a[5],l=0|t.a[6];for(o=0|t.a[7],e=0;64>e;e++){var f=((i>>>2|i<<30)^(i>>>13|i<<19)^(i>>>22|i<<10))+(i&r^i&s^r&s)|0;a=(o=o+((c>>>6|c<<26)^(c>>>11|c<<21)^(c>>>25|c<<7))|0)+((a=(a=c&h^~c&l)+(0|uc[e])|0)+(0|n[e])|0)|0,o=l,l=h,h=c,c=u+a|0,u=s,s=r,r=i,i=a+f|0}t.a[0]=t.a[0]+i|0,t.a[1]=t.a[1]+r|0,t.a[2]=t.a[2]+s|0,t.a[3]=t.a[3]+u|0,t.a[4]=t.a[4]+c|0,t.a[5]=t.a[5]+h|0,t.a[6]=t.a[6]+l|0,t.a[7]=t.a[7]+o|0}function bc(t,e,n){void 0===n&&(n=e.length);var i=0,r=t.c;if("string"==typeof e)for(;i<n;)t.f[r++]=e.charCodeAt(i++),r==t.b&&(gc(t),r=0);else{if(!p(e))throw Error("message must be string or array");for(;i<n;){var o=e[i++];if(!("number"==typeof o&&0<=o&&255>=o&&o==(0|o)))throw Error("message must be a byte array");t.f[r++]=o,r==t.b&&(gc(t),r=0)}}t.c=r,t.g+=n}lc.prototype.reset=function(){this.g=this.c=0,this.a=s.Int32Array?new Int32Array(this.h):Q(this.h)};var yc=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function wc(){lc.call(this,8,Ic)}S(wc,lc);var Ic=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function Tc(t,e,n,i,r,o){this.m=t,this.i=e,this.l=n,this.v=i||null,this.u=r||null,this.o=o,this.h=e+":"+n,this.A=new hc,this.g=new sc(this.h),this.f=null,this.b=[],this.a=this.c=null}function Ec(t){return new A("invalid-cordova-configuration",t)}function Sc(t,e){for(var n=0;n<t.b.length;n++)try{t.b[n](e)}catch(t){}}function _c(t){return t.f||(t.f=t.la().then((function(){return new Te((function(e){t.Ea((function n(i){return e(i),t.Ra(n),!1})),function(t){function e(e){i=!0,r&&r.cancel(),Ac(t).then((function(i){var r=n;if(i&&e&&e.url){var o=null;-1!=(r=so(e.url)).indexOf("/__/auth/callback")&&(o=(o="object"==typeof(o=Ui(Un(o=qn(r),"firebaseError")||null))?k(o):null)?new Ko(i.c,i.b,null,null,o,null,i.S()):new Ko(i.c,i.b,r,i.f,null,null,i.S())),r=o||n}Sc(t,r)}))}var n=new Ko("unknown",null,null,null,new A("no-auth-event")),i=!1,r=Nn(500).then((function(){return Ac(t).then((function(){i||Sc(t,n)}))})),o=s.handleOpenURL;s.handleOpenURL=function(t){if(0==t.toLowerCase().indexOf(Di("BuildInfo.packageName",s).toLowerCase()+"://")&&e({url:t}),"function"==typeof o)try{o(t)}catch(t){console.error(t)}},zo||(zo=new Go),function(t){var e=zo;e.a.push(t),e.b||(e.b=function(t){for(var n=0;n<e.a.length;n++)e.a[n](t)},"function"==typeof(t=Di("universalLinks.subscribe",s))&&t(null,e.b))}(e)}(t)}))}))),t.f}function Ac(t){var e=null;return function(t){return t.b.get(cc,t.a).then((function(t){return Bo(t)}))}(t.g).then((function(n){return e=n,oc((n=t.g).b,cc,n.a)})).then((function(){return e}))}function kc(t){this.a=t,this.b=nc()}(t=Tc.prototype).la=function(){return this.Ia?this.Ia:this.Ia=(Ii(void 0)?wi().then((function(){return new Te((function(t,e){var n=s.document,i=setTimeout((function(){e(Error("Cordova framework is not ready."))}),1e3);n.addEventListener("deviceready",(function(){clearTimeout(i),t()}),!1)}))})):Ce(Error("Cordova must run in an Android or iOS file scheme."))).then((function(){if("function"!=typeof Di("universalLinks.subscribe",s))throw Ec("cordova-universal-links-plugin-fix is not installed");if(void 0===Di("BuildInfo.packageName",s))throw Ec("cordova-plugin-buildinfo is not installed");if("function"!=typeof Di("cordova.plugins.browsertab.openUrl",s))throw Ec("cordova-plugin-browsertab is not installed");if("function"!=typeof Di("cordova.InAppBrowser.open",s))throw Ec("cordova-plugin-inappbrowser is not installed")}),(function(){throw new A("cordova-not-ready")}))},t.Nb=function(t,e){return e(new A("operation-not-supported-in-this-environment")),Oe()},t.Lb=function(){return Ce(new A("operation-not-supported-in-this-environment"))},t.Zb=function(){return!1},t.Wb=function(){return!0},t.Sb=function(){return!0},t.Mb=function(t,e,n,i){if(this.c)return Ce(new A("redirect-operation-pending"));var r=this,o=s.document,a=null,u=null,c=null,h=null;return this.c=Oe().then((function(){return Ho(e),_c(r)})).then((function(){return function(t,e,n,i,r){var o=function(){for(var t=20,e=[];0<t;)e.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),t--;return e.join("")}(),a=new Ko(e,i,null,o,new A("no-auth-event"),null,r),u=Di("BuildInfo.packageName",s);if("string"!=typeof u)throw new A("invalid-cordova-configuration");var c=Di("BuildInfo.displayName",s),h={};if(Pi().toLowerCase().match(/iphone|ipad|ipod/))h.ibi=u;else{if(!Pi().toLowerCase().match(/android/))return Ce(new A("operation-not-supported-in-this-environment"));h.apn=u}c&&(h.appDisplayName=c),o=function(t){var e=new wc;bc(e,t),t=[];var n=8*e.g;56>e.c?bc(e,mc,56-e.c):bc(e,mc,e.b-(e.c-56));for(var i=63;56<=i;i--)e.f[i]=255&n,n/=256;for(gc(e),i=n=0;i<e.i;i++)for(var r=24;0<=r;r-=8)t[n++]=e.a[i]>>r&255;return function(t){return W(t,(function(t){return 1<(t=t.toString(16)).length?t:"0"+t})).join("")}(t)}(o),h.sessionId=o;var l=yu(t.m,t.i,t.l,e,n,null,i,t.v,h,t.u,r,t.o);return t.la().then((function(){var e=t.h;return t.A.a.set(cc,a.w(),e)})).then((function(){var e=Di("cordova.plugins.browsertab.isAvailable",s);if("function"!=typeof e)throw new A("invalid-cordova-configuration");var n=null;e((function(e){if(e){if("function"!=typeof(n=Di("cordova.plugins.browsertab.openUrl",s)))throw new A("invalid-cordova-configuration");n(l)}else{if("function"!=typeof(n=Di("cordova.InAppBrowser.open",s)))throw new A("invalid-cordova-configuration");e=Pi(),t.a=n(l,e.match(/(iPad|iPhone|iPod).*OS 7_\d/i)||e.match(/(iPad|iPhone|iPod).*OS 8_\d/i)?"_blank":"_system","location=yes")}}))}))}(r,t,e,n,i)})).then((function(){return new Te((function(t,e){u=function(){var e=Di("cordova.plugins.browsertab.close",s);return t(),"function"==typeof e&&e(),r.a&&"function"==typeof r.a.close&&(r.a.close(),r.a=null),!1},r.Ea(u),c=function(){a||(a=Nn(2e3).then((function(){e(new A("redirect-cancelled-by-user"))})))},h=function(){Gi()&&c()},o.addEventListener("resume",c,!1),Pi().toLowerCase().match(/android/)||o.addEventListener("visibilitychange",h,!1)})).s((function(t){return Ac(r).then((function(){throw t}))}))})).na((function(){c&&o.removeEventListener("resume",c,!1),h&&o.removeEventListener("visibilitychange",h,!1),a&&a.cancel(),u&&r.Ra(u),r.c=null}))},t.Ea=function(t){this.b.push(t),_c(this).s((function(e){"auth/invalid-cordova-configuration"===e.code&&(e=new Ko("unknown",null,null,null,new A("no-auth-event")),t(e))}))},t.Ra=function(t){Y(this.b,(function(e){return e==t}))};var Nc={name:"pendingRedirect",D:"session"};function Oc(t){return oc(t.b,Nc,t.a)}function Cc(t,e,n,i){this.i={},this.u=0,this.O=t,this.m=e,this.v=n,this.G=i,this.h=[],this.f=!1,this.l=I(this.o,this),this.b=new Gc,this.A=new Yc,this.g=new kc(Kc(this.m,this.v)),this.c={},this.c.unknown=this.b,this.c.signInViaRedirect=this.b,this.c.linkViaRedirect=this.b,this.c.reauthViaRedirect=this.b,this.c.signInViaPopup=this.A,this.c.linkViaPopup=this.A,this.c.reauthViaPopup=this.A,this.a=Pc(this.O,this.m,this.v,N,this.G)}function Pc(t,e,n,i,r){var o=Z.SDK_VERSION||null;return Ii()?new Tc(t,e,n,o,i,r):new vu(t,e,n,o,i,r)}function Dc(t){t.f||(t.f=!0,t.a.Ea(t.l));var e=t.a;return t.a.la().s((function(n){throw t.a==e&&t.reset(),n}))}function Rc(t){t.a.Wb()&&Dc(t).s((function(e){var n=new Ko("unknown",null,null,null,new A("operation-not-supported-in-this-environment"));Vc(e)&&t.o(n)})),t.a.Sb()||Wc(t.b)}function Lc(t,e){X(t.h,e)||t.h.push(e),t.f||function(t){return t.b.get(Nc,t.a).then((function(t){return"pending"==t}))}(t.g).then((function(e){e?Oc(t.g).then((function(){Dc(t).s((function(e){var n=new Ko("unknown",null,null,null,new A("operation-not-supported-in-this-environment"));Vc(e)&&t.o(n)}))})):Rc(t)})).s((function(){Rc(t)}))}function xc(t,e){Y(t.h,(function(t){return t==e}))}Cc.prototype.reset=function(){this.f=!1,this.a.Ra(this.l),this.a=Pc(this.O,this.m,this.v,null,this.G),this.i={}},Cc.prototype.o=function(t){if(!t)throw new A("invalid-auth-event");if(6e5<=E()-this.u&&(this.i={},this.u=0),t&&t.getUid()&&this.i.hasOwnProperty(t.getUid()))return!1;for(var e=!1,n=0;n<this.h.length;n++){var i=this.h[n];if(i.Eb(t.c,t.b)){(e=this.c[t.c])&&(e.h(t,i),t&&(t.f||t.b)&&(this.i[t.getUid()]=!0,this.u=E())),e=!0;break}}return Wc(this.b),e};var Mc=new Bi(2e3,1e4),jc=new Bi(3e4,6e4);function Fc(t,e,n,i,r,o,a){return t.a.Lb(e,n,i,(function(){t.f||(t.f=!0,t.a.Ea(t.l))}),(function(){t.reset()}),r,o,a)}function Vc(t){return!(!t||"auth/cordova-not-ready"!=t.code)}function Uc(t,e,n,i,r){var o;return function(t){return t.b.set(Nc,"pending",t.a)}(t.g).then((function(){return t.a.Mb(e,n,i,r).s((function(e){if(Vc(e))throw new A("operation-not-supported-in-this-environment");return o=e,Oc(t.g).then((function(){throw o}))})).then((function(){return t.a.Zb()?new Te((function(){})):Oc(t.g).then((function(){return t.qa()})).then((function(){})).s((function(){}))}))}))}function qc(t,e,n,i,r){return t.a.Nb(i,(function(t){e.ma(n,null,t,r)}),Mc.get())}Cc.prototype.qa=function(){return this.b.qa()};var Hc={};function Kc(t,e,n){return t=t+":"+e,n&&(t=t+":"+n.url),t}function Bc(t,e,n,i){var r=Kc(e,n,i);return Hc[r]||(Hc[r]=new Cc(t,e,n,i)),Hc[r]}function Gc(){this.b=null,this.f=[],this.c=[],this.a=null,this.i=this.g=!1}function Wc(t){t.g||(t.g=!0,Jc(t,!1,null,null))}function zc(t){t.g&&!t.i&&Jc(t,!1,null,null)}function Xc(t,e){if(t.b=function(){return Oe(e)},t.f.length)for(var n=0;n<t.f.length;n++)t.f[n](e)}function Jc(t,e,n,i){e?i?function(t,e){if(t.b=function(){return Ce(e)},t.c.length)for(var n=0;n<t.c.length;n++)t.c[n](e)}(t,i):Xc(t,n):Xc(t,{user:null}),t.f=[],t.c=[]}function Yc(){}function $c(){this.hb=!1,Object.defineProperty(this,"appVerificationDisabled",{get:function(){return this.hb},set:function(t){this.hb=t},enumerable:!1})}function Zc(t,e){this.a=e,Qi(this,"verificationId",t)}function Qc(t,e,n,i){return new Vo(t).eb(e,n).then((function(t){return new Zc(t,i)}))}function th(t){var e=zr(t);if(!(e&&e.exp&&e.auth_time&&e.iat))throw new A("internal-error","An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");tr(this,{token:t,expirationTime:zi(1e3*e.exp),authTime:zi(1e3*e.auth_time),issuedAtTime:zi(1e3*e.iat),signInProvider:e.firebase&&e.firebase.sign_in_provider?e.firebase.sign_in_provider:null,signInSecondFactor:e.firebase&&e.firebase.sign_in_second_factor?e.firebase.sign_in_second_factor:null,claims:e})}function eh(t,e,n){var i=e&&e[ih];if(!i)throw new A("argument-error","Internal assert: Invalid MultiFactorResolver");this.a=t,this.f=mt(e),this.g=n,this.c=new uo(null,i),this.b=[];var r=this;B(e[nh]||[],(function(t){(t=rr(t))&&r.b.push(t)})),Qi(this,"auth",this.a),Qi(this,"session",this.c),Qi(this,"hints",this.b)}Gc.prototype.reset=function(){this.b=null,this.a&&(this.a.cancel(),this.a=null)},Gc.prototype.h=function(t,e){if(t){this.reset(),this.g=!0;var n=t.c,i=t.b,r=t.a&&"auth/web-storage-unsupported"==t.a.code,o=t.a&&"auth/operation-not-supported-in-this-environment"==t.a.code;this.i=!(!r&&!o),"unknown"!=n||r||o?t.a?(Jc(this,!0,null,t.a),Oe()):e.Fa(n,i)?function(t,e,n){n=n.Fa(e.c,e.b);var i=e.g,r=e.f,o=e.i,a=e.S(),s=!!e.c.match(/Redirect$/);n(i,r,a,o).then((function(e){Jc(t,s,e,null)})).s((function(e){Jc(t,s,null,e)}))}(this,t,e):Ce(new A("invalid-auth-event")):(Jc(this,!1,null,null),Oe())}else Ce(new A("invalid-auth-event"))},Gc.prototype.qa=function(){var t=this;return new Te((function(e,n){t.b?t.b().then(e,n):(t.f.push(e),t.c.push(n),function(t){var e=new A("timeout");t.a&&t.a.cancel(),t.a=Nn(jc.get()).then((function(){t.b||(t.g=!0,Jc(t,!0,null,e))}))}(t))}))},Yc.prototype.h=function(t,e){if(t){var n=t.c,i=t.b;t.a?(e.ma(t.c,null,t.a,t.b),Oe()):e.Fa(n,i)?function(t,e){var n=t.b,i=t.c;e.Fa(i,n)(t.g,t.f,t.S(),t.i).then((function(t){e.ma(i,t,null,n)})).s((function(t){e.ma(i,null,t,n)}))}(t,e):Ce(new A("invalid-auth-event"))}else Ce(new A("invalid-auth-event"))},Zc.prototype.confirm=function(t){return t=Uo(this.verificationId,t),this.a(t)};var nh="mfaInfo",ih="mfaPendingCredential";function rh(t,e,n,i){A.call(this,"multi-factor-auth-required",i,e),this.b=new eh(t,e,n),Qi(this,"resolver",this.b)}function oh(t,e,n){if(t&&v(t.serverResponse)&&"auth/multi-factor-auth-required"===t.code)try{return new rh(e,t.serverResponse,n,t.message)}catch(t){}return null}function ah(){}function sh(t){Qi(this,"factorId",t.fa),this.a=t}function uh(t){if(sh.call(this,t),this.a.fa!=Vo.PROVIDER_ID)throw new A("argument-error","firebase.auth.PhoneMultiFactorAssertion requires a valid firebase.auth.PhoneAuthCredential")}function ch(t,e){for(var n in Ze.call(this,t),e)this[n]=e[n]}function hh(t,e){this.a=t,this.b=[],this.c=I(this.xc,this),ln(this.a,"userReloaded",this.c);var n=[];e&&e.multiFactor&&e.multiFactor.enrolledFactors&&B(e.multiFactor.enrolledFactors,(function(t){var e=null,i={};if(t){t.uid&&(i[sr]=t.uid),t.displayName&&(i[or]=t.displayName),t.enrollmentTime&&(i[ar]=new Date(t.enrollmentTime).toISOString()),t.phoneNumber&&(i[ur]=t.phoneNumber);try{e=new cr(i)}catch(t){}t=e}else t=null;t&&n.push(t)})),lh(this,n)}function lh(t,e){t.b=e,Qi(t,"enrolledFactors",e)}function fh(t,e,n){if(this.h=t,this.i=e,this.g=n,this.c=3e4,this.f=96e4,this.b=null,this.a=this.c,this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!")}function ph(t,e){t.stop(),t.b=Nn(function(t,e){return e?(t.a=t.c,t.g()):(e=t.a,t.a*=2,t.a>t.f&&(t.a=t.f),e)}(t,e)).then((function(){return function(){var t=s.document,e=null;return Gi()||!t?Oe():new Te((function(n){e=function(){Gi()&&(t.removeEventListener("visibilitychange",e,!1),n())},t.addEventListener("visibilitychange",e,!1)})).s((function(n){throw t.removeEventListener("visibilitychange",e,!1),n}))}()})).then((function(){return t.h()})).then((function(){ph(t,!0)})).s((function(e){t.i(e)&&ph(t,!1)}))}function dh(t){this.c=t,this.b=this.a=null}function vh(t){return t.b&&1e3*t.b.c||0}function mh(t,e){var n=e.refreshToken;t.b=Wr(e[ts]||""),t.a=n}function gh(t,e){this.a=t||null,this.b=e||null,tr(this,{lastSignInTime:zi(e||null),creationTime:zi(t||null)})}function bh(t,e,n,i,r,o){tr(this,{uid:t,displayName:i||null,photoURL:r||null,email:n||null,phoneNumber:o||null,providerId:e})}function yh(t,e,n){this.G=[],this.l=t.apiKey,this.m=t.appName,this.o=t.authDomain||null;var i=Z.SDK_VERSION?Ci(Z.SDK_VERSION):null;this.a=new Za(this.l,D(N),i),t.emulatorConfig&&as(this.a,t.emulatorConfig),this.b=new dh(this.a),kh(this,e[ts]),mh(this.b,e),Qi(this,"refreshToken",this.b.a),Ch(this,n||{}),En.call(this),this.P=!1,this.o&&Li()&&(this.i=Bc(this.o,this.l,this.m)),this.R=[],this.f=null,this.u=function(t){return new fh((function(){return t.I(!0)}),(function(t){return!(!t||"auth/network-request-failed"!=t.code)}),(function(){var e=vh(t.b)-E()-3e5;return 0<e?e:0}))}(this),this.$=I(this.gb,this);var r=this;this.pa=null,this.Ba=function(t){r.wa(t.h)},this.ba=null,this.za=function(t){as(r.a,t.c)},this.W=null,this.X=[],this.Aa=function(t){Th(r,t.f)},this.aa=null,this.N=new hh(this,n),Qi(this,"multiFactor",this.N)}function wh(t,e){t.ba&&dn(t.ba,"languageCodeChanged",t.Ba),(t.ba=e)&&ln(e,"languageCodeChanged",t.Ba)}function Ih(t,e){t.W&&dn(t.W,"emulatorConfigChanged",t.za),(t.W=e)&&ln(e,"emulatorConfigChanged",t.za)}function Th(t,e){t.X=e,us(t.a,Z.SDK_VERSION?Ci(Z.SDK_VERSION,t.X):null)}function Eh(t,e){t.aa&&dn(t.aa,"frameworkChanged",t.Aa),(t.aa=e)&&ln(e,"frameworkChanged",t.Aa)}function Sh(t){try{return Z.app(t.m).auth()}catch(e){throw new A("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+t.m+"'!")}}function _h(t){t.A||t.u.b||(t.u.start(),dn(t,"tokenChanged",t.$),ln(t,"tokenChanged",t.$))}function Ah(t){dn(t,"tokenChanged",t.$),t.u.stop()}function kh(t,e){t.ya=e,Qi(t,"_lat",e)}function Nh(t){for(var e=[],n=0;n<t.R.length;n++)e.push(t.R[n](t));return De(e).then((function(){return t}))}function Oh(t){t.i&&!t.P&&(t.P=!0,Lc(t.i,t))}function Ch(t,e){tr(t,{uid:e.uid,displayName:e.displayName||null,photoURL:e.photoURL||null,email:e.email||null,emailVerified:e.emailVerified||!1,phoneNumber:e.phoneNumber||null,isAnonymous:e.isAnonymous||!1,tenantId:e.tenantId||null,metadata:new gh(e.createdAt,e.lastLoginAt),providerData:[]}),t.a.b=t.tenantId}function Ph(){}function Dh(t){return Oe().then((function(){if(t.A)throw new A("app-deleted")}))}function Rh(t){return W(t.providerData,(function(t){return t.providerId}))}function Lh(t,e){e&&(xh(t,e.providerId),t.providerData.push(e))}function xh(t,e){Y(t.providerData,(function(t){return t.providerId==e}))}function Mh(t,e,n){("uid"!=e||n)&&t.hasOwnProperty(e)&&Qi(t,e,n)}function jh(t,e){t!=e&&(tr(t,{uid:e.uid,displayName:e.displayName,photoURL:e.photoURL,email:e.email,emailVerified:e.emailVerified,phoneNumber:e.phoneNumber,isAnonymous:e.isAnonymous,tenantId:e.tenantId,providerData:[]}),e.metadata?Qi(t,"metadata",function(t){return new gh(t.a,t.b)}(e.metadata)):Qi(t,"metadata",new gh),B(e.providerData,(function(e){Lh(t,e)})),function(t,e){t.b=e.b,t.a=e.a}(t.b,e.b),Qi(t,"refreshToken",t.b.a),lh(t.N,e.N.b))}function Fh(t){return t.I().then((function(e){var n=t.isAnonymous;return function(t,e){return ru(t.a,xs,{idToken:e}).then(I(t.Jc,t))}(t,e).then((function(){return n||Mh(t,"isAnonymous",!1),e}))}))}function Vh(t,e){e[ts]&&t.ya!=e[ts]&&(mh(t.b,e),t.dispatchEvent(new ch("tokenChanged")),kh(t,e[ts]),Mh(t,"refreshToken",t.b.a))}function Uh(t,e){return Fh(t).then((function(){if(X(Rh(t),e))return Nh(t).then((function(){throw new A("provider-already-linked")}))}))}function qh(t,e,n){return er({user:t,credential:qo(e),additionalUserInfo:e=Zr(e),operationType:n})}function Hh(t,e){return Vh(t,e),t.reload().then((function(){return t}))}function Kh(t,e,n,i,r){if(!Li())return Ce(new A("operation-not-supported-in-this-environment"));if(t.f&&!r)return Ce(t.f);var o=$r(n.providerId),a=qi(t.uid+":::"),s=null;(!ji()||Ti())&&t.o&&n.isOAuthProvider&&(s=yu(t.o,t.l,t.m,e,n,null,a,Z.SDK_VERSION||null,null,null,t.tenantId));var u=gi(s,o&&o.ua,o&&o.ta);return i=i().then((function(){if(Gh(t),!r)return t.I().then((function(){}))})).then((function(){return Fc(t.i,u,e,n,a,!!s,t.tenantId)})).then((function(){return new Te((function(n,i){t.ma(e,null,new A("cancelled-popup-request"),t.h||null),t.g=n,t.O=i,t.h=a,t.c=qc(t.i,t,e,u,a)}))})).then((function(t){return u&&mi(u),t?er(t):null})).s((function(t){throw u&&mi(u),t})),Wh(t,i,r)}function Bh(t,e,n,i,r){if(!Li())return Ce(new A("operation-not-supported-in-this-environment"));if(t.f&&!r)return Ce(t.f);var o=null,a=qi(t.uid+":::");return i=i().then((function(){if(Gh(t),!r)return t.I().then((function(){}))})).then((function(){return t.ga=a,Nh(t)})).then((function(e){return t.ha&&(e=(e=t.ha).b.set(Jh,t.w(),e.a)),e})).then((function(){return Uc(t.i,e,n,a,t.tenantId)})).s((function(e){if(o=e,t.ha)return Yh(t.ha);throw o})).then((function(){if(o)throw o})),Wh(t,i,r)}function Gh(t){if(!t.i||!t.P){if(t.i&&!t.P)throw new A("internal-error");throw new A("auth-domain-config-required")}}function Wh(t,e,n){var i=function(t,e,n){return t.f&&!n?(e.cancel(),Ce(t.f)):e.s((function(e){throw!e||"auth/user-disabled"!=e.code&&"auth/user-token-expired"!=e.code||(t.f||t.dispatchEvent(new ch("userInvalidated")),t.f=e),e}))}(t,e,n);return t.G.push(i),i.na((function(){J(t.G,i)})),i.s((function(e){var n=null;throw e&&"auth/multi-factor-auth-required"===e.code&&(n=oh(e.w(),Sh(t),I(t.ic,t))),n||e}))}function zh(t){if(!t.apiKey)return null;var e={apiKey:t.apiKey,authDomain:t.authDomain,appName:t.appName,emulatorConfig:t.emulatorConfig},n={};if(!t.stsTokenManager||!t.stsTokenManager.accessToken)return null;n[ts]=t.stsTokenManager.accessToken,n.refreshToken=t.stsTokenManager.refreshToken||null;var i=new yh(e,n,t);return t.providerData&&B(t.providerData,(function(t){t&&Lh(i,er(t))})),t.redirectEventId&&(i.ga=t.redirectEventId),i}function Xh(t){this.a=t,this.b=nc()}eh.prototype.Qc=function(t){var e=this;return t.rb(this.a.a,this.c).then((function(t){var n=mt(e.f);return delete n[nh],delete n[ih],bt(n,t),e.g(n)}))},S(rh,A),ah.prototype.rb=function(t,e,n){return e.type==co?function(t,e,n,i){return n.Ha().then((function(n){return n={idToken:n},void 0!==i&&(n.displayName=i),bt(n,{phoneVerificationInfo:Fo(t.a)}),ru(e,Rs,n)}))}(this,t,e,n):function(t,e,n){return n.Ha().then((function(n){return bt(n={mfaPendingCredential:n},{phoneVerificationInfo:Fo(t.a)}),ru(e,Ls,n)}))}(this,t,e)},S(sh,ah),S(uh,sh),S(ch,Ze),(t=hh.prototype).xc=function(t){lh(this,function(t){var e=[];return B(t.mfaInfo||[],(function(t){(t=rr(t))&&e.push(t)})),e}(t.gd))},t.Qb=function(){return this.a.I().then((function(t){return new uo(t,null)}))},t.ec=function(t,e){var n=this,i=this.a.a;return this.Qb().then((function(n){return t.rb(i,n,e)})).then((function(t){return Vh(n.a,t),n.a.reload()}))},t.ad=function(t){var e=this,n="string"==typeof t?t:t.uid,i=this.a.a;return this.a.I().then((function(t){return ru(i,iu,{idToken:t,mfaEnrollmentId:n})})).then((function(t){var i=G(e.b,(function(t){return t.uid!=n}));return lh(e,i),Vh(e.a,t),e.a.reload().s((function(t){if("auth/user-token-expired"!=t.code)throw t}))}))},t.w=function(){return{multiFactor:{enrolledFactors:W(this.b,(function(t){return t.w()}))}}},fh.prototype.start=function(){this.a=this.c,ph(this,!0)},fh.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null)},dh.prototype.w=function(){return{apiKey:this.c.c,refreshToken:this.a,accessToken:this.b&&this.b.toString(),expirationTime:vh(this)}},dh.prototype.getToken=function(t){return t=!!t,this.b&&!this.a?Ce(new A("user-token-expired")):t||!this.b||E()>vh(this)-3e4?this.a?function(t,e){return function(t,e){return new Te((function(n,i){"refresh_token"==e.grant_type&&e.refresh_token||"authorization_code"==e.grant_type&&e.code?cs(t,t.l+"?key="+encodeURIComponent(t.c),(function(t){t?t.error?i(au(t)):t.access_token&&t.refresh_token?n(t):i(new A("internal-error")):i(new A("network-request-failed"))}),"POST",Qn(e).toString(),t.g,t.v.get()):i(new A("internal-error"))}))}(t.c,e).then((function(e){return t.b=Wr(e.access_token),t.a=e.refresh_token,{accessToken:t.b.toString(),refreshToken:t.a}})).s((function(e){throw"auth/user-token-expired"==e.code&&(t.a=null),e}))}(this,{grant_type:"refresh_token",refresh_token:this.a}):Oe(null):Oe({accessToken:this.b.toString(),refreshToken:this.a})},gh.prototype.w=function(){return{lastLoginAt:this.b,createdAt:this.a}},S(yh,En),yh.prototype.wa=function(t){this.pa=t,os(this.a,t)},yh.prototype.ka=function(){return this.pa},yh.prototype.Ga=function(){return Q(this.X)},yh.prototype.gb=function(){this.u.b&&(this.u.stop(),this.u.start())},Qi(yh.prototype,"providerId","firebase"),(t=yh.prototype).reload=function(){var t=this;return Wh(this,Dh(this).then((function(){return Fh(t).then((function(){return Nh(t)})).then(Ph)})))},t.nc=function(t){return this.I(t).then((function(t){return new th(t)}))},t.I=function(t){var e=this;return Wh(this,Dh(this).then((function(){return e.b.getToken(t)})).then((function(t){if(!t)throw new A("internal-error");return t.accessToken!=e.ya&&(kh(e,t.accessToken),e.dispatchEvent(new ch("tokenChanged"))),Mh(e,"refreshToken",t.refreshToken),t.accessToken})))},t.Jc=function(t){if(!(t=t.users)||!t.length)throw new A("internal-error");Ch(this,{uid:(t=t[0]).localId,displayName:t.displayName,photoURL:t.photoUrl,email:t.email,emailVerified:!!t.emailVerified,phoneNumber:t.phoneNumber,lastLoginAt:t.lastLoginAt,createdAt:t.createdAt,tenantId:t.tenantId});for(var e=function(t){return(t=t.providerUserInfo)&&t.length?W(t,(function(t){return new bh(t.rawId,t.providerId,t.email,t.displayName,t.photoUrl,t.phoneNumber)})):[]}(t),n=0;n<e.length;n++)Lh(this,e[n]);Mh(this,"isAnonymous",!(this.email&&t.passwordHash||this.providerData&&this.providerData.length)),this.dispatchEvent(new ch("userReloaded",{gd:t}))},t.Kc=function(t){return $i("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead."),this.sb(t)},t.sb=function(t){var e=this,n=null;return Wh(this,t.c(this.a,this.uid).then((function(t){return Vh(e,t),n=qh(e,t,"reauthenticate"),e.f=null,e.reload()})).then((function(){return n})),!0)},t.Bc=function(t){return $i("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead."),this.pb(t)},t.pb=function(t){var e=this,n=null;return Wh(this,Uh(this,t.providerId).then((function(){return e.I()})).then((function(n){return t.b(e.a,n)})).then((function(t){return n=qh(e,t,"link"),Hh(e,t)})).then((function(){return n})))},t.Cc=function(t,e){var n=this;return Wh(this,Uh(this,"phone").then((function(){return Qc(Sh(n),t,e,I(n.pb,n))})))},t.Lc=function(t,e){var n=this;return Wh(this,Oe().then((function(){return Qc(Sh(n),t,e,I(n.sb,n))})),!0)},t.Ab=function(t){var e=this;return Wh(this,this.I().then((function(n){return e.a.Ab(n,t)})).then((function(t){return Vh(e,t),e.reload()})))},t.dd=function(t){var e=this;return Wh(this,this.I().then((function(n){return t.b(e.a,n)})).then((function(t){return Vh(e,t),e.reload()})))},t.Bb=function(t){var e=this;return Wh(this,this.I().then((function(n){return e.a.Bb(n,t)})).then((function(t){return Vh(e,t),e.reload()})))},t.Cb=function(t){if(void 0===t.displayName&&void 0===t.photoURL)return Dh(this);var e=this;return Wh(this,this.I().then((function(n){return e.a.Cb(n,{displayName:t.displayName,photoUrl:t.photoURL})})).then((function(t){return Vh(e,t),Mh(e,"displayName",t.displayName||null),Mh(e,"photoURL",t.photoUrl||null),B(e.providerData,(function(t){"password"===t.providerId&&(Qi(t,"displayName",e.displayName),Qi(t,"photoURL",e.photoURL))})),Nh(e)})).then(Ph))},t.bd=function(t){var e=this;return Wh(this,Fh(this).then((function(n){return X(Rh(e),t)?function(t,e,n){return ru(t,Cs,{idToken:e,deleteProvider:n})}(e.a,n,[t]).then((function(t){var n={};return B(t.providerUserInfo||[],(function(t){n[t.providerId]=!0})),B(Rh(e),(function(t){n[t]||xh(e,t)})),n[Vo.PROVIDER_ID]||Qi(e,"phoneNumber",null),Nh(e)})):Nh(e).then((function(){throw new A("no-such-provider")}))})))},t.delete=function(){var t=this;return Wh(this,this.I().then((function(e){return ru(t.a,Os,{idToken:e})})).then((function(){t.dispatchEvent(new ch("userDeleted"))}))).then((function(){for(var e=0;e<t.G.length;e++)t.G[e].cancel("app-deleted");wh(t,null),Ih(t,null),Eh(t,null),t.G=[],t.A=!0,Ah(t),Qi(t,"refreshToken",null),t.i&&xc(t.i,t)}))},t.Eb=function(t,e){return!!("linkViaPopup"==t&&(this.h||null)==e&&this.g||"reauthViaPopup"==t&&(this.h||null)==e&&this.g||"linkViaRedirect"==t&&(this.ga||null)==e||"reauthViaRedirect"==t&&(this.ga||null)==e)},t.ma=function(t,e,n,i){"linkViaPopup"!=t&&"reauthViaPopup"!=t||i!=(this.h||null)||(n&&this.O?this.O(n):e&&!n&&this.g&&this.g(e),this.c&&(this.c.cancel(),this.c=null),delete this.g,delete this.O)},t.Fa=function(t,e){return"linkViaPopup"==t&&e==(this.h||null)?I(this.Jb,this):"reauthViaPopup"==t&&e==(this.h||null)?I(this.Kb,this):"linkViaRedirect"==t&&(this.ga||null)==e?I(this.Jb,this):"reauthViaRedirect"==t&&(this.ga||null)==e?I(this.Kb,this):null},t.Dc=function(t){var e=this;return Kh(this,"linkViaPopup",t,(function(){return Uh(e,t.providerId).then((function(){return Nh(e)}))}),!1)},t.Mc=function(t){return Kh(this,"reauthViaPopup",t,(function(){return Oe()}),!0)},t.Ec=function(t){var e=this;return Bh(this,"linkViaRedirect",t,(function(){return Uh(e,t.providerId)}),!1)},t.Nc=function(t){return Bh(this,"reauthViaRedirect",t,(function(){return Oe()}),!0)},t.Jb=function(t,e,n,i){var r=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return Wh(this,this.I().then((function(n){return Ts(r.a,{requestUri:t,postBody:i,sessionId:e,idToken:n})})).then((function(t){return o=qh(r,t,"link"),Hh(r,t)})).then((function(){return o})))},t.Kb=function(t,e,n,i){var r=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return Wh(this,Oe().then((function(){return fo(Es(r.a,{requestUri:t,sessionId:e,postBody:i,tenantId:n}),r.uid)})).then((function(t){return o=qh(r,t,"reauthenticate"),Vh(r,t),r.f=null,r.reload()})).then((function(){return o})),!0)},t.tb=function(t){var e=this,n=null;return Wh(this,this.I().then((function(e){return n=e,void 0===t||vt(t)?{}:Kr(new Rr(t))})).then((function(t){return e.a.tb(n,t)})).then((function(t){if(e.email!=t)return e.reload()})).then((function(){})))},t.Db=function(t,e){var n=this,i=null;return Wh(this,this.I().then((function(t){return i=t,void 0===e||vt(e)?{}:Kr(new Rr(e))})).then((function(e){return n.a.Db(i,t,e)})).then((function(t){if(n.email!=t)return n.reload()})).then((function(){})))},t.ic=function(t){var e=null,n=this;return Wh(this,t=fo(Oe(t),n.uid).then((function(t){return e=qh(n,t,"reauthenticate"),Vh(n,t),n.f=null,n.reload()})).then((function(){return e})),!0)},t.toJSON=function(){return this.w()},t.w=function(){var t={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,tenantId:this.tenantId,providerData:[],apiKey:this.l,appName:this.m,authDomain:this.o,stsTokenManager:this.b.w(),redirectEventId:this.ga||null};return this.metadata&&bt(t,this.metadata.w()),B(this.providerData,(function(e){t.providerData.push(function(t){var e,n={};for(e in t)t.hasOwnProperty(e)&&(n[e]=t[e]);return n}(e))})),bt(t,this.N.w()),t};var Jh={name:"redirectUser",D:"session"};function Yh(t){return oc(t.b,Jh,t.a)}function $h(t){this.a=t,this.b=nc(),this.c=null,this.f=function(t){var e=tl("local"),n=tl("session"),i=tl("none");return function(t,e,n){var i=rc(e,n),r=ic(t,e.D);return t.get(e,n).then((function(o){var a=null;try{a=Ui(s.localStorage.getItem(i))}catch(t){}if(a&&!o)return s.localStorage.removeItem(i),t.set(e,a,n);a&&o&&"localStorage"!=r.type&&s.localStorage.removeItem(i)}))}(t.b,e,t.a).then((function(){return t.b.get(n,t.a)})).then((function(r){return r?n:t.b.get(i,t.a).then((function(n){return n?i:t.b.get(e,t.a).then((function(n){return n?e:t.b.get(Qh,t.a).then((function(t){return t?tl(t):e}))}))}))})).then((function(e){return t.c=e,Zh(t,e.D)})).s((function(){t.c||(t.c=e)}))}(this),this.b.addListener(tl("local"),this.a,I(this.g,this))}function Zh(t,e){var n,i=[];for(n in tc)tc[n]!==e&&i.push(oc(t.b,tl(tc[n]),t.a));return i.push(oc(t.b,Qh,t.a)),function(t){return new Te((function(e,n){var i=t.length,r=[];if(i)for(var o=function(t,n){i--,r[t]=n,0==i&&e(r)},a=function(t){n(t)},s=0;s<t.length;s++)Pe(t[s],T(o,s),a);else e(r)}))}(i)}$h.prototype.g=function(){var t=this,e=tl("local");rl(this,(function(){return Oe().then((function(){return t.c&&"local"!=t.c.D?t.b.get(e,t.a):null})).then((function(n){if(n)return Zh(t,"local").then((function(){t.c=e}))}))}))};var Qh={name:"persistence",D:"session"};function tl(t){return{name:"authUser",D:t}}function el(t,e){return rl(t,(function(){return t.b.set(t.c,e.w(),t.a)}))}function nl(t){return rl(t,(function(){return oc(t.b,t.c,t.a)}))}function il(t,e,n){return rl(t,(function(){return t.b.get(t.c,t.a).then((function(t){return t&&e&&(t.authDomain=e),t&&n&&(t.emulatorConfig=n),zh(t||{})}))}))}function rl(t,e){return t.f=t.f.then(e,e),t.f}function ol(t){if(this.m=!1,Qi(this,"settings",new $c),Qi(this,"app",t),!pl(this).options||!pl(this).options.apiKey)throw new A("invalid-api-key");t=Z.SDK_VERSION?Ci(Z.SDK_VERSION):null,this.a=new Za(pl(this).options&&pl(this).options.apiKey,D(N),t),this.R=[],this.u=[],this.P=[],this.ac=Z.INTERNAL.createSubscribe(I(this.yc,this)),this.X=void 0,this.bc=Z.INTERNAL.createSubscribe(I(this.zc,this)),ll(this,null),this.l=new $h(pl(this).options.apiKey+":"+pl(this).name),this.G=new Xh(pl(this).options.apiKey+":"+pl(this).name),this.$=gl(this,function(t){var e=pl(t).options.authDomain,n=function(t){var e=function(t,e){return t.b.get(Jh,t.a).then((function(t){return t&&e&&(t.authDomain=e),zh(t||{})}))}(t.G,pl(t).options.authDomain).then((function(e){return(t.o=e)&&(e.ha=t.G),Yh(t.G)}));return gl(t,e)}(t).then((function(){return il(t.l,e,t.f)})).then((function(e){return e?(e.ha=t.G,t.o&&(t.o.ga||null)==(e.ga||null)?e:e.reload().then((function(){return el(t.l,e).then((function(){return e}))})).s((function(n){return"auth/network-request-failed"==n.code?e:nl(t.l)}))):null})).then((function(e){ll(t,e||null)}));return gl(t,n)}(this)),this.i=gl(this,function(t){return t.$.then((function(){return hl(t)})).s((function(){})).then((function(){if(!t.m)return t.pa()})).s((function(){})).then((function(){if(!t.m){t.ba=!0;var e=t.l;e.b.addListener(tl("local"),e.a,t.pa)}}))}(this)),this.ba=!1,this.pa=I(this.Yc,this),this.Ba=I(this.da,this),this.ya=I(this.kc,this),this.za=I(this.vc,this),this.Aa=I(this.wc,this),this.b=null,function(t){var e=pl(t).options.authDomain,n=pl(t).options.apiKey;e&&Li()&&(t.gb=t.$.then((function(){if(!t.m){if(t.b=Bc(e,n,pl(t).name,t.f),Lc(t.b,t),dl(t)&&Oh(dl(t)),t.o){Oh(t.o);var i=t.o;i.wa(t.ka()),wh(i,t),Th(i=t.o,t.N),Eh(i,t),as((i=t.o).a,t.f),Ih(i,t),t.o=null}return t.b}})))}(this),this.INTERNAL={},this.INTERNAL.delete=I(this.delete,this),this.INTERNAL.logFramework=I(this.Fc,this),this.A=0,En.call(this),function(t){Object.defineProperty(t,"lc",{get:function(){return this.ka()},set:function(t){this.wa(t)},enumerable:!1}),t.aa=null,Object.defineProperty(t,"ti",{get:function(){return this.S()},set:function(t){this.xb(t)},enumerable:!1}),t.W=null}(this),this.N=[],this.f=null}function al(t){Ze.call(this,"languageCodeChanged"),this.h=t}function sl(t){Ze.call(this,"emulatorConfigChanged"),this.c=t}function ul(t){Ze.call(this,"frameworkChanged"),this.f=t}function cl(t){return t.gb||Ce(new A("auth-domain-config-required"))}function hl(t){if(!Li())return Ce(new A("operation-not-supported-in-this-environment"));var e=cl(t).then((function(){return t.b.qa()})).then((function(t){return t?er(t):null}));return gl(t,e)}function ll(t,e){dl(t)&&(function(t,e){Y(t.R,(function(t){return t==e}))}(dl(t),t.Ba),dn(dl(t),"tokenChanged",t.ya),dn(dl(t),"userDeleted",t.za),dn(dl(t),"userInvalidated",t.Aa),Ah(dl(t))),e&&(e.R.push(t.Ba),ln(e,"tokenChanged",t.ya),ln(e,"userDeleted",t.za),ln(e,"userInvalidated",t.Aa),0<t.A&&_h(e)),Qi(t,"currentUser",e),e&&(e.wa(t.ka()),wh(e,t),Th(e,t.N),Eh(e,t),as(e.a,t.f),Ih(e,t))}function fl(t,e){var n=null,i=null;return gl(t,e.then((function(e){return n=qo(e),i=Zr(e),function(t,e){var n={};return n.apiKey=pl(t).options.apiKey,n.authDomain=pl(t).options.authDomain,n.appName=pl(t).name,t.f&&(n.emulatorConfig=t.f),t.$.then((function(){return function(t,e,n,i){var r=new yh(t,e);return n&&(r.ha=n),i&&Th(r,i),r.reload().then((function(){return r}))}(n,e,t.G,t.Ga())})).then((function(e){return dl(t)&&e.uid==dl(t).uid?(jh(dl(t),e),t.da(e)):(ll(t,e),Oh(e),t.da(e))})).then((function(){ml(t)}))}(t,e)}),(function(e){var n=null;throw e&&"auth/multi-factor-auth-required"===e.code&&(n=oh(e.w(),t,I(t.jc,t))),n||e})).then((function(){return er({user:dl(t),credential:n,additionalUserInfo:i,operationType:"signIn"})})))}function pl(t){return t.app}function dl(t){return t.currentUser}function vl(t){return dl(t)&&dl(t)._lat||null}function ml(t){if(t.ba){for(var e=0;e<t.u.length;e++)t.u[e]&&t.u[e](vl(t));if(t.X!==t.getUid()&&t.P.length)for(t.X=t.getUid(),e=0;e<t.P.length;e++)t.P[e]&&t.P[e](vl(t))}}function gl(t,e){return t.R.push(e),e.na((function(){J(t.R,e)})),e}function bl(){}function yl(){this.a={},this.b=1e12}$h.prototype.wb=function(t){var e=null,n=this;return function(t){var e=new A("invalid-persistence-type"),n=new A("unsupported-persistence-type");t:{for(i in tc)if(tc[i]==t){var i=!0;break t}i=!1}if(!i||"string"!=typeof t)throw e;switch(Si()){case"ReactNative":if("session"===t)throw n;break;case"Node":if("none"!==t)throw n;break;case"Worker":if("session"===t||!Ru()&&"none"!==t)throw n;break;default:if(!Ri()&&"none"!==t)throw n}}(t),rl(this,(function(){return t!=n.c.D?n.b.get(n.c,n.a).then((function(i){return e=i,Zh(n,t)})).then((function(){if(n.c=tl(t),e)return n.b.set(n.c,e,n.a)})):Oe()}))},S(ol,En),S(al,Ze),S(sl,Ze),S(ul,Ze),(t=ol.prototype).wb=function(t){return gl(this,t=this.l.wb(t))},t.wa=function(t){this.aa===t||this.m||(this.aa=t,os(this.a,this.aa),this.dispatchEvent(new al(this.ka())))},t.ka=function(){return this.aa},t.ed=function(){var t=s.navigator;this.wa(t&&(t.languages&&t.languages[0]||t.language||t.userLanguage)||null)},t.fd=function(t){if(!this.f){if(!/^https?:\/\//.test(t))throw new A("argument-error","Emulator URL must start with a valid scheme (http:// or https://).");Wi("WARNING: You are using the Auth Emulator, which is intended for local testing only.  Do not use with production credentials."),s.document&&wi().then((function(){var t=s.document.createElement("div");t.innerText="Running in emulator mode. Do not use with production credentials.",t.style.position="fixed",t.style.width="100%",t.style.backgroundColor="#ffffff",t.style.border=".1em solid #000000",t.style.color="#ff0000",t.style.bottom="0px",t.style.left="0px",t.style.margin="0px",t.style.zIndex=1e4,t.style.textAlign="center",t.classList.add("firebase-emulator-warning"),s.document.body.appendChild(t)})),this.f={url:t},this.settings.hb=!0,as(this.a,this.f),this.dispatchEvent(new sl(this.f))}},t.Fc=function(t){this.N.push(t),us(this.a,Z.SDK_VERSION?Ci(Z.SDK_VERSION,this.N):null),this.dispatchEvent(new ul(this.N))},t.Ga=function(){return Q(this.N)},t.xb=function(t){this.W===t||this.m||(this.W=t,this.a.b=this.W)},t.S=function(){return this.W},t.toJSON=function(){return{apiKey:pl(this).options.apiKey,authDomain:pl(this).options.authDomain,appName:pl(this).name,currentUser:dl(this)&&dl(this).w()}},t.Eb=function(t,e){switch(t){case"unknown":case"signInViaRedirect":return!0;case"signInViaPopup":return this.h==e&&!!this.g;default:return!1}},t.ma=function(t,e,n,i){"signInViaPopup"==t&&this.h==i&&(n&&this.O?this.O(n):e&&!n&&this.g&&this.g(e),this.c&&(this.c.cancel(),this.c=null),delete this.g,delete this.O)},t.Fa=function(t,e){return"signInViaRedirect"==t||"signInViaPopup"==t&&this.h==e&&this.g?I(this.hc,this):null},t.hc=function(t,e,n,i){var r=this,o={requestUri:t,postBody:i,sessionId:e,tenantId:n};return this.c&&(this.c.cancel(),this.c=null),r.$.then((function(){return fl(r,Is(r.a,o))}))},t.Wc=function(t){if(!Li())return Ce(new A("operation-not-supported-in-this-environment"));var e=this,n=$r(t.providerId),i=qi(),r=null;(!ji()||Ti())&&pl(this).options.authDomain&&t.isOAuthProvider&&(r=yu(pl(this).options.authDomain,pl(this).options.apiKey,pl(this).name,"signInViaPopup",t,null,i,Z.SDK_VERSION||null,null,null,this.S(),this.f));var o=gi(r,n&&n.ua,n&&n.ta);return gl(this,n=cl(this).then((function(n){return Fc(n,o,"signInViaPopup",t,i,!!r,e.S())})).then((function(){return new Te((function(t,n){e.ma("signInViaPopup",null,new A("cancelled-popup-request"),e.h),e.g=t,e.O=n,e.h=i,e.c=qc(e.b,e,"signInViaPopup",o,i)}))})).then((function(t){return o&&mi(o),t?er(t):null})).s((function(t){throw o&&mi(o),t})))},t.Xc=function(t){if(!Li())return Ce(new A("operation-not-supported-in-this-environment"));var e=this;return gl(this,cl(this).then((function(){return function(t){return rl(t,(function(){return t.b.set(Qh,t.c.D,t.a)}))}(e.l)})).then((function(){return Uc(e.b,"signInViaRedirect",t,void 0,e.S())})))},t.qa=function(){var t=this;return hl(this).then((function(e){return t.b&&zc(t.b.b),e})).s((function(e){throw t.b&&zc(t.b.b),e}))},t.cd=function(t){if(!t)return Ce(new A("null-user"));if(this.W!=t.tenantId)return Ce(new A("tenant-id-mismatch"));var e=this,n={};n.apiKey=pl(this).options.apiKey,n.authDomain=pl(this).options.authDomain,n.appName=pl(this).name;var i=function(t,e,n,i){var r=t.b,o={};return o[ts]=r.b&&r.b.toString(),o.refreshToken=r.a,e=new yh(e||{apiKey:t.l,authDomain:t.o,appName:t.m},o),n&&(e.ha=n),i&&Th(e,i),jh(e,t),e}(t,n,e.G,e.Ga());return gl(this,this.i.then((function(){if(pl(e).options.apiKey!=t.l)return i.reload()})).then((function(){return dl(e)&&t.uid==dl(e).uid?(jh(dl(e),t),e.da(t)):(ll(e,i),Oh(i),e.da(i))})).then((function(){ml(e)})))},t.zb=function(){var t=this;return gl(this,this.i.then((function(){return t.b&&zc(t.b.b),dl(t)?(ll(t,null),nl(t.l).then((function(){ml(t)}))):Oe()})))},t.Yc=function(){var t=this;return il(this.l,pl(this).options.authDomain).then((function(e){if(!t.m){var n;if(n=dl(t)&&e){n=dl(t).uid;var i=e.uid;n=null!=n&&""!==n&&null!=i&&""!==i&&n==i}if(n)return jh(dl(t),e),dl(t).I();(dl(t)||e)&&(ll(t,e),e&&(Oh(e),e.ha=t.G),t.b&&Lc(t.b,t),ml(t))}}))},t.da=function(t){return el(this.l,t)},t.kc=function(){ml(this),this.da(dl(this))},t.vc=function(){this.zb()},t.wc=function(){this.zb()},t.jc=function(t){var e=this;return this.i.then((function(){return fl(e,Oe(t))}))},t.yc=function(t){var e=this;this.addAuthTokenListener((function(){t.next(dl(e))}))},t.zc=function(t){var e=this;!function(t,e){t.P.push(e),gl(t,t.i.then((function(){!t.m&&X(t.P,e)&&t.X!==t.getUid()&&(t.X=t.getUid(),e(vl(t)))})))}(this,(function(){t.next(dl(e))}))},t.Hc=function(t,e,n){var i=this;return this.ba&&Promise.resolve().then((function(){"function"==typeof t?t(dl(i)):"function"==typeof t.next&&t.next(dl(i))})),this.ac(t,e,n)},t.Gc=function(t,e,n){var i=this;return this.ba&&Promise.resolve().then((function(){i.X=i.getUid(),"function"==typeof t?t(dl(i)):"function"==typeof t.next&&t.next(dl(i))})),this.bc(t,e,n)},t.mc=function(t){var e=this;return gl(this,this.i.then((function(){return dl(e)?dl(e).I(t).then((function(t){return{accessToken:t}})):null})))},t.Sc=function(t){var e=this;return this.i.then((function(){return fl(e,ru(e.a,Zs,{token:t}))})).then((function(t){var n=t.user;return Mh(n,"isAnonymous",!1),e.da(n),t}))},t.Tc=function(t,e){var n=this;return this.i.then((function(){return fl(n,ru(n.a,Qs,{email:t,password:e}))}))},t.dc=function(t,e){var n=this;return this.i.then((function(){return fl(n,ru(n.a,ks,{email:t,password:e}))}))},t.Za=function(t){var e=this;return this.i.then((function(){return fl(e,t.ja(e.a))}))},t.Rc=function(t){return $i("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead."),this.Za(t)},t.yb=function(){var t=this;return this.i.then((function(){var e=dl(t);if(e&&e.isAnonymous){var n=er({providerId:null,isNewUser:!1});return er({user:e,credential:null,additionalUserInfo:n,operationType:"signIn"})}return fl(t,t.a.yb()).then((function(e){var n=e.user;return Mh(n,"isAnonymous",!0),t.da(n),e}))}))},t.getUid=function(){return dl(this)&&dl(this).uid||null},t.cc=function(t){this.addAuthTokenListener(t),this.A++,0<this.A&&dl(this)&&_h(dl(this))},t.Oc=function(t){var e=this;B(this.u,(function(n){n==t&&e.A--})),0>this.A&&(this.A=0),0==this.A&&dl(this)&&Ah(dl(this)),this.removeAuthTokenListener(t)},t.addAuthTokenListener=function(t){var e=this;this.u.push(t),gl(this,this.i.then((function(){e.m||X(e.u,t)&&t(vl(e))})))},t.removeAuthTokenListener=function(t){Y(this.u,(function(e){return e==t}))},t.delete=function(){this.m=!0;for(var t=0;t<this.R.length;t++)this.R[t].cancel("app-deleted");return this.R=[],this.l&&(t=this.l).b.removeListener(tl("local"),t.a,this.pa),this.b&&(xc(this.b,this),zc(this.b.b)),Promise.resolve()},t.gc=function(t){return gl(this,function(t,e){return ru(t,Ns,{identifier:e,continueUri:xi()?fi():"http://localhost"}).then((function(t){return t.signinMethods||[]}))}(this.a,t))},t.Ac=function(t){return!!xo(t)},t.vb=function(t,e){var n=this;return gl(this,Oe().then((function(){var t=new Rr(e);if(!t.c)throw new A("argument-error",Mr+" must be true when sending sign in link to email");return Kr(t)})).then((function(e){return n.a.vb(t,e)})).then((function(){})))},t.hd=function(t){return this.Qa(t).then((function(t){return t.data.email}))},t.mb=function(t,e){return gl(this,this.a.mb(t,e).then((function(){})))},t.Qa=function(t){return gl(this,this.a.Qa(t).then((function(t){return new hr(t)})))},t.ib=function(t){return gl(this,this.a.ib(t).then((function(){})))},t.ub=function(t,e){var n=this;return gl(this,Oe().then((function(){return void 0===e||vt(e)?{}:Kr(new Rr(e))})).then((function(e){return n.a.ub(t,e)})).then((function(){})))},t.Vc=function(t,e){return gl(this,Qc(this,t,e,I(this.Za,this)))},t.Uc=function(t,e){var n=this;return gl(this,Oe().then((function(){var i=e||fi(),r=Lo(t,i);if(!(i=xo(i)))throw new A("argument-error","Invalid email link!");if(i.tenantId!==n.S())throw new A("tenant-id-mismatch");return n.Za(r)})))},bl.prototype.render=function(){},bl.prototype.reset=function(){},bl.prototype.getResponse=function(){},bl.prototype.execute=function(){};var wl=null;function Il(t,e){return(e=Tl(e))&&t.a[e]||null}function Tl(t){return(t=void 0===t?1e12:t)?t.toString():null}function El(t,e){this.g=!1,this.c=e,this.a=this.b=null,this.h="invisible"!==this.c.size,this.f=he(t);var n=this;this.i=function(){n.execute()},this.h?this.execute():ln(this.f,"click",this.i)}function Sl(t){if(t.g)throw Error("reCAPTCHA mock was already deleted!")}function _l(){}function Al(){}yl.prototype.render=function(t,e){return this.a[this.b.toString()]=new El(t,e),this.b++},yl.prototype.reset=function(t){var e=Il(this,t);t=Tl(t),e&&t&&(e.delete(),delete this.a[t])},yl.prototype.getResponse=function(t){return(t=Il(this,t))?t.getResponse():null},yl.prototype.execute=function(t){(t=Il(this,t))&&t.execute()},El.prototype.getResponse=function(){return Sl(this),this.b},El.prototype.execute=function(){Sl(this);var t=this;this.a||(this.a=setTimeout((function(){t.b=function(){for(var t=50,e=[];0<t;)e.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),t--;return e.join("")}();var e=t.c.callback,n=t.c["expired-callback"];if(e)try{e(t.b)}catch(t){}t.a=setTimeout((function(){if(t.a=null,t.b=null,n)try{n()}catch(t){}t.h&&t.execute()}),6e4)}),500))},El.prototype.delete=function(){Sl(this),this.g=!0,clearTimeout(this.a),this.a=null,dn(this.f,"click",this.i)},Qi(_l,"FACTOR_ID","phone"),Al.prototype.g=function(){return wl||(wl=new yl),Oe(wl)},Al.prototype.c=function(){};var kl=null;function Nl(){this.b=s.grecaptcha?1/0:0,this.f=null,this.a="__rcb"+Math.floor(1e6*Math.random()).toString()}var Ol=new wt(St,"https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),Cl=new Bi(3e4,6e4);Nl.prototype.g=function(t){var e=this;return new Te((function(n,i){var r=setTimeout((function(){i(new A("network-request-failed"))}),Cl.get());!s.grecaptcha||t!==e.f&&!e.b?(s[e.a]=function(){if(s.grecaptcha){e.f=t;var o=s.grecaptcha.render;s.grecaptcha.render=function(t,n){return t=o(t,n),e.b++,t},clearTimeout(r),n(s.grecaptcha)}else clearTimeout(r),i(new A("internal-error"));delete s[e.a]},Oe(Ga(Nt(Ol,{onload:e.a,hl:t||""}))).s((function(){clearTimeout(r),i(new A("internal-error","Unable to load external reCAPTCHA dependencies!"))}))):(clearTimeout(r),n(s.grecaptcha))}))},Nl.prototype.c=function(){this.b--};var Pl=null;function Dl(t,e,n,i,r,o,a){if(Qi(this,"type","recaptcha"),this.c=this.f=null,this.A=!1,this.m=e,this.g=null,a?(kl||(kl=new Al),a=kl):(Pl||(Pl=new Nl),a=Pl),this.v=a,this.a=n||{theme:"light",type:"image"},this.h=[],this.a[xl])throw new A("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");if(this.i="invisible"===this.a[Ml],!s.document)throw new A("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");if(!he(e)||!this.i&&he(e).hasChildNodes())throw new A("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.o=new Za(t,o||null,r||null),this.u=i||function(){return null};var u=this;this.l=[];var c=this.a[Rl];this.a[Rl]=function(t){if(jl(u,t),"function"==typeof c)c(t);else if("string"==typeof c){var e=Di(c,s);"function"==typeof e&&e(t)}};var h=this.a[Ll];this.a[Ll]=function(){if(jl(u,null),"function"==typeof h)h();else if("string"==typeof h){var t=Di(h,s);"function"==typeof t&&t()}}}var Rl="callback",Ll="expired-callback",xl="sitekey",Ml="size";function jl(t,e){for(var n=0;n<t.l.length;n++)try{t.l[n](e)}catch(t){}}function Fl(t,e){return t.h.push(e),e.na((function(){J(t.h,e)})),e}function Vl(t){if(t.A)throw new A("internal-error","RecaptchaVerifier instance has been destroyed.")}function Ul(t,e,n){var i=!1;try{this.b=n||Z.app()}catch(t){throw new A("argument-error","No firebase.app.App instance is currently initialized.")}if(!this.b.options||!this.b.options.apiKey)throw new A("invalid-api-key");n=this.b.options.apiKey;var r=this,o=null;try{o=this.b.auth().Ga()}catch(t){}try{i=this.b.auth().settings.appVerificationDisabledForTesting}catch(t){}o=Z.SDK_VERSION?Ci(Z.SDK_VERSION,o):null,Dl.call(this,n,t,e,(function(){try{var t=r.b.auth().ka()}catch(e){t=null}return t}),o,D(N),i)}function ql(t,e,n,i){t:{n=Array.prototype.slice.call(n);for(var r=0,o=!1,a=0;a<e.length;a++)if(e[a].optional)o=!0;else{if(o)throw new A("internal-error","Argument validator encountered a required argument after an optional argument.");r++}if(o=e.length,n.length<r||o<n.length)i="Expected "+(r==o?1==r?"1 argument":r+" arguments":r+"-"+o+" arguments")+" but got "+n.length+".";else{for(r=0;r<n.length;r++)if(o=e[r].optional&&void 0===n[r],!e[r].K(n[r])&&!o){if(e=e[r],0>r||r>=Hl.length)throw new A("internal-error","Argument validator received an unsupported number of arguments.");n=Hl[r],i=(i?"":n+" argument ")+(e.name?'"'+e.name+'" ':"")+"must be "+e.J+".";break t}i=null}}if(i)throw new A("argument-error",t+" failed: "+i)}(t=Dl.prototype).Ia=function(){var t=this;return this.f?this.f:this.f=Fl(this,Oe().then((function(){if(xi()&&!Ei())return wi();throw new A("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.")})).then((function(){return t.v.g(t.u())})).then((function(e){return t.g=e,ru(t.o,qs,{})})).then((function(e){t.a[xl]=e.recaptchaSiteKey})).s((function(e){throw t.f=null,e})))},t.render=function(){Vl(this);var t=this;return Fl(this,this.Ia().then((function(){if(null===t.c){var e=t.m;if(!t.i){var n=he(e);e=function(t,e,n){var i=arguments,r=document,o=String(i[0]),a=i[1];if(!ce&&a&&(a.name||a.type)){if(o=["<",o],a.name&&o.push(' name="',Gt(a.name),'"'),a.type){o.push(' type="',Gt(a.type),'"');var s={};bt(s,a),delete s.type,a=s}o.push(">"),o=o.join("")}return o=me(r,o),a&&("string"==typeof a?o.className=a:Array.isArray(a)?o.className=a.join(" "):le(o,a)),2<i.length&&ve(r,o,i),o}("DIV"),n.appendChild(e)}t.c=t.g.render(e,t.a)}return t.c})))},t.verify=function(){Vl(this);var t=this;return Fl(this,this.render().then((function(e){return new Te((function(n){var i=t.g.getResponse(e);if(i)n(i);else{var r=function(e){e&&(function(t,e){Y(t.l,(function(t){return t==e}))}(t,r),n(e))};t.l.push(r),t.i&&t.g.execute(t.c)}}))})))},t.reset=function(){Vl(this),null!==this.c&&this.g.reset(this.c)},t.clear=function(){Vl(this),this.A=!0,this.v.c();for(var t=0;t<this.h.length;t++)this.h[t].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.i){t=he(this.m);for(var e;e=t.firstChild;)t.removeChild(e)}},S(Ul,Dl);var Hl="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function Kl(t,e){return{name:t||"",J:"a valid string",optional:!!e,K:function(t){return"string"==typeof t}}}function Bl(t,e){return{name:t||"",J:"a boolean",optional:!!e,K:function(t){return"boolean"==typeof t}}}function Gl(t,e){return{name:t||"",J:"a valid object",optional:!!e,K:v}}function Wl(t,e){return{name:t||"",J:"a function",optional:!!e,K:function(t){return"function"==typeof t}}}function zl(t,e){return{name:t||"",J:"null",optional:!!e,K:function(t){return null===t}}}function Xl(t){return{name:t?t+"Credential":"credential",J:t?"a valid "+t+" credential":"a valid credential",optional:!1,K:function(e){if(!e)return!1;var n=!t||e.providerId===t;return!(!e.ja||!n)}}}function Jl(t,e){return v(t)&&"string"==typeof t.type&&t.type===e&&"function"==typeof t.Ha}function Yl(t){return v(t)&&"string"==typeof t.uid}function $l(t,e,n,i){return{name:n||"",J:t.J+" or "+e.J,optional:!!i,K:function(n){return t.K(n)||e.K(n)}}}function Zl(t,e){for(var n in e){var i=e[n].name;t[i]=ef(i,t[n],e[n].j)}}function Ql(t,e){for(var n in e){var i=e[n].name;i!==n&&Object.defineProperty(t,i,{get:T((function(t){return this[t]}),n),set:T((function(t,e,n,i){ql(t,[n],[i],!0),this[e]=i}),i,n,e[n].jb),enumerable:!0})}}function tf(t,e,n,i){t[e]=ef(e,n,i)}function ef(t,e,n){function i(){var t=Array.prototype.slice.call(arguments);return ql(o,n,t),e.apply(this,t)}if(!n)return e;var r,o=function(t){return(t=t.split("."))[t.length-1]}(t);for(r in e)i[r]=e[r];for(r in e.prototype)i.prototype[r]=e.prototype[r];return i}Zl(ol.prototype,{ib:{name:"applyActionCode",j:[Kl("code")]},Qa:{name:"checkActionCode",j:[Kl("code")]},mb:{name:"confirmPasswordReset",j:[Kl("code"),Kl("newPassword")]},dc:{name:"createUserWithEmailAndPassword",j:[Kl("email"),Kl("password")]},gc:{name:"fetchSignInMethodsForEmail",j:[Kl("email")]},qa:{name:"getRedirectResult",j:[]},Ac:{name:"isSignInWithEmailLink",j:[Kl("emailLink")]},Gc:{name:"onAuthStateChanged",j:[$l(Gl(),Wl(),"nextOrObserver"),Wl("opt_error",!0),Wl("opt_completed",!0)]},Hc:{name:"onIdTokenChanged",j:[$l(Gl(),Wl(),"nextOrObserver"),Wl("opt_error",!0),Wl("opt_completed",!0)]},ub:{name:"sendPasswordResetEmail",j:[Kl("email"),$l(Gl("opt_actionCodeSettings",!0),zl(null,!0),"opt_actionCodeSettings",!0)]},vb:{name:"sendSignInLinkToEmail",j:[Kl("email"),Gl("actionCodeSettings")]},wb:{name:"setPersistence",j:[Kl("persistence")]},Rc:{name:"signInAndRetrieveDataWithCredential",j:[Xl()]},yb:{name:"signInAnonymously",j:[]},Za:{name:"signInWithCredential",j:[Xl()]},Sc:{name:"signInWithCustomToken",j:[Kl("token")]},Tc:{name:"signInWithEmailAndPassword",j:[Kl("email"),Kl("password")]},Uc:{name:"signInWithEmailLink",j:[Kl("email"),Kl("emailLink",!0)]},Vc:{name:"signInWithPhoneNumber",j:[Kl("phoneNumber"),{name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(t){return!(!t||"string"!=typeof t.type||"function"!=typeof t.verify)}}]},Wc:{name:"signInWithPopup",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Xc:{name:"signInWithRedirect",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},cd:{name:"updateCurrentUser",j:[$l({name:"user",J:"an instance of Firebase User",optional:!1,K:function(t){return!!(t&&t instanceof yh)}},zl(),"user")]},zb:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[Kl(null,!0)]},ed:{name:"useDeviceLanguage",j:[]},fd:{name:"useEmulator",j:[Kl("url")]},hd:{name:"verifyPasswordResetCode",j:[Kl("code")]}}),Ql(ol.prototype,{lc:{name:"languageCode",jb:$l(Kl(),zl(),"languageCode")},ti:{name:"tenantId",jb:$l(Kl(),zl(),"tenantId")}}),ol.Persistence=tc,ol.Persistence.LOCAL="local",ol.Persistence.SESSION="session",ol.Persistence.NONE="none",Zl(yh.prototype,{delete:{name:"delete",j:[]},nc:{name:"getIdTokenResult",j:[Bl("opt_forceRefresh",!0)]},I:{name:"getIdToken",j:[Bl("opt_forceRefresh",!0)]},Bc:{name:"linkAndRetrieveDataWithCredential",j:[Xl()]},pb:{name:"linkWithCredential",j:[Xl()]},Cc:{name:"linkWithPhoneNumber",j:[Kl("phoneNumber"),{name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(t){return!(!t||"string"!=typeof t.type||"function"!=typeof t.verify)}}]},Dc:{name:"linkWithPopup",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Ec:{name:"linkWithRedirect",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Kc:{name:"reauthenticateAndRetrieveDataWithCredential",j:[Xl()]},sb:{name:"reauthenticateWithCredential",j:[Xl()]},Lc:{name:"reauthenticateWithPhoneNumber",j:[Kl("phoneNumber"),{name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(t){return!(!t||"string"!=typeof t.type||"function"!=typeof t.verify)}}]},Mc:{name:"reauthenticateWithPopup",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},Nc:{name:"reauthenticateWithRedirect",j:[{name:"authProvider",J:"a valid Auth provider",optional:!1,K:function(t){return!!(t&&t.providerId&&t.hasOwnProperty&&t.hasOwnProperty("isOAuthProvider"))}}]},reload:{name:"reload",j:[]},tb:{name:"sendEmailVerification",j:[$l(Gl("opt_actionCodeSettings",!0),zl(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[Kl(null,!0)]},bd:{name:"unlink",j:[Kl("provider")]},Ab:{name:"updateEmail",j:[Kl("email")]},Bb:{name:"updatePassword",j:[Kl("password")]},dd:{name:"updatePhoneNumber",j:[Xl("phone")]},Cb:{name:"updateProfile",j:[Gl("profile")]},Db:{name:"verifyBeforeUpdateEmail",j:[Kl("email"),$l(Gl("opt_actionCodeSettings",!0),zl(null,!0),"opt_actionCodeSettings",!0)]}}),Zl(yl.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),Zl(bl.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),Zl(Te.prototype,{na:{name:"finally"},s:{name:"catch"},then:{name:"then"}}),Ql($c.prototype,{appVerificationDisabled:{name:"appVerificationDisabledForTesting",jb:Bl("appVerificationDisabledForTesting")}}),Zl(Zc.prototype,{confirm:{name:"confirm",j:[Kl("verificationCode")]}}),tf(lo,"fromJSON",(function(t){t="string"==typeof t?JSON.parse(t):t;for(var e,n=[yo,Do,jo,mo],i=0;i<n.length;i++)if(e=n[i](t))return e;return null}),[$l(Kl(),Gl(),"json")]),tf(Ro,"credential",(function(t,e){return new Po(t,e)}),[Kl("email"),Kl("password")]),Zl(Po.prototype,{w:{name:"toJSON",j:[Kl(null,!0)]}}),Zl(Eo.prototype,{Ca:{name:"addScope",j:[Kl("scope")]},Ka:{name:"setCustomParameters",j:[Gl("customOAuthParameters")]}}),tf(Eo,"credential",So,[$l(Kl(),Gl(),"token")]),tf(Ro,"credentialWithLink",Lo,[Kl("email"),Kl("emailLink")]),Zl(_o.prototype,{Ca:{name:"addScope",j:[Kl("scope")]},Ka:{name:"setCustomParameters",j:[Gl("customOAuthParameters")]}}),tf(_o,"credential",Ao,[$l(Kl(),Gl(),"token")]),Zl(ko.prototype,{Ca:{name:"addScope",j:[Kl("scope")]},Ka:{name:"setCustomParameters",j:[Gl("customOAuthParameters")]}}),tf(ko,"credential",No,[$l(Kl(),$l(Gl(),zl()),"idToken"),$l(Kl(),zl(),"accessToken",!0)]),Zl(Oo.prototype,{Ka:{name:"setCustomParameters",j:[Gl("customOAuthParameters")]}}),tf(Oo,"credential",Co,[$l(Kl(),Gl(),"token"),Kl("secret",!0)]),Zl(To.prototype,{Ca:{name:"addScope",j:[Kl("scope")]},credential:{name:"credential",j:[$l(Kl(),$l(Gl(),zl()),"optionsOrIdToken"),$l(Kl(),zl(),"accessToken",!0)]},Ka:{name:"setCustomParameters",j:[Gl("customOAuthParameters")]}}),Zl(go.prototype,{w:{name:"toJSON",j:[Kl(null,!0)]}}),Zl(po.prototype,{w:{name:"toJSON",j:[Kl(null,!0)]}}),tf(Vo,"credential",Uo,[Kl("verificationId"),Kl("verificationCode")]),Zl(Vo.prototype,{eb:{name:"verifyPhoneNumber",j:[$l(Kl(),{name:"phoneInfoOptions",J:"valid phone info options",optional:!1,K:function(t){return!!t&&(t.session&&t.phoneNumber?Jl(t.session,co)&&"string"==typeof t.phoneNumber:t.session&&t.multiFactorHint?Jl(t.session,ho)&&Yl(t.multiFactorHint):t.session&&t.multiFactorUid?Jl(t.session,ho)&&"string"==typeof t.multiFactorUid:!!t.phoneNumber&&"string"==typeof t.phoneNumber)}},"phoneInfoOptions"),{name:"applicationVerifier",J:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,K:function(t){return!(!t||"string"!=typeof t.type||"function"!=typeof t.verify)}}]}}),Zl(Mo.prototype,{w:{name:"toJSON",j:[Kl(null,!0)]}}),Zl(A.prototype,{toJSON:{name:"toJSON",j:[Kl(null,!0)]}}),Zl(Jo.prototype,{toJSON:{name:"toJSON",j:[Kl(null,!0)]}}),Zl(Xo.prototype,{toJSON:{name:"toJSON",j:[Kl(null,!0)]}}),Zl(rh.prototype,{toJSON:{name:"toJSON",j:[Kl(null,!0)]}}),Zl(eh.prototype,{Qc:{name:"resolveSignIn",j:[{name:"multiFactorAssertion",J:"a valid multiFactorAssertion",optional:!1,K:function(t){return!!t&&!!t.rb}}]}}),Zl(hh.prototype,{Qb:{name:"getSession",j:[]},ec:{name:"enroll",j:[{name:"multiFactorAssertion",J:"a valid multiFactorAssertion",optional:!1,K:function(t){return!!t&&!!t.rb}},Kl("displayName",!0)]},ad:{name:"unenroll",j:[$l({name:"multiFactorInfo",J:"a valid multiFactorInfo",optional:!1,K:Yl},Kl(),"multiFactorInfoIdentifier")]}}),Zl(Ul.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}}),tf(Sr,"parseLink",Dr,[Kl("link")]),tf(_l,"assertion",(function(t){return new uh(t)}),[Xl("phone")]),function(){if(void 0===Z||!Z.INTERNAL||!Z.INTERNAL.registerComponent)throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");var t={ActionCodeInfo:{Operation:{EMAIL_SIGNIN:fr,PASSWORD_RESET:"PASSWORD_RESET",RECOVER_EMAIL:"RECOVER_EMAIL",REVERT_SECOND_FACTOR_ADDITION:lr,VERIFY_AND_CHANGE_EMAIL:pr,VERIFY_EMAIL:"VERIFY_EMAIL"}},Auth:ol,AuthCredential:lo,Error:A};tf(t,"EmailAuthProvider",Ro,[]),tf(t,"FacebookAuthProvider",Eo,[]),tf(t,"GithubAuthProvider",_o,[]),tf(t,"GoogleAuthProvider",ko,[]),tf(t,"TwitterAuthProvider",Oo,[]),tf(t,"OAuthProvider",To,[Kl("providerId")]),tf(t,"SAMLAuthProvider",Io,[Kl("providerId")]),tf(t,"PhoneAuthProvider",Vo,[{name:"auth",J:"an instance of Firebase Auth",optional:!0,K:function(t){return!!(t&&t instanceof ol)}}]),tf(t,"RecaptchaVerifier",Ul,[$l(Kl(),{name:"",J:"an HTML element",optional:!1,K:function(t){return!!(t&&t instanceof Element)}},"recaptchaContainer"),Gl("recaptchaParameters",!0),{name:"app",J:"an instance of Firebase App",optional:!0,K:function(t){return!!(t&&t instanceof Z.app.App)}}]),tf(t,"ActionCodeURL",Sr,[]),tf(t,"PhoneMultiFactorGenerator",_l,[]),Z.INTERNAL.registerComponent({name:"auth",instanceFactory:function(t){return new ol(t=t.getProvider("app").getImmediate())},multipleInstances:!1,serviceProps:t,instantiationMode:"LAZY",type:"PUBLIC"}),Z.INTERNAL.registerComponent({name:"auth-internal",instanceFactory:function(t){return{getUid:I((t=t.getProvider("auth").getImmediate()).getUid,t),getToken:I(t.mc,t),addAuthTokenListener:I(t.cc,t),removeAuthTokenListener:I(t.Oc,t)}},multipleInstances:!1,instantiationMode:"LAZY",type:"PRIVATE"}),Z.registerVersion("@firebase/auth","0.15.2"),Z.INTERNAL.extendNamespace({User:yh})}()}.apply(void 0!==n.g?n.g:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{}),Z.initializeApp({apiKey:"AIzaSyADkx0R20kiGU7upgsdFGn1PORCYs_Sps8",authDomain:"firegur-app.firebaseapp.com",projectId:"firegur-app",storageBucket:"firegur-app.appspot.com",messagingSenderId:"276908818311",appId:"1:276908818311:web:a9d98565066ab458fe1d22",measurementId:"G-2BB8V06QH4"}),Z.analytics(),document.addEventListener("DOMContentLoaded",(function(){var t=document.querySelector("#load");if(t)try{var e=Z.app(),n=["auth","database","firestore","functions","messaging","storage","analytics","remoteConfig","performance"].filter((function(t){return e.hasOwnProperty(t)}));t.textContent="Firebase SDK loaded with "+n.join(", ")}catch(e){console.error(e),t.textContent="Error loading the Firebase SDK, check the console."}}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,